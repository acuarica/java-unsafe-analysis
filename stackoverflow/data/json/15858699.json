{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":15858699,
    "title":"Room synchronization : How to ensure multiple threads are using same node?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":22571935,
        "postId":15858699,
        "creationDate":"2013-04-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":462923,
          "displayName":"Ajeet",
          "reputation":1860
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Lokesh : Yes : http://en.wikipedia.org/wiki/Room_synchronization"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[15858699-cu22571935]-[-1146175277]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Lokesh : Yes : http://en.wikipedia.org/wiki/Room_synchronization"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Lokesh",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_synchronization",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "lokesh":1,
                      "wikipedia":1,
                      "wiki":1,
                      "room":1,
                      "org":1,
                      "http":1,
                      "synchron":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":22571760,
        "postId":15858699,
        "creationDate":"2013-04-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":628242,
          "displayName":"Lokesh",
          "reputation":4303
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I am not clear on your requirement. If i go by your logic then at a time only one resource will be used, even if 100 threads try to work simultaneously. Is this what you want?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[15858699-cu22571760]-[-1059268536]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I am not clear on your requirement. If i go by your logic then at a time only one resource will be used, even if 100 threads try to work simultaneously. Is this what you want?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "clear":1,
                      "requir":1,
                      "simultan":1,
                      "resourc":1,
                      "work":1,
                      "logic":1,
                      "thread":1,
                      "time":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "c++",
      "multithreading",
      "synchronization"
    ],
    "creationDate":"2013-04-07",
    "lastActivityDate":"2013-04-08",
    "lastEditDate":"2013-04-07",
    "score":1,
    "viewCount":181,
    "owner":{
      "type":"StackOverflowUser",
      "id":462923,
      "displayName":"Ajeet",
      "reputation":1860
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>(Problem link to wiki : <a href=\"http://en.wikipedia.org/wiki/Room_synchronization\"rel=\"nofollow\">http://en.wikipedia.org/wiki/Room_synchronization</a>)</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15858699]-[-1684989903]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>(Problem link to wiki : <a href=\"http://en.wikipedia.org/wiki/Room_synchronization\"rel=\"nofollow\">http://en.wikipedia.org/wiki/Room_synchronization</a>)</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"_synchronization",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "problem":1,
                  "rel":1,
                  "wikipedia":2,
                  "nofollow":1,
                  "link":1,
                  "wiki":3,
                  "room":2,
                  "org":2,
                  "href":1,
                  "http":2,
                  "synchron":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Suppose there are N resources of type NODE, represented by an array </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15858699]-[458516862]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Suppose there are N resources of type NODE, represented by an array </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "resourc":1,
                  "array":1,
                  "node":1,
                  "type":1,
                  "suppos":1,
                  "repres":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":" NODE nodearray[N]; "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[15858699]-[-1422700874]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":" NODE "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"ArrayAccessSelectorNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"nodearray",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "dimExpression":{
                      "type":"DimExpressionNode",
                      "argument":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"N",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                }
              ]
            },
            "rawText":" NODE nodearray[N]; ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "node":1,
                  "nodearray":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Lets say there are M threads which act (read/write). When the first thread arrives, it has liberty to choose from any of the N resource, but as long as first thread is holding on to resource number x (x is 0 to n-1), the second thread MUST use the same x. </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15858699]-[-580617498]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Lets say there are M threads which act (read/write). When the first thread arrives, it has liberty to choose from any of the N resource, but as long as first thread is holding on to resource number x (x is 0 to n-1), the second thread MUST use the same x. </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "number":1,
                  "liberti":1,
                  "arriv":1,
                  "resourc":2,
                  "hold":1,
                  "thread":4,
                  "choos":1,
                  "act":1,
                  "let":1,
                  "write":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Say we are to implement two functions </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15858699]-[-833182147]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Say we are to implement two functions </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "function":1,
                  "implement":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"int get();// gets the resource number for the thread and void ret();// returns the resource from the thread "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[15858699]-[644087995]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    
                  ],
                  "returnType":{
                    "type":"PrimitiveTypeNode",
                    "name":"int",
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"get",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "comments":[
                    {
                      "text":"// gets the resource number for the thread and void ret();// returns the resource from the thread \n"
                    }
                  ]
                }
              ]
            },
            "rawText":"int get();// gets the resource number for the thread and void ret();// returns the resource from the thread \n",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "number":1,
                  "ret":1,
                  "return":1,
                  "resourc":2,
                  "thread":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"int",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Any idea/hint how it could be implemented ? </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[15858699]-[-1236973608]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Any idea/hint how it could be implemented ? </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "idea":1,
                  "hint":1,
                  "implement":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":15862265,
      "questionId":15858699,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":22595788,
          "postId":15862265,
          "creationDate":"2013-04-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":462923,
            "displayName":"Ajeet",
            "reputation":1860
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks for info on where the room-synchronization could be used and the original use-case for it."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15862265-cu22595788]-[777969735]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks for info on where the room-synchronization could be used and the original use-case for it."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "synchron":1,
                        "room":1,
                        "info":1,
                        "origin":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-04-07",
      "lastActivityDate":"2013-04-08",
      "lastEditDate":"2013-04-08",
      "score":2,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":2209313,
        "displayName":"Wandering Logic",
        "reputation":1686
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>For the problem as you've stated it, I don't think you need to keep anything more than a single counter, an indication of which (single) resource is currently in use, and a mutex to make all of your function calls atomic.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15862265]-[996681587]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>For the problem as you've stated it, I don't think you need to keep anything more than a single counter, an indication of which (single) resource is currently in use, and a mutex to make all of your function calls atomic.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "singl":2,
                    "state":1,
                    "problem":1,
                    "resourc":1,
                    "mutex":1,
                    "indic":1,
                    "function":1,
                    "make":1,
                    "counter":1,
                    "atom":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>(<strong>Edit</strong>: I originally had code in here but it was almost identical to the code @Ajeet posted in his answer to his own question several hours before I posted this. So look at @Ajeet's answer if you want the code in C.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15862265]-[-878365615]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>(<strong>Edit</strong>: I originally had code in here but it was almost identical to the code @Ajeet posted in his answer to his own question several hours before I posted this. So look at @Ajeet's answer if you want the code in C.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Ajeet",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"AnnotationNode",
                    "identifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Ajeet",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "post":2,
                    "strong":2,
                    "hour":1,
                    "code":3,
                    "edit":1,
                    "ident":1,
                    "origin":1,
                    "ajeet":2,
                    "answer":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The form of room synchronization you proposed is not what the original authors had in mind <a href=\"http://www.cs.cmu.edu/~blelloch/papers/BCG03.pdf\"rel=\"nofollow\">(link to pdf)</a>. They needed an operation where the caller specifies what room they want to get into. The caller needs to <em>wait</em> if someone else is in a different room. So in that case we have:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15862265]-[167520422]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The form of room synchronization you proposed is not what the original authors had in mind <a href=\"http://www.cs.cmu.edu/~blelloch/papers/BCG03.pdf\"rel=\"nofollow\">(link to pdf)</a>. They needed an operation where the caller specifies what room they want to get into. The caller needs to <em>wait</em> if someone else is in a different room. So in that case we have:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "author":1,
                    "wait":1,
                    "pdf":2,
                    "cmu":1,
                    "propos":1,
                    "rel":1,
                    "blelloch":1,
                    "oper":1,
                    "nofollow":1,
                    "need":1,
                    "mind":1,
                    "bcg":1,
                    "origin":1,
                    "link":1,
                    "paper":1,
                    "specifi":1,
                    "room":3,
                    "form":1,
                    "href":1,
                    "http":1,
                    "caller":2,
                    "www":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"void enter(int roomnum); // wait until everyone is out of all rooms other than roomnum void exit(int roomnum); // exit roomnum "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[15862265]-[1191410813]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"enter",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "parameters":{
                        "type":"FormalParameterDeclsNode",
                        "modifiers":[
                          
                        ],
                        "parameterType":{
                          "type":"PrimitiveTypeNode",
                          "name":"int",
                          "comments":[
                            
                          ]
                        },
                        "nextDeclarator":{
                          "type":"AdditionalFormalParameterDeclNode",
                          "variableDeclarator":{
                            "type":"VariableDeclaratorNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"roomnum",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepth":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "comments":[
                      {
                        "text":"// wait until everyone is out of all rooms other than roomnum void exit(int roomnum); // exit roomnum \n"
                      }
                    ]
                  }
                ]
              },
              "rawText":"void enter(int roomnum); // wait until everyone is out of all rooms other than roomnum void exit(int roomnum); // exit roomnum \n",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "wait":1,
                    "enter":1,
                    "roomnum":4,
                    "exit":2,
                    "room":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"roomnum",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>And the implementation is more interesting. (Hint: in addition to the three variables above you also need a condition variable.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15862265]-[1319705531]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>And the implementation is more interesting. (Hint: in addition to the three variables above you also need a condition variable.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "addit":1,
                    "condit":1,
                    "interest":1,
                    "implement":1,
                    "hint":1,
                    "variabl":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you are wondering why any of this is the least bit useful (I was wondering that): in the paper I linked to they are trying to implement relatively complicated scalable concurrent algorithms. They present a way to solve the room synchronization problem using ticket spin locks (page 7). And show how to use the room synchronization problem to implement a scalable concurrent stack (page 4). (The insight for the concurrent stack is: it is okay for an arbitrary number of threads to simultaneously push using fetch-and-increment, and it is okay for an arbitrary number of threads to simultaneously pop using fetch-and-decrement, but you need to make sure there are no pushes and pops happening simultaneously.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15862265]-[299603361]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you are wondering why any of this is the least bit useful (I was wondering that): in the paper I linked to they are trying to implement relatively complicated scalable concurrent algorithms. They present a way to solve the room synchronization problem using ticket spin locks (page 7). And show how to use the room synchronization problem to implement a scalable concurrent stack (page 4). (The insight for the concurrent stack is: it is okay for an arbitrary number of threads to simultaneously push using fetch-and-increment, and it is okay for an arbitrary number of threads to simultaneously pop using fetch-and-decrement, but you need to make sure there are no pushes and pops happening simultaneously.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "solv":1,
                    "number":2,
                    "insight":1,
                    "show":1,
                    "concurr":3,
                    "bit":1,
                    "arbitrari":2,
                    "pop":2,
                    "happen":1,
                    "problem":2,
                    "complic":1,
                    "present":1,
                    "simultan":3,
                    "page":2,
                    "push":2,
                    "spin":1,
                    "lock":1,
                    "ticket":1,
                    "decrement":1,
                    "thread":2,
                    "algorithm":1,
                    "scalabl":2,
                    "link":1,
                    "paper":1,
                    "wonder":2,
                    "stack":2,
                    "implement":2,
                    "fetch":2,
                    "make":1,
                    "room":2,
                    "increment":1,
                    "synchron":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":15859274,
      "questionId":15858699,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":22572171,
          "postId":15859274,
          "creationDate":"2013-04-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":628242,
            "displayName":"Lokesh",
            "reputation":4303
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"why do u need counter? just check the value of current that should be sufficient"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15859274-cu22572171]-[650094214]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"why do u need counter? just check the value of current that should be sufficient"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "suffici":1,
                        "counter":1,
                        "current":1,
                        "check":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22572252,
          "postId":15859274,
          "creationDate":"2013-04-07",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":462923,
            "displayName":"Ajeet",
            "reputation":1860
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Lokesh : Suppose two threads have called ret(), how would program know about resetting of of current ? Think of counter as a reference-counting variable."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15859274-cu22572252]-[506252070]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Lokesh : Suppose two threads have called ret(), how would program know about resetting of of current ? Think of counter as a reference-counting variable."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Lokesh",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "count":1,
                        "ret":1,
                        "lokesh":1,
                        "thread":1,
                        "refer":1,
                        "reset":1,
                        "counter":1,
                        "variabl":1,
                        "current":1,
                        "suppos":1,
                        "call":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":22591326,
          "postId":15859274,
          "creationDate":"2013-04-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2209313,
            "displayName":"Wandering Logic",
            "reputation":1686
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Ajeet: I came up with an almost identical implementation. I will edit my post to remove my implementation and point to yours."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[15859274-cu22591326]-[9985721]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Ajeet: I came up with an almost identical implementation. I will edit my post to remove my implementation and point to yours."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Ajeet",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "post":1,
                        "remov":1,
                        "point":1,
                        "edit":1,
                        "ident":1,
                        "ajeet":1,
                        "implement":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-04-07",
      "lastActivityDate":"2013-04-08",
      "lastEditDate":"2013-04-08",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":462923,
        "displayName":"Ajeet",
        "reputation":1860
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I have this solutions but would be great if someone can critique it.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15859274]-[-866153598]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I have this solutions but would be great if someone can critique it.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "critiqu":1,
                    "great":1,
                    "solut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"int counter = 0; int current = -1; NODE nodearray[N]; mutex m; int get() { lock(m); if(!counter) { current = rand()%N; } ++counter; unlock(m); return current; } void ret() { lock(m); --counter; if(!counter) { current = -1; } unlock(m); } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[15859274]-[-2055683187]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"int "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"counter",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"0"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"int "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"current",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"PrefixOperatorExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"-",
                          "comments":[
                            
                          ]
                        },
                        "argument":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"1"
                          },
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"NODE "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"ArrayAccessSelectorNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"nodearray",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "dimExpression":{
                        "type":"DimExpressionNode",
                        "argument":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"N",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"mutex m; "
                  },
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"get",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"lock",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"m",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        {
                          "type":"IfStatementNode",
                          "expression":{
                            "type":"PrefixOperatorExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"!",
                              "comments":[
                                
                              ]
                            },
                            "argument":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"counter",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"BinaryExpressionNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"=",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "left":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"current",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "right":{
                                    "type":"BinaryExpressionNode",
                                    "operator":{
                                      "type":"OperatorNode",
                                      "symbol":"%",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "left":{
                                      "type":"MethodInvocationNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"rand",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "right":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"N",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"PrefixOperatorExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"++",
                              "comments":[
                                
                              ]
                            },
                            "argument":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"counter",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"unlock",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"m",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        {
                          "type":"ReturnStatementNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"current",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"ret",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"lock",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"m",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"PrefixOperatorExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"--",
                              "comments":[
                                
                              ]
                            },
                            "argument":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"counter",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        {
                          "type":"IfStatementNode",
                          "expression":{
                            "type":"PrefixOperatorExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"!",
                              "comments":[
                                
                              ]
                            },
                            "argument":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"counter",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"BinaryExpressionNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"=",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "left":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"current",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "right":{
                                    "type":"PrefixOperatorExpressionNode",
                                    "operator":{
                                      "type":"OperatorNode",
                                      "symbol":"-",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "argument":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"IntegerLiteralNode",
                                        "valueRep":"1"
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ExpressionStatement",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"unlock",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"m",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"int counter = 0; int current = -1; NODE nodearray[N]; mutex m; int get() { lock(m); if(!counter) { current = rand()%N; } ++counter; unlock(m); return current; } void ret() { lock(m); --counter; if(!counter) { current = -1; } unlock(m); } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "nodearray":1,
                    "ret":1,
                    "lock":2,
                    "mutex":1,
                    "unlock":2,
                    "rand":1,
                    "counter":5,
                    "node":1,
                    "current":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"lock",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"m",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"rand",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"unlock",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"m",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":15859341,
      "questionId":15858699,
      "comments":[
        
      ],
      "creationDate":"2013-04-07",
      "lastActivityDate":"2013-04-07",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":628242,
        "displayName":"Lokesh",
        "reputation":4303
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If i were to implement this. I would create a wrapper on top of all resources available. Your scenario is like a resource pool of size 1.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15859341]-[423665780]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If i were to implement this. I would create a wrapper on top of all resources available. Your scenario is like a resource pool of size 1.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "scenario":1,
                    "size":1,
                    "resourc":2,
                    "wrapper":1,
                    "pool":1,
                    "implement":1,
                    "creat":1,
                    "top":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Resource pool instance would be static and get and ret methods would be defined in it. This resource pool implementation will pick one resource when get is called and will keep track if resource is being used. If it is being used then same instance will always be returned. If it is not being used then you can release the resource [you can even put a timeout before releasing a resource].</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15859341]-[-309362286]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Resource pool instance would be static and get and ret methods would be defined in it. This resource pool implementation will pick one resource when get is called and will keep track if resource is being used. If it is being used then same instance will always be returned. If it is not being used then you can release the resource [you can even put a timeout before releasing a resource].</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "ret":1,
                    "return":1,
                    "track":1,
                    "resourc":6,
                    "releas":2,
                    "pick":1,
                    "pool":2,
                    "implement":1,
                    "put":1,
                    "defin":1,
                    "call":1,
                    "timeout":1,
                    "instanc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Internal resource pool implementation can vary based of choice of classes like synchronizers, concurrent hashmaps etc.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[15859341]-[-525449266]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Internal resource pool implementation can vary based of choice of classes like synchronizers, concurrent hashmaps etc.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "concurr":1,
                    "hashmap":1,
                    "resourc":1,
                    "base":1,
                    "vari":1,
                    "pool":1,
                    "choic":1,
                    "implement":1,
                    "class":1,
                    "intern":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}