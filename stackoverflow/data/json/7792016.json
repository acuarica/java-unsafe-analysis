{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":7792016,
    "title":"Speed: four ints or one int with many operations",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":9491032,
        "postId":7792016,
        "creationDate":"2011-10-17",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":982149,
          "displayName":"Fildor",
          "reputation":3217
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"There is no &quot;unsigned&quot; in java."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7792016-cu9491032]-[-1344107905]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"There is no &quot;unsigned&quot; in java."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "unsign":1,
                      "quot":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":9491063,
        "postId":7792016,
        "creationDate":"2011-10-17",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":276052,
          "displayName":"aioobe",
          "reputation":183991
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I suppose he means &quot;an int where I ignore the sign-bit&quot;."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7792016-cu9491063]-[389758739]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I suppose he means &quot;an int where I ignore the sign-bit&quot;."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "ignor":1,
                      "bit":1,
                      "mean":1,
                      "sign":1,
                      "quot":2,
                      "suppos":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":9491067,
        "postId":7792016,
        "creationDate":"2011-10-17",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":711129,
          "displayName":"Hidde",
          "reputation":3568
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You're right, I just mean 'int'..."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7792016-cu9491067]-[809019512]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You're right, I just mean 'int'..."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":9491094,
        "postId":7792016,
        "creationDate":"2011-10-17",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":636115,
          "displayName":"jbrookover",
          "reputation":3619
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I guess the question is whether passing 4 arguments incurs a speed penalty over passing 1 argument. I'm inclined to think that the cost of packing your 4 variables into one and then unpacking on the other side would be less efficient than whatever Java does with 4 arguments."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[7792016-cu9491094]-[913818313]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I guess the question is whether passing 4 arguments incurs a speed penalty over passing 1 argument. I'm inclined to think that the cost of packing your 4 variables into one and then unpacking on the other side would be less efficient than whatever Java does with 4 arguments."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "side":1,
                      "question":1,
                      "unpack":1,
                      "pack":1,
                      "effici":1,
                      "penalti":1,
                      "inclin":1,
                      "incur":1,
                      "cost":1,
                      "pass":2,
                      "guess":1,
                      "variabl":1,
                      "argument":3,
                      "speed":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "performance",
      "variables",
      "int",
      "bit-manipulation"
    ],
    "creationDate":"2011-10-17",
    "lastActivityDate":"2011-10-17",
    "score":1,
    "viewCount":63,
    "owner":{
      "type":"StackOverflowUser",
      "id":711129,
      "displayName":"Hidde",
      "reputation":3568
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have a speed question for Java. I am making a chess program, and I want to check if is a good idea to use one 'int' as a variable to store four 'int' variables, in which the values range from 1 to (4 bits). </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7792016]-[1623813834]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have a speed question for Java. I am making a chess program, and I want to check if is a good idea to use one 'int' as a variable to store four 'int' variables, in which the values range from 1 to (4 bits). </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "program":1,
                  "question":1,
                  "chess":1,
                  "bit":1,
                  "good":1,
                  "rang":1,
                  "idea":1,
                  "store":1,
                  "check":1,
                  "valu":1,
                  "make":1,
                  "variabl":2,
                  "speed":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The problem is that I'll often have to extract and put in new parts of the variable, so that will cost quite some (bitwise) operations.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7792016]-[897972653]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The problem is that I'll often have to extract and put in new parts of the variable, so that will cost quite some (bitwise) operations.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "problem":1,
                  "oper":1,
                  "cost":1,
                  "put":1,
                  "part":1,
                  "bitwis":1,
                  "variabl":1,
                  "extract":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Code: </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7792016]-[1683543934]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Code: </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "code":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"int fromX = 4, fromY = 5, toX = 6, toY = 7; int move = 0 move |= toY; move = move &lt;&lt; 4; move |= toX; move = move &lt;&lt; 4; move |= fromY; move = move &lt;&lt; 4; move |= fromX; doWork(move); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[7792016]-[-496453244]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"int "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"fromX",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" = 4, "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"fromY",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" = 5, toX = 6, "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"toY",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"IntegerLiteralNode",
                        "valueRep":"7"
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":"int move = 0 "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"|=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"move",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"toY",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"move",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"<<",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"move",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"4"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"|=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"move",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"toX",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"move",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"<<",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"move",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"4"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"|=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"move",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"fromY",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"move",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"<<",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"move",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"4"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"|=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"move",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"fromX",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"MethodInvocationNode",
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"doWork",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"move",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"int fromX = 4, fromY = 5, toX = 6, toY = 7; int move = 0 move |= toY; move = move << 4; move |= toX; move = move << 4; move |= fromY; move = move << 4; move |= fromX; doWork(move); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "move":12,
                  "work":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"doWork",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"move",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>or</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7792016]-[-971216786]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>or</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"int fromX = 4, fromY = 5, toX = 6, toY = 7; doWork(fromX, fromY, toX, toY); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[7792016]-[292351194]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":"int "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"fromX",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" = 4, "
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"fromY",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"TextFragmentNode",
                  "text":" = 5, toX = 6, "
                },
                {
                  "type":"ExpressionStatement",
                  "expression":{
                    "type":"BinaryExpressionNode",
                    "operator":{
                      "type":"OperatorNode",
                      "symbol":"=",
                      "comments":[
                        
                      ]
                    },
                    "left":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"toY",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "right":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"IntegerLiteralNode",
                        "valueRep":"7"
                      },
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ]
                },
                {
                  "type":"MethodInvocationNode",
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"doWork",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"fromX",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"fromY",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"toX",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"toY",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"int fromX = 4, fromY = 5, toX = 6, toY = 7; doWork(fromX, fromY, toX, toY); ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "work":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"doWork",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"fromX",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"fromY",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"toX",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"toY",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><code>doWork()</code> will do a lot of different things with the coordinates, mostly extract them from the 'int', or just use the variables.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7792016]-[123325790]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><code>doWork()</code> will do a lot of different things with the coordinates, mostly extract them from the 'int', or just use the variables.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"doWork",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "thing":1,
                  "work":1,
                  "code":2,
                  "coordin":1,
                  "lot":1,
                  "variabl":1,
                  "extract":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Which should I use?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[7792016]-[1937541360]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Which should I use?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":7792040,
      "questionId":7792016,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":9491141,
          "postId":7792040,
          "creationDate":"2011-10-17",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":711129,
            "displayName":"Hidde",
            "reputation":3568
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I have written most of my program, and I don't want to write very big parts of it again. That's why I asked. I'll start profiling in some days, when I finish a major bug. Thanks!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7792040-cu9491141]-[1468532020]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I have written most of my program, and I don't want to write very big parts of it again. That's why I asked. I'll start profiling in some days, when I finish a major bug. Thanks!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "profil":1,
                        "big":1,
                        "finish":1,
                        "bug":1,
                        "written":1,
                        "part":1,
                        "ask":1,
                        "start":1,
                        "major":1,
                        "day":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":9491205,
          "postId":7792040,
          "creationDate":"2011-10-17",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":478399,
            "displayName":"AlexR",
            "reputation":68143
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Very good answer. I agree with each word. I just want to add that the question is the classical example of premature optimisation."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7792040-cu9491205]-[-1600532564]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Very good answer. I agree with each word. I just want to add that the question is the classical example of premature optimisation."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "good":1,
                        "optimis":1,
                        "classic":1,
                        "agre":1,
                        "answer":1,
                        "prematur":1,
                        "word":1,
                        "add":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-10-17",
      "lastActivityDate":"2011-10-17",
      "score":6,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":276052,
        "displayName":"aioobe",
        "reputation":183991
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>I want to check if is a good idea to use one 'unsigned int' as a variable to store four 'int' variables</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7792040]-[-1401682537]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>I want to check if is a good idea to use one 'unsigned int' as a variable to store four 'int' variables</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "good":1,
                    "idea":1,
                    "store":1,
                    "unsign":1,
                    "blockquot":2,
                    "check":1,
                    "variabl":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>No, this is a <em>Bad Idea</em>™ for a bunch of reasons.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7792040]-[1914323344]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>No, this is a <em>Bad Idea</em>™ for a bunch of reasons.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "bunch":1,
                    "idea":1,
                    "bad":1,
                    "reason":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li><p>This would be highly inefficient</p></li> \n <li><p>Very hard to <em>read</em></p></li> \n <li><p>(consequently) very hard to <em>debug</em></p></li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7792040]-[1897402226]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li><p>This would be highly inefficient</p></li> \n <li><p>Very hard to <em>read</em></p></li> \n <li><p>(consequently) very hard to <em>debug</em></p></li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":1,
                    "hard":2,
                    "debug":1,
                    "ineffici":1,
                    "high":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Sure, it may save a few bytes here and there, but honestly, I buy my RAM-modules in gigabytes these days.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7792040]-[-1014422630]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Sure, it may save a few bytes here and there, but honestly, I buy my RAM-modules in gigabytes these days.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "ram":1,
                    "buy":1,
                    "modul":1,
                    "gigabyt":1,
                    "save":1,
                    "honest":1,
                    "byte":1,
                    "day":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>My suggestion:</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7792040]-[-222160354]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>My suggestion:</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "suggest":1,
                    "strong":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Write up your entire chess-program. <em>If</em> you run into performance problems, <em>profile</em> the program to see where the bottle-necks are, and do something about those. (I can guarantee you that you won't start packing several numbers into an <code>int</code> once you reach this point.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7792040]-[-145627681]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Write up your entire chess-program. <em>If</em> you run into performance problems, <em>profile</em> the program to see where the bottle-necks are, and do something about those. (I can guarantee you that you won't start packing several numbers into an <code>int</code> once you reach this point.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "program":2,
                    "reach":1,
                    "neck":1,
                    "point":1,
                    "chess":1,
                    "profil":1,
                    "problem":1,
                    "run":1,
                    "pack":1,
                    "entir":1,
                    "code":2,
                    "guarante":1,
                    "perform":1,
                    "start":1,
                    "bottl":1,
                    "won":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":7792062,
      "questionId":7792016,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":9491107,
          "postId":7792062,
          "creationDate":"2011-10-17",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":711129,
            "displayName":"Hidde",
            "reputation":3568
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I really don't want to make any Objects, because anything I do will be reapeated about 10 million times, when searching in my chess-game-possible-move-tree... And the coordinates are not really flags, they change a lot, and are passed back and forth beween methods."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7792062-cu9491107]-[1023990448]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I really don't want to make any Objects, because anything I do will be reapeated about 10 million times, when searching in my chess-game-possible-move-tree... And the coordinates are not really flags, they change a lot, and are passed back and forth beween methods."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "method":1,
                        "move":1,
                        "chess":1,
                        "beween":1,
                        "object":1,
                        "back":1,
                        "coordin":1,
                        "flag":1,
                        "lot":1,
                        "pass":1,
                        "make":1,
                        "tree":1,
                        "reapeat":1,
                        "time":1,
                        "million":1,
                        "game":1,
                        "search":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":9491161,
          "postId":7792062,
          "creationDate":"2011-10-17",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":982149,
            "displayName":"Fildor",
            "reputation":3217
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"OK, I see. Then you might want to think about creating a &quot;Context&quot; or &quot;Arguments&quot; - Object once and share that one instance over your 10 gazillion calls ..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[7792062-cu9491161]-[-569368502]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"OK, I see. Then you might want to think about creating a &quot;Context&quot; or &quot;Arguments&quot; - Object once and share that one instance over your 10 gazillion calls ..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "context":1,
                        "object":1,
                        "share":1,
                        "quot":4,
                        "creat":1,
                        "call":1,
                        "argument":1,
                        "instanc":1,
                        "gazillion":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2011-10-17",
      "lastActivityDate":"2011-10-17",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":982149,
        "displayName":"Fildor",
        "reputation":3217
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you just want to store some Flags, you can use BitSet for example. If it is data, I second aioobe's answer.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7792062]-[-983101412]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you just want to store some Flags, you can use BitSet for example. If it is data, I second aioobe's answer.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"BitSet",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "bit":1,
                    "data":1,
                    "set":1,
                    "store":1,
                    "aioob":1,
                    "flag":1,
                    "answer":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"BitSet",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":7792161,
      "questionId":7792016,
      "comments":[
        
      ],
      "creationDate":"2011-10-17",
      "lastActivityDate":"2011-10-17",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":918,
        "displayName":"Andrew",
        "reputation":1846
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As Alan Kay <a href=\"http://c2.com/cgi/wiki?AlanKayQuotes\"rel=\"nofollow\">said</a>, </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7792161]-[1538159738]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As Alan Kay <a href=\"http://c2.com/cgi/wiki?AlanKayQuotes\"rel=\"nofollow\">said</a>, </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rel":1,
                    "nofollow":1,
                    "quot":1,
                    "kay":2,
                    "wiki":1,
                    "alan":2,
                    "href":1,
                    "http":1,
                    "cgi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>&quot;Make it work, make it correct, make it fast, make it cheap&quot;</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7792161]-[831118540]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>&quot;Make it work, make it correct, make it fast, make it cheap&quot;</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cheap":1,
                    "correct":1,
                    "work":1,
                    "blockquot":2,
                    "make":4,
                    "quot":2,
                    "fast":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Once you've got the program working, measure it to find out what's slow, or what takes too much space. You can then make a reasoned decision about what you need to optimise.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[7792161]-[-1456161984]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Once you've got the program working, measure it to find out what's slow, or what takes too much space. You can then make a reasoned decision about what you need to optimise.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "find":1,
                    "slow":1,
                    "optimis":1,
                    "reason":1,
                    "work":1,
                    "measur":1,
                    "decis":1,
                    "space":1,
                    "take":1,
                    "make":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}