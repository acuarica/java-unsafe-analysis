{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":19501966,
    "title":"Is it possible to produce undefined behavior when dereferencing `null` in Java?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":28928597,
        "postId":19501966,
        "creationDate":"2013-10-21",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"With regard to Unsafe, that is, by definition, unsafe, and you can very likely produce &quot;undefined&quot; behaviors. But Unsafe is supposed to be inaccessible to all but folks with super-special privileges (who presumably know what they're doing and are honor-bound to not use their powers for evil purposes)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19501966-cu28928597]-[1079133772]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"With regard to Unsafe, that is, by definition, unsafe, and you can very likely produce &quot;undefined&quot; behaviors. But Unsafe is supposed to be inaccessible to all but folks with super-special privileges (who presumably know what they're doing and are honor-bound to not use their powers for evil purposes)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "regard":1,
                      "produc":1,
                      "folk":1,
                      "privileg":1,
                      "inaccess":1,
                      "bound":1,
                      "definit":1,
                      "undefin":1,
                      "quot":2,
                      "unsaf":3,
                      "power":1,
                      "special":1,
                      "behavior":1,
                      "suppos":1,
                      "evil":1,
                      "purpos":1,
                      "honor":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28928257,
        "postId":19501966,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2891664,
          "displayName":"Radiodef",
          "reputation":12211
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What do you mean by dereferencing null? Something like `null.doSomething();` is illegal in Java. Null can't be dereferenced."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19501966-cu28928257]-[505639416]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What do you mean by dereferencing null? Something like `null.doSomething();` is illegal in Java. Null can't be dereferenced."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ExpressionStatement",
                      "expression":{
                        "type":"BinaryExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":".",
                          "comments":[
                            
                          ]
                        },
                        "left":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"NullLiteralNode"
                          },
                          "comments":[
                            
                          ]
                        },
                        "right":{
                          "type":"MethodInvocationNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"doSomething",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "illeg":1,
                      "dereferenc":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      {
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"doSomething",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28928268,
        "postId":19501966,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"No. Except perhaps in some odd cases where you somehow provoke the behavior deep inside some system routine, NullPointerException and the circumstances surrounding it is well-defined."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19501966-cu28928268]-[1436078648]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"No. Except perhaps in some odd cases where you somehow provoke the behavior deep inside some system routine, NullPointerException and the circumstances surrounding it is well-defined."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"NullPointerException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "circumst":1,
                      "provok":1,
                      "system":1,
                      "pointer":1,
                      "odd":1,
                      "routin":1,
                      "deep":1,
                      "insid":1,
                      "case":1,
                      "behavior":1,
                      "defin":1,
                      "surround":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"NullPointerException",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28928295,
        "postId":19501966,
        "creationDate":"2013-10-21",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Radiodef - I can do `String x = null; x.charAt(0);`."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19501966-cu28928295]-[1952544018]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Radiodef - I can do `String x = null; x.charAt(0);`."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Radiodef",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"LocalVariableDeclarationStatementNode",
                      "modifiers":[
                        
                      ],
                      "declarators":{
                        "type":"VariableDeclaratorsNode",
                        "declarators":[
                          {
                            "type":"VariableDeclaratorNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"x",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepth":[
                              
                            ],
                            "assignment":{
                              "type":"VariableAssignmentNode",
                              "variableAssignment":{
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"NullLiteralNode"
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              "comments":[
                                
                              ]
                            },
                            "varType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"String",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"x",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"charAt",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"0"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "radiodef":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      {
                        "type":"MethodInvocationNode",
                        "qualifiedIdentifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"x",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"charAt",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            {
                              "type":"LiteralNode",
                              "node":{
                                "type":"IntegerLiteralNode",
                                "valueRep":"0"
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"x",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"NullLiteralNode"
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"String",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28928339,
        "postId":19501966,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1435657,
          "displayName":"asteri",
          "reputation":6053
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@HotLicks Can you elaborate on what you mean by &quot;provok[ing] the behavior deep inside some system routine&quot;?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19501966-cu28928339]-[517059061]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@HotLicks Can you elaborate on what you mean by &quot;provok[ing] the behavior deep inside some system routine&quot;?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"HotLicks",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "lick":1,
                      "provok":1,
                      "system":1,
                      "ing":1,
                      "routin":1,
                      "deep":1,
                      "insid":1,
                      "elabor":1,
                      "quot":2,
                      "hot":1,
                      "behavior":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28928345,
        "postId":19501966,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2891664,
          "displayName":"Radiodef",
          "reputation":12211
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@HotLicks In which case you get a NullPointerException. I guess I was thinking the OP must have meant something else."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19501966-cu28928345]-[-1037117751]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@HotLicks In which case you get a NullPointerException. I guess I was thinking the OP must have meant something else."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"HotLicks",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "lick":1,
                      "pointer":1,
                      "meant":1,
                      "think":1,
                      "hot":1,
                      "guess":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28928442,
        "postId":19501966,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@JeffGohlke - That was just CYA. While every input to every API function is supposed to be checked, I'm betting there's some way to get a null through somewhere, resulting in an InternalError, or some sort of bogus behavior. The code's good but it's not perfect."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19501966-cu28928442]-[-302364390]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@JeffGohlke - That was just CYA. While every input to every API function is supposed to be checked, I'm betting there's some way to get a null through somewhere, resulting in an InternalError, or some sort of bogus behavior. The code's good but it's not perfect."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"JeffGohlke",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"InternalError",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "good":1,
                      "bet":1,
                      "result":1,
                      "gohlk":1,
                      "perfect":1,
                      "code":1,
                      "cya":1,
                      "jeff":1,
                      "check":1,
                      "error":1,
                      "bogus":1,
                      "function":1,
                      "api":1,
                      "sort":1,
                      "behavior":1,
                      "suppos":1,
                      "intern":1,
                      "input":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"InternalError",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":28928500,
        "postId":19501966,
        "creationDate":"2013-10-21",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1473751,
          "displayName":"Zong Zheng Li",
          "reputation":3627
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I think the question can even be generalized to &quot;is it possible to produce undefined behaviour in Java?&quot; in which case the answer would be &quot;it's very hard&quot; unless you consider concurrency. At the very least, Java is intentionally very specific in terms of behaviour."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19501966-cu28928500]-[374165021]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I think the question can even be generalized to &quot;is it possible to produce undefined behaviour in Java?&quot; in which case the answer would be &quot;it's very hard&quot; unless you consider concurrency. At the very least, Java is intentionally very specific in terms of behaviour."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "concurr":1,
                      "hard":1,
                      "produc":1,
                      "intent":1,
                      "term":1,
                      "general":1,
                      "undefin":1,
                      "specif":1,
                      "behaviour":2,
                      "answer":1,
                      "quot":4
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "memory",
      "null",
      "nullpointerexception"
    ],
    "creationDate":"2013-10-21",
    "lastActivityDate":"2013-10-23",
    "score":11,
    "viewCount":233,
    "owner":{
      "type":"StackOverflowUser",
      "id":1435657,
      "displayName":"asteri",
      "reputation":6053
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I just learned that dereferencing <code>null</code> in C and C++ can sometimes produce <a href=\"http://www.quora.com/C-programming-language/What-actually-happens-when-dereferencing-a-NULL-pointer\">undefined results</a>. This is very intriguing to me, like all bizarre programming behaviors (I once had someone tell me that they debugged &quot;corrupt RAM - program does not run as written&quot; in a legitimate production environment). Because I'm primarily a Java developer, I was wondering if it's possible for this to happen in that language as well?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19501966]-[550647411]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I just learned that dereferencing <code>null</code> in C and C++ can sometimes produce <a href=\"http://www.quora.com/C-programming-language/What-actually-happens-when-dereferencing-a-NULL-pointer\">undefined results</a>. This is very intriguing to me, like all bizarre programming behaviors (I once had someone tell me that they debugged &quot;corrupt RAM - program does not run as written&quot; in a legitimate production environment). Because I'm primarily a Java developer, I was wondering if it's possible for this to happen in that language as well?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "program":3,
                  "languag":2,
                  "primarili":1,
                  "learn":1,
                  "ram":1,
                  "pointer":1,
                  "intrigu":1,
                  "produc":1,
                  "bizarr":1,
                  "happen":1,
                  "dereferenc":2,
                  "run":1,
                  "result":1,
                  "legitim":1,
                  "debug":1,
                  "code":2,
                  "undefin":1,
                  "written":1,
                  "wonder":1,
                  "quot":2,
                  "behavior":1,
                  "href":1,
                  "develop":1,
                  "environ":1,
                  "http":1,
                  "corrupt":1,
                  "quora":1,
                  "www":1,
                  "product":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>The JLS is not specific on how the <code>null</code> reference is implemented (<a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.7\">3.10.7</a>, <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html\">4.1</a>, <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.8.1\">15.8.1</a>), so I'm not quite sure. But I was thinking that it might be possible by directly manipulating the memory address with the <a href=\"http://www.docjar.com/docs/api/sun/misc/Unsafe.html\">Unsafe API</a>. Unfortunately I don't have enough knowledge of the inner workings of the JVM to know whether this would be possible or not.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19501966]-[-364024574]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>The JLS is not specific on how the <code>null</code> reference is implemented (<a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.7\">3.10.7</a>, <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html\">4.1</a>, <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.8.1\">15.8.1</a>), so I'm not quite sure. But I was thinking that it might be possible by directly manipulating the memory address with the <a href=\"http://www.docjar.com/docs/api/sun/misc/Unsafe.html\">Unsafe API</a>. Unfortunately I don't have enough knowledge of the inner workings of the JVM to know whether this would be possible or not.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "jvm":1,
                  "jls":9,
                  "knowledg":1,
                  "docjar":1,
                  "sun":1,
                  "manipul":1,
                  "oracl":3,
                  "doc":4,
                  "work":1,
                  "direct":1,
                  "code":2,
                  "think":1,
                  "specif":1,
                  "refer":1,
                  "implement":1,
                  "spec":3,
                  "misc":1,
                  "javas":3,
                  "address":1,
                  "api":2,
                  "unsaf":2,
                  "html":7,
                  "href":4,
                  "http":4,
                  "www":1,
                  "memori":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>If it <em>is</em> possible, then it would be possible for a malicious program to do so as well, which would open up an interesting security concern.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19501966]-[1876642202]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>If it <em>is</em> possible, then it would be possible for a malicious program to do so as well, which would open up an interesting security concern.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "program":1,
                  "secur":1,
                  "open":1,
                  "concern":1,
                  "malici":1,
                  "interest":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>So: is it possible for Java to have undefined behavior when dereferencing <code>null</code>, rather than simply throwing a <code>NullPointerException</code>?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19501966]-[-904582745]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>So: is it possible for Java to have undefined behavior when dereferencing <code>null</code>, rather than simply throwing a <code>NullPointerException</code>?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"NullPointerException",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "pointer":1,
                  "dereferenc":1,
                  "code":4,
                  "simpli":1,
                  "undefin":1,
                  "behavior":1,
                  "throw":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NullPointerException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":19502023,
      "questionId":19501966,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":28928605,
          "postId":19502023,
          "creationDate":"2013-10-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1435657,
            "displayName":"asteri",
            "reputation":6053
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Can you elaborate on &quot;usually it doesn't&quot;?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502023-cu28928605]-[526104690]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Can you elaborate on &quot;usually it doesn't&quot;?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "quot":2,
                        "elabor":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28928690,
          "postId":19502023,
          "creationDate":"2013-10-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2711488,
            "displayName":"Holger",
            "reputation":28154
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"A typical implementation represents `null` either using the zero address (and will always check for zero) or as a pointer which generates a trap (and will catch that trap). The latter implies that the pointer does not point to a usable/writable memory location."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502023-cu28928690]-[1152715542]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"A typical implementation represents `null` either using the zero address (and will always check for zero) or as a pointer which generates a trap (and will catch that trap). The latter implies that the pointer does not point to a usable/writable memory location."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "point":1,
                        "writabl":1,
                        "pointer":2,
                        "impli":1,
                        "trap":2,
                        "check":1,
                        "typic":1,
                        "usabl":1,
                        "implement":1,
                        "address":1,
                        "generat":1,
                        "repres":1,
                        "locat":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28928908,
          "postId":19502023,
          "creationDate":"2013-10-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1435657,
            "displayName":"asteri",
            "reputation":6053
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Thanks for the explanation. Do you happen to have a reference that you're pulling that information from? (Not that I don't trust you; I'd just like to read up on all of this kind of stuff for myself at some point. :) )"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502023-cu28928908]-[565603456]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Thanks for the explanation. Do you happen to have a reference that you're pulling that information from? (Not that I don't trust you; I'd just like to read up on all of this kind of stuff for myself at some point. :) )"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "point":1,
                        "happen":1,
                        "trust":1,
                        "explan":1,
                        "inform":1,
                        "stuff":1,
                        "refer":1,
                        "pull":1,
                        "kind":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28929169,
          "postId":19502023,
          "creationDate":"2013-10-21",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2711488,
            "displayName":"Holger",
            "reputation":28154
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You will find a lot of whitepapers about the HotSpot engine as well as for theoretical works about alternative implementations and proposals for improvements. One good starting point is https://wikis.oracle.com/display/HotSpotInternals/Home"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502023-cu28929169]-[-174981675]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You will find a lot of whitepapers about the HotSpot engine as well as for theoretical works about alternative implementations and proposals for improvements. One good starting point is https://wikis.oracle.com/display/HotSpotInternals/Home"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HotSpot",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HotSpotInternals",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "point":1,
                        "good":1,
                        "propos":1,
                        "theoret":1,
                        "oracl":1,
                        "altern":1,
                        "https":1,
                        "work":1,
                        "improv":1,
                        "home":1,
                        "engin":1,
                        "whitepap":1,
                        "implement":1,
                        "lot":1,
                        "spot":2,
                        "hot":2,
                        "wiki":1,
                        "start":1,
                        "intern":1,
                        "display":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"HotSpot",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"HotSpotInternals",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28929886,
          "postId":19502023,
          "creationDate":"2013-10-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":581994,
            "displayName":"Hot Licks",
            "reputation":27968
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yeah, the JVMs I worked on used zero for `null`, and either the value would be explicitly tested, or a low-level storage exception would be generated on reference attempt, and that would get mapped to NullPointerException."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502023-cu28929886]-[1156751720]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yeah, the JVMs I worked on used zero for `null`, and either the value would be explicitly tested, or a low-level storage exception would be generated on reference attempt, and that would get mapped to NullPointerException."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"NullPointerException",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "test":1,
                        "pointer":1,
                        "map":1,
                        "jvms":1,
                        "work":1,
                        "low":1,
                        "yeah":1,
                        "refer":1,
                        "generat":1,
                        "attempt":1,
                        "explicit":1,
                        "storag":1,
                        "level":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"NullPointerException",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28929974,
          "postId":19502023,
          "creationDate":"2013-10-21",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":581994,
            "displayName":"Hot Licks",
            "reputation":27968
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"(Note that the JVM doesn't have to &quot;look up the memory address where the null reference is stored.&quot; Rather, by the time checking needs to be done the reference value is typically in a register and can be directly compared to zero or some other pre-defined value. There is, conceptually, at least, no &quot;object&quot; or other storage behind `null`.)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502023-cu28929974]-[2096226046]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"(Note that the JVM doesn't have to &quot;look up the memory address where the null reference is stored.&quot; Rather, by the time checking needs to be done the reference value is typically in a register and can be directly compared to zero or some other pre-defined value. There is, conceptually, at least, no &quot;object&quot; or other storage behind `null`.)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "pre":1,
                        "jvm":1,
                        "regist":1,
                        "store":1,
                        "object":1,
                        "direct":1,
                        "check":1,
                        "typic":1,
                        "note":1,
                        "compar":1,
                        "refer":2,
                        "address":1,
                        "quot":4,
                        "time":1,
                        "defin":1,
                        "storag":1,
                        "conceptu":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28983045,
          "postId":19502023,
          "creationDate":"2013-10-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":545127,
            "displayName":"Raedwald",
            "reputation":11028
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"If the OP does not believe this answer actually answers his question, the OP has not clearly asked their question."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502023-cu28983045]-[2049711862]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"If the OP does not believe this answer actually answers his question, the OP has not clearly asked their question."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "ask":1,
                        "question":2,
                        "answer":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28928485,
          "postId":19502023,
          "creationDate":"2013-10-21",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1435657,
            "displayName":"asteri",
            "reputation":6053
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I'm not sure that really answers the question, but maybe I'm just being dense. In order to figure out the behavior of the reference, the JVM has to look up the memory address where the `null` reference is stored. If the content of the memory at that location has changed (and is thus no longer recognizable by the JVM as `null`), why would that not produce unspecified behavior?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502023-cu28928485]-[-1455800128]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I'm not sure that really answers the question, but maybe I'm just being dense. In order to figure out the behavior of the reference, the JVM has to look up the memory address where the `null` reference is stored. If the content of the memory at that location has changed (and is thus no longer recognizable by the JVM as `null`), why would that not produce unspecified behavior?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "jvm":2,
                        "question":1,
                        "produc":1,
                        "dens":1,
                        "store":1,
                        "recogniz":1,
                        "order":1,
                        "refer":2,
                        "content":1,
                        "address":1,
                        "figur":1,
                        "answer":1,
                        "longer":1,
                        "unspecifi":1,
                        "behavior":2,
                        "locat":1,
                        "memori":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28928555,
          "postId":19502023,
          "creationDate":"2013-10-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2711488,
            "displayName":"Holger",
            "reputation":28154
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The JLS does not cover the situation that `null` points to changing memory. *If* a JVM implements `null` as a memory pointer to memory that could change (usually it doesn\u2019t) then it\u2019s up to the JVM to ensure that that memory can\u2019t change. As said, otherwise it\u2019s a bug in the JVM."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502023-cu28928555]-[623658439]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The JLS does not cover the situation that `null` points to changing memory. *If* a JVM implements `null` as a memory pointer to memory that could change (usually it doesn\u2019t) then it\u2019s up to the JVM to ensure that that memory can\u2019t change. As said, otherwise it\u2019s a bug in the JVM."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":3,
                        "jvm":3,
                        "jls":1,
                        "point":1,
                        "pointer":1,
                        "situat":1,
                        "cover":1,
                        "bug":1,
                        "ensur":1,
                        "memori":4
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-10-21",
      "lastActivityDate":"2013-10-21",
      "lastEditDate":"2013-10-21",
      "score":10,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2711488,
        "displayName":"Holger",
        "reputation":28154
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The JLS is not specific on how the null reference is <em>implemented</em> but it specifies its <em>behavior</em>. In other words, no there is no unspecified behavior. If you encounter a behavior other than specified in the JLS, it\u2019s a bug.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19502023]-[-164014386]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The JLS is not specific on how the null reference is <em>implemented</em> but it specifies its <em>behavior</em>. In other words, no there is no unspecified behavior. If you encounter a behavior other than specified in the JLS, it\u2019s a bug.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jls":2,
                    "bug":1,
                    "specif":1,
                    "refer":1,
                    "implement":1,
                    "encount":1,
                    "specifi":1,
                    "unspecifi":1,
                    "behavior":3,
                    "word":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Let me clarify this: you can use native code to trash certain structures to let the JVM crash but that has nothing to do with any Java behavior anymore. But on typical JVM implementation, the implementation of the <code>null</code> behavior is the last thing you can disturb. Not, that it matters, <em>what</em> you trash if you override arbitrary memory from native code.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19502023]-[910274963]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Let me clarify this: you can use native code to trash certain structures to let the JVM crash but that has nothing to do with any Java behavior anymore. But on typical JVM implementation, the implementation of the <code>null</code> behavior is the last thing you can disturb. Not, that it matters, <em>what</em> you trash if you override arbitrary memory from native code.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":2,
                    "arbitrari":1,
                    "crash":1,
                    "overrid":1,
                    "thing":1,
                    "structur":1,
                    "code":4,
                    "disturb":1,
                    "anymor":1,
                    "typic":1,
                    "implement":2,
                    "matter":1,
                    "behavior":2,
                    "clarifi":1,
                    "trash":2,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>\u201cUnspecified behavior\u201d means that the specification itself lets there room for differences in the resulting behavior. This is not the case with Java.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19502023]-[-779535278]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>\u201cUnspecified behavior\u201d means that the specification itself lets there room for differences in the resulting behavior. This is not the case with Java.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "differ":1,
                    "result":1,
                    "mean":1,
                    "specif":1,
                    "unspecifi":1,
                    "room":1,
                    "behavior":2,
                    "let":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19502206,
      "questionId":19501966,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":28928824,
          "postId":19502206,
          "creationDate":"2013-10-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1435657,
            "displayName":"asteri",
            "reputation":6053
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Makes sense. I suppose saying I might be able to use `Unsafe` to do it was a bit unfair of me. Thanks for pointing that out."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502206-cu28928824]-[477107384]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Makes sense. I suppose saying I might be able to use `Unsafe` to do it was a bit unfair of me. Thanks for pointing that out."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "sens":1,
                        "point":1,
                        "bit":1,
                        "unfair":1,
                        "make":1,
                        "unsaf":1,
                        "suppos":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28952052,
          "postId":19502206,
          "creationDate":"2013-10-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":139985,
            "displayName":"Stephen C",
            "reputation":291715
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Holger - If an application-supplied or 3rd party-supplied native method breaks something, the JLS does not apply *at all*. (Strictly speaking, it does not apply if any non-built-in native method is called ... because the JLS only applies to pure Java.) If the JLS (i.e. the Java Language *Specification*) no longer applies, the behaviour is unspecified *by definition*. The only case where you could argue that a JVM crash is *wrong behaviour* on the part of the Java implementation is when the native code is part of the JVM itself, or part of the standard Java libraries."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502206-cu28952052]-[355232913]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Holger - If an application-supplied or 3rd party-supplied native method breaks something, the JLS does not apply *at all*. (Strictly speaking, it does not apply if any non-built-in native method is called ... because the JLS only applies to pure Java.) If the JLS (i.e. the Java Language *Specification*) no longer applies, the behaviour is unspecified *by definition*. The only case where you could argue that a JVM crash is *wrong behaviour* on the part of the Java implementation is when the native code is part of the JVM itself, or part of the standard Java libraries."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Holger",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":2,
                        "jls":3,
                        "method":2,
                        "strict":1,
                        "languag":1,
                        "built":1,
                        "break":1,
                        "standard":1,
                        "wrong":1,
                        "crash":1,
                        "librari":1,
                        "pure":1,
                        "argu":1,
                        "code":1,
                        "holger":1,
                        "definit":1,
                        "specif":1,
                        "applic":1,
                        "behaviour":2,
                        "implement":1,
                        "longer":1,
                        "unspecifi":1,
                        "part":3,
                        "appli":4,
                        "parti":1,
                        "call":1,
                        "suppli":2,
                        "speak":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28928996,
          "postId":19502206,
          "creationDate":"2013-10-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":139985,
            "displayName":"Stephen C",
            "reputation":291715
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"If you use `sun.misc.Unsafe` or `native` methods then the behaviour of your code *may not conform to the JLS*. I'm sure you can find where this is formally stated in the specs ... if you search for it."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502206-cu28928996]-[2128571614]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"If you use `sun.misc.Unsafe` or `native` methods then the behaviour of your code *may not conform to the JLS*. I'm sure you can find where this is formally stated in the specs ... if you search for it."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jls":1,
                        "find":1,
                        "method":1,
                        "conform":1,
                        "state":1,
                        "sun":1,
                        "code":1,
                        "behaviour":1,
                        "spec":1,
                        "misc":1,
                        "unsaf":1,
                        "formal":1,
                        "search":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"sun",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"misc",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Unsafe",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28952456,
          "postId":19502206,
          "creationDate":"2013-10-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2711488,
            "displayName":"Holger",
            "reputation":28154
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Stephen C: I can accept that point of view. I just wanted to emphasize the main difference between C/C++ and Java here: the C/C++ language has parts where it is said, \u201cthis is a legal piece of code but its behavior is *unspecified*\u201d, e.g. the order of function argument evaluation. Java doesn\u2019t have such constructs. Every legal code has a specified behavior so even if some native code breaks it you have a reference you can compare with and say \u201cthis behavior differs from the specification so someone (some native code) has broken it\u201d"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502206-cu28952456]-[-518978966]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Stephen C: I can accept that point of view. I just wanted to emphasize the main difference between C/C++ and Java here: the C/C++ language has parts where it is said, \u201cthis is a legal piece of code but its behavior is *unspecified*\u201d, e.g. the order of function argument evaluation. Java doesn\u2019t have such constructs. Every legal code has a specified behavior so even if some native code breaks it you have a reference you can compare with and say \u201cthis behavior differs from the specification so someone (some native code) has broken it\u201d"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Stephen",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "languag":1,
                        "point":1,
                        "accept":1,
                        "break":1,
                        "want":1,
                        "differ":2,
                        "emphas":1,
                        "main":1,
                        "code":4,
                        "legal":2,
                        "compar":1,
                        "order":1,
                        "function":1,
                        "specif":1,
                        "refer":1,
                        "piec":1,
                        "stephen":1,
                        "evalu":1,
                        "unspecifi":1,
                        "part":1,
                        "behavior":3,
                        "argument":1,
                        "construct":1,
                        "view":1,
                        "broken":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28929333,
          "postId":19502206,
          "creationDate":"2013-10-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2711488,
            "displayName":"Holger",
            "reputation":28154
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Java code calling native methods is still inside the specification. But the native code that implements the method that is called is outside\u2026"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502206-cu28929333]-[-254621336]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Java code calling native methods is still inside the specification. But the native code that implements the method that is called is outside\u2026"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":2,
                        "code":2,
                        "insid":1,
                        "specif":1,
                        "call":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28948069,
          "postId":19502206,
          "creationDate":"2013-10-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2711488,
            "displayName":"Holger",
            "reputation":28154
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Stephen C: You\u2019re right, the effect might manifest at a later time but it is still the responsibility of the native method not of the Java method that invoked it. And it\u2019s not \u201cunspecified behavior\u201d if such an effect manifests during the execution of Java code, it\u2019s *wrong behavior* if it does not match the behavior specified in the JLS. But it might originate from unspecified behavior in the sense of the C/C++ specification regarding the native code."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502206-cu28948069]-[-1477985865]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Stephen C: You\u2019re right, the effect might manifest at a later time but it is still the responsibility of the native method not of the Java method that invoked it. And it\u2019s not \u201cunspecified behavior\u201d if such an effect manifests during the execution of Java code, it\u2019s *wrong behavior* if it does not match the behavior specified in the JLS. But it might originate from unspecified behavior in the sense of the C/C++ specification regarding the native code."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Stephen",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "sens":1,
                        "jls":1,
                        "method":2,
                        "wrong":1,
                        "effect":2,
                        "invok":1,
                        "match":1,
                        "code":2,
                        "origin":1,
                        "specif":1,
                        "stephen":1,
                        "time":1,
                        "unspecifi":2,
                        "manifest":2,
                        "behavior":4,
                        "respons":1,
                        "execut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":28935614,
          "postId":19502206,
          "creationDate":"2013-10-21",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":139985,
            "displayName":"Stephen C",
            "reputation":291715
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Holger - The instant that you enter the native method, the behaviour of the *entire JVM* is (in theory) outside of the JLS, and (in theory) remains that way until the JVM exits. When the native code breaks something, the undefined behaviour does not necessarily manifest immediately. So, yes, native methods are OK ... provided that you never call them :-)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19502206-cu28935614]-[-744149495]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Holger - The instant that you enter the native method, the behaviour of the *entire JVM* is (in theory) outside of the JLS, and (in theory) remains that way until the JVM exits. When the native code breaks something, the undefined behaviour does not necessarily manifest immediately. So, yes, native methods are OK ... provided that you never call them :-)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Holger",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":2,
                        "jls":1,
                        "provid":1,
                        "method":2,
                        "break":1,
                        "enter":1,
                        "entir":1,
                        "theori":2,
                        "code":1,
                        "holger":1,
                        "remain":1,
                        "instant":1,
                        "undefin":1,
                        "behaviour":2,
                        "exit":1,
                        "necessarili":1,
                        "manifest":1,
                        "immedi":1,
                        "call":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-10-21",
      "lastActivityDate":"2013-10-21",
      "lastEditDate":"2013-10-21",
      "score":5,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":139985,
        "displayName":"Stephen C",
        "reputation":291715
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You cannot get undefined behaviour from a <code>null</code>in pure Java (unless there is a serious bug in the JVM!). The JLS specifies that any attempt to explicitly or implicitly dereference a <code>null</code> will result in a <code>NullPointerException</code>. There is no wriggle room that allows for any undefined behaviour that is related to the handling of <code>null</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19502206]-[-607151264]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You cannot get undefined behaviour from a <code>null</code>in pure Java (unless there is a serious bug in the JVM!). The JLS specifies that any attempt to explicitly or implicitly dereference a <code>null</code> will result in a <code>NullPointerException</code>. There is no wriggle room that allows for any undefined behaviour that is related to the handling of <code>null</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "jls":1,
                    "pointer":1,
                    "relat":1,
                    "derefer":1,
                    "result":1,
                    "wriggl":1,
                    "pure":1,
                    "code":8,
                    "bug":1,
                    "implicit":1,
                    "undefin":2,
                    "behaviour":2,
                    "specifi":1,
                    "room":1,
                    "attempt":1,
                    "explicit":1,
                    "handl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>However, if your application includes ... or makes use of ... <code>native</code> methods, it is possible for one of those methods to mishandle a <code>null</code> in a way that results in undefined behaviour. You can also get undefined behaviour using the <code>Unsafe</code> class. But both of these scenarios mean you are not using <em>pure</em> Java. (When you step outside of <em>pure</em> Java, the guarantees of the JLS no longer necessarily apply!)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19502206]-[-2081813709]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>However, if your application includes ... or makes use of ... <code>native</code> methods, it is possible for one of those methods to mishandle a <code>null</code> in a way that results in undefined behaviour. You can also get undefined behaviour using the <code>Unsafe</code> class. But both of these scenarios mean you are not using <em>pure</em> Java. (When you step outside of <em>pure</em> Java, the guarantees of the JLS no longer necessarily apply!)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "scenario":1,
                    "jls":1,
                    "method":2,
                    "step":1,
                    "result":1,
                    "pure":2,
                    "includ":1,
                    "code":6,
                    "guarante":1,
                    "undefin":2,
                    "applic":1,
                    "behaviour":2,
                    "make":1,
                    "necessarili":1,
                    "mishandl":1,
                    "longer":1,
                    "unsaf":1,
                    "appli":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>(The one area where unpredictable things can happen is in multi-threading. But even then, the <em>set</em> of possible behaviours is defined. For instance, if you don't synchronize state sharing adequately you may see stale values in fields. But you won't see totally random values ... or bad addresses that result in segmentation violations.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19502206]-[-628610719]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>(The one area where unpredictable things can happen is in multi-threading. But even then, the <em>set</em> of possible behaviours is defined. For instance, if you don't synchronize state sharing adequately you may see stale values in fields. But you won't see totally random values ... or bad addresses that result in segmentation violations.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "adequ":1,
                    "random":1,
                    "area":1,
                    "violat":1,
                    "field":1,
                    "state":1,
                    "happen":1,
                    "unpredict":1,
                    "result":1,
                    "set":1,
                    "bad":1,
                    "thing":1,
                    "total":1,
                    "segment":1,
                    "share":1,
                    "thread":1,
                    "valu":2,
                    "behaviour":1,
                    "address":1,
                    "defin":1,
                    "multi":1,
                    "stale":1,
                    "won":1,
                    "instanc":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<hr />"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19502206]-[1817223689]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<hr />"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>If it is possible, then it would be possible for a malicious program to do so as well, which would open up an interesting security concern.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19502206]-[-861252744]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>If it is possible, then it would be possible for a malicious program to do so as well, which would open up an interesting security concern.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "secur":1,
                    "open":1,
                    "blockquot":2,
                    "concern":1,
                    "malici":1,
                    "interest":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>A malicious program can do almost anything. But the correct way to deal with this is to execute code that you don't trust (i.e. possibly malicious code) in a sandbox. A typical sandbox would forbid calling <code>Unsafe</code> or loading a native library ... and lots of other things that a malicious program could exploit.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19502206]-[-912754317]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>A malicious program can do almost anything. But the correct way to deal with this is to execute code that you don't trust (i.e. possibly malicious code) in a sandbox. A typical sandbox would forbid calling <code>Unsafe</code> or loading a native library ... and lots of other things that a malicious program could exploit.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "exploit":1,
                    "program":2,
                    "trust":1,
                    "correct":1,
                    "thing":1,
                    "load":1,
                    "librari":1,
                    "possibl":1,
                    "forbid":1,
                    "code":4,
                    "malici":3,
                    "typic":1,
                    "sandbox":2,
                    "lot":1,
                    "unsaf":1,
                    "call":1,
                    "deal":1,
                    "execut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19502264,
      "questionId":19501966,
      "comments":[
        
      ],
      "creationDate":"2013-10-21",
      "lastActivityDate":"2013-10-21",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":298029,
        "displayName":"fgb",
        "reputation":6803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The behavior is defined in <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12.4.4\"rel=\"nofollow\">15.12.4.4 Locate Method to Invoke</a>:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19502264]-[-1683195196]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The behavior is defined in <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.12.4.4\"rel=\"nofollow\">15.12.4.4 Locate Method to Invoke</a>:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jls":3,
                    "method":1,
                    "rel":1,
                    "invok":1,
                    "oracl":1,
                    "doc":1,
                    "nofollow":1,
                    "spec":1,
                    "javas":1,
                    "behavior":1,
                    "defin":1,
                    "html":2,
                    "href":1,
                    "http":1,
                    "locat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Otherwise, an instance method is to be invoked and there is a target reference. <strong>If the target reference is null, a NullPointerException is thrown at this point.</strong> Otherwise, the target reference is said to refer to a target object and will be used as the value of the keyword this in the invoked method. The other four possibilities for the invocation mode are then considered.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19502264]-[292440316]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Otherwise, an instance method is to be invoked and there is a target reference. <strong>If the target reference is null, a NullPointerException is thrown at this point.</strong> Otherwise, the target reference is said to refer to a target object and will be used as the value of the keyword this in the invoked method. The other four possibilities for the invocation mode are then considered.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NullPointerException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "point":1,
                    "pointer":1,
                    "invoc":1,
                    "invok":2,
                    "thrown":1,
                    "strong":2,
                    "possibl":1,
                    "keyword":1,
                    "blockquot":2,
                    "object":1,
                    "consid":1,
                    "refer":4,
                    "mode":1,
                    "target":4,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"NullPointerException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Dereferencing null should throw a NullPointerException.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19502264]-[1387621734]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Dereferencing null should throw a NullPointerException.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"NullPointerException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "pointer":1,
                    "dereferenc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"NullPointerException",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19535563,
      "questionId":19501966,
      "comments":[
        
      ],
      "creationDate":"2013-10-23",
      "lastActivityDate":"2013-10-23",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":545127,
        "displayName":"Raedwald",
        "reputation":11028
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The <em>very concept</em> of a language feature having undefined behaviour is something that the writers of the C and C++ standards use to make it clear that the standard does not require any particular behaviour. This gives the various implementers of C and C++ to do whatever is most efficient or convenient for the particular hardware or operating system the implementation is for. This is because C has always privileged performance over portability. But Java has the opposite priorities; its early slogan was &quot;write once, run anywhere&quot;. So the Java language specification does not talk about <em>undefined behaviour</em>, and strives to define the behaviour of all the language features.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19535563]-[-457637901]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The <em>very concept</em> of a language feature having undefined behaviour is something that the writers of the C and C++ standards use to make it clear that the standard does not require any particular behaviour. This gives the various implementers of C and C++ to do whatever is most efficient or convenient for the particular hardware or operating system the implementation is for. This is because C has always privileged performance over portability. But Java has the opposite priorities; its early slogan was &quot;write once, run anywhere&quot;. So the Java language specification does not talk about <em>undefined behaviour</em>, and strives to define the behaviour of all the language features.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":3,
                    "system":1,
                    "portabl":1,
                    "writer":1,
                    "standard":2,
                    "clear":1,
                    "requir":1,
                    "run":1,
                    "privileg":1,
                    "effici":1,
                    "talk":1,
                    "earli":1,
                    "slogan":1,
                    "oper":1,
                    "conveni":1,
                    "opposit":1,
                    "undefin":2,
                    "specif":1,
                    "perform":1,
                    "behaviour":4,
                    "hardwar":1,
                    "implement":2,
                    "make":1,
                    "concept":1,
                    "quot":2,
                    "featur":2,
                    "defin":1,
                    "strive":1,
                    "prioriti":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You seem to think that using a null reference could somehow corrupt memory in some circumstances. I think you are confusing C/C++ pointers with Java references. A pointer is essentially a memory address: by casting it to a <code>void *</code> and dereferencing it you have unrestricted ability to corrupt the content of memory. A Java reference is <em>not</em> like a memory address because the garbage collector must be free to move objects to different locations in memory. The translation of a Java reference to a memory address is thetefore something that only the JVM can do; it can never be something that a Java program itself can do. As this translation is entirely controlled by the JVM, the JVM can ensure that the translation is always valid, and always points to the object it ought to and nowhere else.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19535563]-[816136531]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You seem to think that using a null reference could somehow corrupt memory in some circumstances. I think you are confusing C/C++ pointers with Java references. A pointer is essentially a memory address: by casting it to a <code>void *</code> and dereferencing it you have unrestricted ability to corrupt the content of memory. A Java reference is <em>not</em> like a memory address because the garbage collector must be free to move objects to different locations in memory. The translation of a Java reference to a memory address is thetefore something that only the JVM can do; it can never be something that a Java program itself can do. As this translation is entirely controlled by the JVM, the JVM can ensure that the translation is always valid, and always points to the object it ought to and nowhere else.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":3,
                    "program":1,
                    "collector":1,
                    "move":1,
                    "point":1,
                    "thetefor":1,
                    "circumst":1,
                    "pointer":2,
                    "dereferenc":1,
                    "object":2,
                    "code":2,
                    "cast":1,
                    "translat":3,
                    "refer":4,
                    "valid":1,
                    "content":1,
                    "abil":1,
                    "address":3,
                    "unrestrict":1,
                    "control":1,
                    "confus":1,
                    "essenti":1,
                    "corrupt":2,
                    "garbag":1,
                    "locat":1,
                    "free":1,
                    "ensur":1,
                    "memori":6
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}