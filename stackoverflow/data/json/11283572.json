{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":11283572,
    "title":"AppEngine sun.misc.Unsafe restriction",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":14841013,
        "postId":11283572,
        "creationDate":"2012-07-01",
        "score":3,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":869736,
          "displayName":"Louis Wasserman",
          "reputation":77769
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"If I were you, I'd file a bug with Gson first."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[11283572-cu14841013]-[1398508096]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"If I were you, I'd file a bug with Gson first."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "gson":1,
                      "file":1,
                      "bug":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "google-app-engine",
      "gson"
    ],
    "creationDate":"2012-07-01",
    "lastActivityDate":"2012-07-01",
    "lastEditDate":"2012-07-01",
    "score":1,
    "viewCount":264,
    "owner":{
      "type":"StackOverflowUser",
      "id":36081,
      "displayName":"Erick Fleming",
      "reputation":788
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Appengine seems to restrict the use of &quot;sun.misc.Unsafe&quot;. Unfortunately, the Gson serialization library uses this to provide no-arg constructor instantaneous. Which works beautifully with Scala case classes.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11283572]-[-184654591]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Appengine seems to restrict the use of &quot;sun.misc.Unsafe&quot;. Unfortunately, the Gson serialization library uses this to provide no-arg constructor instantaneous. Which works beautifully with Scala case classes.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"misc",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "serial":1,
                  "provid":1,
                  "sun":1,
                  "constructor":1,
                  "instantan":1,
                  "librari":1,
                  "gson":1,
                  "work":1,
                  "scala":1,
                  "misc":1,
                  "class":1,
                  "quot":2,
                  "beauti":1,
                  "unsaf":1,
                  "appengin":1,
                  "restrict":1,
                  "arg":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is this a valid restriction and if so, would it be reasonable to request a feature to allow it?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11283572]-[359048678]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is this a valid restriction and if so, would it be reasonable to request a feature to allow it?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "request":1,
                  "reason":1,
                  "valid":1,
                  "featur":1,
                  "restrict":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I realize that this type of reflection has some security ramifications, but App Engine does allow reflection on code within my own code base. Maybe the same could be true for &quot;sun.misc.Unsafe&quot;</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11283572]-[606664204]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I realize that this type of reflection has some security ramifications, but App Engine does allow reflection on code within my own code base. Maybe the same could be true for &quot;sun.misc.Unsafe&quot;</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"misc",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "ramif":1,
                  "sun":1,
                  "secur":1,
                  "base":1,
                  "code":2,
                  "engin":1,
                  "misc":1,
                  "true":1,
                  "app":1,
                  "quot":2,
                  "unsaf":1,
                  "type":1,
                  "reflect":2,
                  "realiz":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>Update</strong>: I realize, now, that Unsafe is in fact &quot;too unsafe&quot; to be allowed and the better solution would be find an alternative way to instantiate no-arg constructors, which the Gson team has not been able to achieve.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[11283572]-[-78092210]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>Update</strong>: I realize, now, that Unsafe is in fact &quot;too unsafe&quot; to be allowed and the better solution would be find an alternative way to instantiate no-arg constructors, which the Gson team has not been able to achieve.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "find":1,
                  "instanti":1,
                  "updat":1,
                  "constructor":1,
                  "altern":1,
                  "strong":2,
                  "gson":1,
                  "fact":1,
                  "achiev":1,
                  "allow":1,
                  "team":1,
                  "quot":2,
                  "unsaf":2,
                  "solut":1,
                  "arg":1,
                  "realiz":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":11283845,
      "questionId":11283572,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":14841634,
          "postId":11283845,
          "creationDate":"2012-07-01",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":36081,
            "displayName":"Erick Fleming",
            "reputation":788
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"thanks. it makes sense to have this restricted."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[11283845-cu14841634]-[1506544427]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"thanks. it makes sense to have this restricted."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "restrict":1,
                        "sens":1,
                        "make":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-07-01",
      "lastActivityDate":"2012-07-01",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":250560,
        "displayName":"Konstantin Solomatov",
        "reputation":3618
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>I realize that this type of reflection has some security ramifications, but App Engine does allow reflection on code within my own code base. Maybe the same could be true for &quot;sun.misc.Unsafe&quot; Unsafe as its name suggests, has very unsafe methods which can ruin the whole JVM. For example, you can change arbitrary location in memory, so it's impossible to restrict Unsafe only to your classes. Here are the methods:</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[11283845]-[1127181384]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>I realize that this type of reflection has some security ramifications, but App Engine does allow reflection on code within my own code base. Maybe the same could be true for &quot;sun.misc.Unsafe&quot; Unsafe as its name suggests, has very unsafe methods which can ruin the whole JVM. For example, you can change arbitrary location in memory, so it's impossible to restrict Unsafe only to your classes. Here are the methods:</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "jvm":1,
                    "method":2,
                    "arbitrari":1,
                    "ruin":1,
                    "ramif":1,
                    "suggest":1,
                    "imposs":1,
                    "sun":1,
                    "secur":1,
                    "blockquot":2,
                    "base":1,
                    "code":2,
                    "engin":1,
                    "misc":1,
                    "true":1,
                    "app":1,
                    "class":1,
                    "quot":2,
                    "unsaf":4,
                    "type":1,
                    "reflect":2,
                    "restrict":1,
                    "locat":1,
                    "realiz":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"setMemory(long l, long l1, byte b) long getAddress(long l) void putAddress(long l, long l1) "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[11283845]-[-1165671413]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"setMemory",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"(long l, long l1, byte b) long "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"getAddress",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"(long l) void "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"putAddress",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"(long l, long l1) "
                  }
                ]
              },
              "rawText":"setMemory(long l, long l1, byte b) long getAddress(long l) void putAddress(long l, long l1) ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "set":1,
                    "address":2,
                    "put":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}