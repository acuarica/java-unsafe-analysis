{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":22236928,
    "title":"Which is &quot;better&quot;. AtomicIntegerArray (1/0 as true/false) versus AtomicBoolean[]?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":33796617,
        "postId":22236928,
        "creationDate":"2014-03-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3022173,
          "displayName":"mttdbrd",
          "reputation":1206
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Voo please read the thread I posted above. I'm not talking about conditionals inside the AtomicBoolean or AtomicIntegerArray themselves. If there are tests for conditionals in your own code with big arrays, a single if statement testing values in a loop will be significantly slower if it's not sorted. Again, please read the thread and the code sample in the question."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22236928-cu33796617]-[-367580708]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Voo please read the thread I posted above. I'm not talking about conditionals inside the AtomicBoolean or AtomicIntegerArray themselves. If there are tests for conditionals in your own code with big arrays, a single if statement testing values in a loop will be significantly slower if it's not sorted. Again, please read the thread and the code sample in the question."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Voo",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicBoolean",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "read":2,
                      "question":1,
                      "singl":1,
                      "post":1,
                      "test":2,
                      "loop":1,
                      "big":1,
                      "sampl":1,
                      "condit":2,
                      "voo":1,
                      "talk":1,
                      "statement":1,
                      "code":2,
                      "array":2,
                      "thread":2,
                      "slower":1,
                      "insid":1,
                      "signific":1,
                      "valu":1,
                      "atom":2,
                      "sort":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicBoolean",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":33771560,
        "postId":22236928,
        "creationDate":"2014-03-06",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":144746,
          "displayName":"Voo",
          "reputation":12920
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@mttdbrd I don't see where branch prediction would make a difference in in the given code/scenario. CAS does use branches internally for obvious reasons, but whether the array is sorted or not won't influence the branch result there at all."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22236928-cu33771560]-[1281154959]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@mttdbrd I don't see where branch prediction would make a difference in in the given code/scenario. CAS does use branches internally for obvious reasons, but whether the array is sorted or not won't influence the branch result there at all."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "scenario":1,
                      "differ":1,
                      "obvious":1,
                      "influenc":1,
                      "result":1,
                      "mttdbrd":1,
                      "branch":3,
                      "cas":1,
                      "reason":1,
                      "code":1,
                      "array":1,
                      "make":1,
                      "predict":1,
                      "sort":1,
                      "intern":1,
                      "won":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":33797261,
        "postId":22236928,
        "creationDate":"2014-03-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":144746,
          "displayName":"Voo",
          "reputation":12920
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@mttdbrd I implemented a MIPS CPU with simple static branch prediction back in colleague, I think I get the basic idea :-) But I still don't see how this is applicable to the given problem (and sorting arrays doesn't necessarily help with branch prediction it all depends on the code). Sure *surrounding* code may be susceptible to effects of it, but then we could also tell him to avoid false sharing or that cache oblivious algorithms are a good idea."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22236928-cu33797261]-[-1096636059]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@mttdbrd I implemented a MIPS CPU with simple static branch prediction back in colleague, I think I get the basic idea :-) But I still don't see how this is applicable to the given problem (and sorting arrays doesn't necessarily help with branch prediction it all depends on the code). Sure *surrounding* code may be susceptible to effects of it, but then we could also tell him to avoid false sharing or that cache oblivious algorithms are a good idea."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "suscept":1,
                      "cach":1,
                      "simpl":1,
                      "depend":1,
                      "oblivi":1,
                      "good":1,
                      "problem":1,
                      "effect":1,
                      "idea":2,
                      "mttdbrd":1,
                      "branch":2,
                      "avoid":1,
                      "code":2,
                      "share":1,
                      "array":1,
                      "colleagu":1,
                      "algorithm":1,
                      "mip":1,
                      "back":1,
                      "cpu":1,
                      "applic":1,
                      "implement":1,
                      "fals":1,
                      "necessarili":1,
                      "predict":2,
                      "sort":1,
                      "basic":1,
                      "surround":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":33771791,
        "postId":22236928,
        "creationDate":"2014-03-06",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3022173,
          "displayName":"mttdbrd",
          "reputation":1206
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"&quot;If the arrays are sufficiently large.&quot;"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22236928-cu33771791]-[1470084104]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"&quot;If the arrays are sufficiently large.&quot;"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "larg":1,
                      "suffici":1,
                      "quot":2,
                      "array":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":33797913,
        "postId":22236928,
        "creationDate":"2014-03-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3022173,
          "displayName":"mttdbrd",
          "reputation":1206
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Voo The point was very simple. If OP is going to test this in a production environment, be sure that branch prediction failure is NOT the cause of any slowness. If the arrays are large and there are lots of comparisons, then OP might think any slowness was the result of using the _classes themselves_ and not the code around it. The question here has to do with speed and so I was suggesting that OP make sure he provides the best possible conditions to test speed. And I think you still haven't read that thread or the answer. Sorting arrays DOES help with branch prediction."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22236928-cu33797913]-[83093919]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Voo The point was very simple. If OP is going to test this in a production environment, be sure that branch prediction failure is NOT the cause of any slowness. If the arrays are large and there are lots of comparisons, then OP might think any slowness was the result of using the _classes themselves_ and not the code around it. The question here has to do with speed and so I was suggesting that OP make sure he provides the best possible conditions to test speed. And I think you still haven't read that thread or the answer. Sorting arrays DOES help with branch prediction."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Voo",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_classes",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"themselves_",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "read":1,
                      "question":1,
                      "test":2,
                      "point":1,
                      "slow":2,
                      "simpl":1,
                      "comparison":1,
                      "failur":1,
                      "condit":1,
                      "suggest":1,
                      "result":1,
                      "branch":2,
                      "voo":1,
                      "code":1,
                      "array":2,
                      "thread":1,
                      "larg":1,
                      "lot":1,
                      "make":1,
                      "answer":1,
                      "class":1,
                      "predict":2,
                      "sort":1,
                      "environ":1,
                      "speed":2,
                      "product":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":33798355,
        "postId":22236928,
        "creationDate":"2014-03-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":144746,
          "displayName":"Voo",
          "reputation":12920
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@mttdbrd Both code versions would run under the same circumstance and would profit equally from branch prediction anyhow. Also no sorting an array is no guarantee to help with branch prediction - it all depends on the code (the code in the linked question can easily be optimized to use a cmov or hoist the condition out, I'm very surprised that gcc doesn't do that). Or another example: [This code](http://paste.pound-python.org/show/6zad7awWaSj6I7JNAlZQ/) here does depend on branch prediction, but sorting the array is completely incidental to any performance improvements (and can make it worse)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22236928-cu33798355]-[-1822028029]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@mttdbrd Both code versions would run under the same circumstance and would profit equally from branch prediction anyhow. Also no sorting an array is no guarantee to help with branch prediction - it all depends on the code (the code in the linked question can easily be optimized to use a cmov or hoist the condition out, I'm very surprised that gcc doesn't do that). Or another example: [This code](http://paste.pound-python.org/show/6zad7awWaSj6I7JNAlZQ/) here does depend on branch prediction, but sorting the array is completely incidental to any performance improvements (and can make it worse)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "incident":1,
                      "question":1,
                      "show":1,
                      "circumst":1,
                      "depend":2,
                      "profit":1,
                      "condit":1,
                      "run":1,
                      "mttdbrd":1,
                      "branch":3,
                      "wors":1,
                      "hoist":1,
                      "improv":1,
                      "surpris":1,
                      "gcc":1,
                      "code":4,
                      "easili":1,
                      "array":2,
                      "guarante":1,
                      "version":1,
                      "optim":1,
                      "cmov":1,
                      "equal":1,
                      "link":1,
                      "perform":1,
                      "make":1,
                      "python":1,
                      "complet":1,
                      "predict":3,
                      "sort":2,
                      "zad":1,
                      "org":1,
                      "http":1,
                      "past":1,
                      "pound":1,
                      "jnal":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":33768431,
        "postId":22236928,
        "creationDate":"2014-03-06",
        "score":9,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":395760,
          "displayName":"delnan",
          "reputation":55307
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"For the &quot;faster&quot; bit, opinions are useless and benchmarks are mandatory."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22236928-cu33768431]-[-1544381201]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"For the &quot;faster&quot; bit, opinions are useless and benchmarks are mandatory."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "faster":1,
                      "bit":1,
                      "useless":1,
                      "mandatori":1,
                      "opinion":1,
                      "quot":2,
                      "benchmark":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":33768557,
        "postId":22236928,
        "creationDate":"2014-03-06",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1093528,
          "displayName":"fge",
          "reputation":47331
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"An int and a boolean are not the same to start with, so there is no &quot;better one&quot;; if you want boolean, use booleans..."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22236928-cu33768557]-[637503111]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"An int and a boolean are not the same to start with, so there is no &quot;better one&quot;; if you want boolean, use booleans..."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "boolean":1,
                      "quot":2,
                      "start":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":33768925,
        "postId":22236928,
        "creationDate":"2014-03-06",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3022173,
          "displayName":"mttdbrd",
          "reputation":1206
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"AtomicIntegerArray has an internal int[] array. If you create an array of AtomicBooleans, you will probably be consuming more memory, but internally its &quot;boolean&quot; value is backed by a primitive, an int, so each value consumes the same memory. You really need to test this. I'm guessing that if you're talking about atomic transactions, the get/set speed of AtomicIntegerArray will be slightly slower since the int value is wrapped inside several other calls. AtomicBoolean uses a simple ?: to convert 1/0 to true/false."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22236928-cu33768925]-[1533578682]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"AtomicIntegerArray has an internal int[] array. If you create an array of AtomicBooleans, you will probably be consuming more memory, but internally its &quot;boolean&quot; value is backed by a primitive, an int, so each value consumes the same memory. You really need to test this. I'm guessing that if you're talking about atomic transactions, the get/set speed of AtomicIntegerArray will be slightly slower since the int value is wrapped inside several other calls. AtomicBoolean uses a simple ?: to convert 1/0 to true/false."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicBooleans",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicBoolean",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "consum":2,
                      "test":1,
                      "simpl":1,
                      "set":1,
                      "slight":1,
                      "talk":1,
                      "array":4,
                      "transact":1,
                      "boolean":1,
                      "wrap":1,
                      "slower":1,
                      "insid":1,
                      "back":1,
                      "true":1,
                      "fals":1,
                      "quot":2,
                      "atom":5,
                      "guess":1,
                      "primit":1,
                      "creat":1,
                      "call":1,
                      "intern":2,
                      "convert":1,
                      "speed":1,
                      "memori":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicBooleans",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicBoolean",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":33770167,
        "postId":22236928,
        "creationDate":"2014-03-06",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3022173,
          "displayName":"mttdbrd",
          "reputation":1206
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"It just occurred to me too that in testing you may find that sorting the arrays (if they're sufficiently large) influences the speed of processing. Don't fall victim to a failure of branch prediction and conclude that one method is better/faster than the other. See this thread for information on why sorted arrays can be processed faster: http://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array?rq=1"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22236928-cu33770167]-[-1327376082]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"It just occurred to me too that in testing you may find that sorting the arrays (if they're sufficiently large) influences the speed of processing. Don't fall victim to a failure of branch prediction and conclude that one method is better/faster than the other. See this thread for information on why sorted arrays can be processed faster: http://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array?rq=1"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "find":1,
                      "question":1,
                      "method":1,
                      "test":1,
                      "unsort":1,
                      "faster":3,
                      "failur":1,
                      "process":3,
                      "occur":1,
                      "influenc":1,
                      "branch":1,
                      "fall":1,
                      "array":4,
                      "stackoverflow":1,
                      "thread":1,
                      "larg":1,
                      "suffici":1,
                      "inform":1,
                      "conclud":1,
                      "predict":1,
                      "sort":3,
                      "victim":1,
                      "http":1,
                      "speed":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":33790063,
        "postId":22236928,
        "creationDate":"2014-03-07",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":144746,
          "displayName":"Voo",
          "reputation":12920
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@mttdbrd If there are no branches that would be influenced based on the value, sorting the array won't make a difference. The only conditional in there is the CAS loop which *doesn't* depend on the value, but only on whether there was contention or not."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22236928-cu33790063]-[-1305780971]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@mttdbrd If there are no branches that would be influenced based on the value, sorting the array won't make a difference. The only conditional in there is the CAS loop which *doesn't* depend on the value, but only on whether there was contention or not."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "loop":1,
                      "depend":1,
                      "differ":1,
                      "condit":1,
                      "influenc":1,
                      "mttdbrd":1,
                      "branch":1,
                      "cas":1,
                      "base":1,
                      "array":1,
                      "content":1,
                      "make":1,
                      "sort":1,
                      "won":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":34149849,
        "postId":22236928,
        "creationDate":"2014-03-17",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1866587,
          "displayName":"selig",
          "reputation":2235
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Thought - may there be an issue with cache locality when the arrays are being accessed via threads running on different cores? In AtomicIntegerArray you get more values on a cache line, increasing the likeliness that two threads accessing different but 'close' entries will interfere."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[22236928-cu34149849]-[-173994893]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Thought - may there be an issue with cache locality when the arrays are being accessed via threads running on different cores? In AtomicIntegerArray you get more values on a cache line, increasing the likeliness that two threads accessing different but 'close' entries will interfere."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "cach":2,
                      "thought":1,
                      "line":1,
                      "run":1,
                      "local":1,
                      "issu":1,
                      "array":2,
                      "interfer":1,
                      "thread":2,
                      "entri":1,
                      "valu":1,
                      "increas":1,
                      "likeli":1,
                      "atom":1,
                      "core":1,
                      "close":1,
                      "access":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "multithreading",
      "concurrency",
      "real-time",
      "cas"
    ],
    "creationDate":"2014-03-06",
    "lastActivityDate":"2014-03-08",
    "lastEditDate":"2014-03-06",
    "score":6,
    "viewCount":201,
    "owner":{
      "type":"StackOverflowUser",
      "id":967300,
      "displayName":"JohnPristine",
      "reputation":811
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I am very curious about that. If you use AtomicIntegerArray with values 0 and 1 you can accomplish the same thing of an AtomicBoolean array. Example:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[22236928]-[-1322285290]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I am very curious about that. If you use AtomicIntegerArray with values 0 and 1 you can accomplish the same thing of an AtomicBoolean array. Example:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"AtomicIntegerArray",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"AtomicBoolean",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "thing":1,
                  "array":2,
                  "curious":1,
                  "valu":1,
                  "accomplish":1,
                  "atom":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicIntegerArray",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicBoolean",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"final AtomicIntegerArray array1 = new AtomicIntegerArray(10); array1.compareAndSet(3, 0, 1); // 0 = false and 1 = true // exactly the same thing of: final AtomicBoolean[] array2 = new AtomicBoolean[10]; for(int i = 0; i &lt; array2.length; i++) array2[i] = new AtomicBoolean(false); array2[3].compareAndSet(false, true); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[22236928]-[-1753985053]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"final",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"array1",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"ConstructorCreatorNode",
                              "creatorType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"AtomicIntegerArray",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "expressionArgs":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"IntegerLiteralNode",
                                      "valueRep":"10"
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicIntegerArray",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"MethodInvocationNode",
                  "qualifiedIdentifier":{
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"array1",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"compareAndSet",
                    "comments":[
                      
                    ]
                  },
                  "args":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      {
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"3"
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"0"
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"1"
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    {
                      "text":"// 0 = false and 1 = true // exactly the same thing of: final AtomicBoolean[] array2 = new AtomicBoolean[10]; for(int i = 0; i < array2.length; i++) array2[i] = new AtomicBoolean(false); array2[3].compareAndSet(false, true); \n"
                    }
                  ]
                }
              ]
            },
            "rawText":"final AtomicIntegerArray array1 = new AtomicIntegerArray(10); array1compareAndSet(3, 0, 1); // 0 = false and 1 = true // exactly the same thing of: final AtomicBoolean[] array2 = new AtomicBoolean[10]; for(int i = 0; i < array2.length; i++) array2[i] = new AtomicBoolean(false); array2[3].compareAndSet(false, true); \n",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "set":2,
                  "thing":1,
                  "array":8,
                  "compar":2,
                  "true":2,
                  "fals":3,
                  "length":1,
                  "atom":5
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicIntegerArray",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"array1",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"compareAndSet",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"3"
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0"
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"1"
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      {
                        "text":"// 0 = false and 1 = true // exactly the same thing of: final AtomicBoolean[] array2 = new AtomicBoolean[10]; for(int i = 0; i < array2.length; i++) array2[i] = new AtomicBoolean(false); array2[3].compareAndSet(false, true); \n"
                      }
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"array1",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"AtomicIntegerArray",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"10"
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Which one do you think is faster and better?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[22236928]-[945835369]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Which one do you think is faster and better?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "faster":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":22237241,
      "questionId":22236928,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":33774220,
          "postId":22237241,
          "creationDate":"2014-03-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2187285,
            "displayName":"piacente.cristian",
            "reputation":549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Gray so at the end it seems that my assumption of AtomicBoolean[] performing better under heavy concurrent scenarios is proven by your test. Thanks for your time. Very good job."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33774220]-[208599018]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Gray so at the end it seems that my assumption of AtomicBoolean[] performing better under heavy concurrent scenarios is proven by your test. Thanks for your time. Very good job."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Gray",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicBoolean",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "scenario":1,
                        "test":1,
                        "proven":1,
                        "concurr":1,
                        "good":1,
                        "job":1,
                        "assumpt":1,
                        "gray":1,
                        "perform":1,
                        "heavi":1,
                        "end":1,
                        "atom":1,
                        "time":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicBoolean",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33774256,
          "postId":22237241,
          "creationDate":"2014-03-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":144746,
            "displayName":"Voo",
            "reputation":12920
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Gray It's not about the accuracy (nanosecond accuracy is obviously not really what we aim for), but the millis call is not guaranteed to be monotonic and may be much less precise than the nano call (i.e. nanoseconds may be precise up to the ms, while millis may have a granularity of 20 or more ms!). The first one can be a problem, the later one is unlikely to matter much considering that we're talking about several second runs. Won't matter most of the time, but why take unnecessary risks of contaminating your tests?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33774256]-[-2038696408]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Gray It's not about the accuracy (nanosecond accuracy is obviously not really what we aim for), but the millis call is not guaranteed to be monotonic and may be much less precise than the nano call (i.e. nanoseconds may be precise up to the ms, while millis may have a granularity of 20 or more ms!). The first one can be a problem, the later one is unlikely to matter much considering that we're talking about several second runs. Won't matter most of the time, but why take unnecessary risks of contaminating your tests?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Gray",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "precis":2,
                        "test":1,
                        "problem":1,
                        "contamin":1,
                        "run":1,
                        "milli":2,
                        "granular":1,
                        "talk":1,
                        "risk":1,
                        "nano":1,
                        "accuraci":2,
                        "guarante":1,
                        "gray":1,
                        "nanosecond":2,
                        "monoton":1,
                        "matter":2,
                        "time":1,
                        "aim":1,
                        "call":2,
                        "won":1,
                        "unnecessari":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33774384,
          "postId":22237241,
          "creationDate":"2014-03-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"A better take away @piacente.cristian is that the difference is tiny so you should choose the pattern that is the simplest and easiest to understand and maintain."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33774384]-[1647886030]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"A better take away @piacente.cristian is that the difference is tiny so you should choose the pattern that is the simplest and easiest to understand and maintain."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "pattern":1,
                        "easiest":1,
                        "differ":1,
                        "understand":1,
                        "cristian":1,
                        "tini":1,
                        "simplest":1,
                        "choos":1,
                        "piacent":1,
                        "maintain":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33771652,
          "postId":22237241,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":829571,
            "displayName":"assylias",
            "reputation":118960
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Gray not using jmh yet? You should try it!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33771652]-[-324236595]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Gray not using jmh yet? You should try it!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Gray",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "gray":1,
                        "jmh":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33773760,
          "postId":22237241,
          "creationDate":"2014-03-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Didn't know about jmh @assylias. THanks for the reference. Looks cool although I do this this pretty rarely. :-)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33773760]-[888264800]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Didn't know about jmh @assylias. THanks for the reference. Looks cool although I do this this pretty rarely. :-)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "assylia":1,
                        "jmh":1,
                        "pretti":1,
                        "rare":1,
                        "cool":1,
                        "refer":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33773788,
          "postId":22237241,
          "creationDate":"2014-03-07",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Understood @Voo. In these sort of timings I tend to take the opinion that if anything is going to be learned it is going to be a the millisecond or above level. If the test runs were only nanoseconds off then it wouldn't matter. I'm running these tests on my desktop with itunes, chrome, and other crap in the background so precision is never really in question. :-)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33773788]-[-959137921]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Understood @Voo. In these sort of timings I tend to take the opinion that if anything is going to be learned it is going to be a the millisecond or above level. If the test runs were only nanoseconds off then it wouldn't matter. I'm running these tests on my desktop with itunes, chrome, and other crap in the background so precision is never really in question. :-)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Voo",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "precis":1,
                        "desktop":1,
                        "question":1,
                        "test":2,
                        "learn":1,
                        "background":1,
                        "run":2,
                        "voo":1,
                        "chrome":1,
                        "understood":1,
                        "millisecond":1,
                        "tend":1,
                        "opinion":1,
                        "nanosecond":1,
                        "wouldn":1,
                        "crap":1,
                        "itun":1,
                        "matter":1,
                        "time":1,
                        "sort":1,
                        "level":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33769142,
          "postId":22237241,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2187285,
            "displayName":"piacente.cristian",
            "reputation":549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"nice explanation"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33769142]-[-294851114]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"nice explanation"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "explan":1,
                        "nice":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33769163,
          "postId":22237241,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":967300,
            "displayName":"JohnPristine",
            "reputation":811
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"nice explanation +1"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33769163]-[-701384720]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"nice explanation +1"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "explan":1,
                        "nice":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33769227,
          "postId":22237241,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2187285,
            "displayName":"piacente.cristian",
            "reputation":549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"but I still think that if the array is heavily concurrently accessed the AtomicBoolen[] is the best solution. In normal condition I agree with you and AtomicIntegerArray is what I would use."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33769227]-[-490260433]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"but I still think that if the array is heavily concurrently accessed the AtomicBoolen[] is the best solution. In normal condition I agree with you and AtomicIntegerArray is what I would use."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicBoolen",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "concurr":1,
                        "normal":1,
                        "condit":1,
                        "array":2,
                        "boolen":1,
                        "agre":1,
                        "atom":2,
                        "heavili":1,
                        "solut":1,
                        "access":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicBoolen",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicIntegerArray",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33769749,
          "postId":22237241,
          "creationDate":"2014-03-06",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3022173,
            "displayName":"mttdbrd",
            "reputation":1206
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Gray I like your enthusiasm for writing a program but unfortunately, micro benchmarks are basically useless: https://www.ibm.com/developerworks/java/library/j-jtp02225/ As I say above, this needs to be tested in the full production environment."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33769749]-[-540896639]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Gray I like your enthusiasm for writing a program but unfortunately, micro benchmarks are basically useless: https://www.ibm.com/developerworks/java/library/j-jtp02225/ As I say above, this needs to be tested in the full production environment."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Gray",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "developerwork":1,
                        "program":1,
                        "test":1,
                        "useless":1,
                        "full":1,
                        "librari":1,
                        "https":1,
                        "enthusiasm":1,
                        "jtp":1,
                        "gray":1,
                        "micro":1,
                        "ibm":1,
                        "basic":1,
                        "environ":1,
                        "write":1,
                        "www":1,
                        "product":1,
                        "benchmark":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33769836,
          "postId":22237241,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Oh I know @mttdbrd. I'll add the caveats in my answer."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33769836]-[-1902361376]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Oh I know @mttdbrd. I'll add the caveats in my answer."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "mttdbrd":1,
                        "caveat":1,
                        "answer":1,
                        "add":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33770002,
          "postId":22237241,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3022173,
            "displayName":"mttdbrd",
            "reputation":1206
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You also need to run it 10's of thousands of time in the production environment to allow the HotSpot compiler to figure out if it needs to optimize that specific code. In short, there is no quick and easy answer."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33770002]-[-762660995]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You also need to run it 10's of thousands of time in the production environment to allow the HotSpot compiler to figure out if it needs to optimize that specific code. In short, there is no quick and easy answer."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HotSpot",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "easi":1,
                        "run":1,
                        "code":1,
                        "optim":1,
                        "specif":1,
                        "spot":1,
                        "figur":1,
                        "answer":1,
                        "thousand":1,
                        "hot":1,
                        "quick":1,
                        "compil":1,
                        "time":1,
                        "environ":1,
                        "product":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"HotSpot",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33770171,
          "postId":22237241,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"So in reading your document @mttdbrd I actually think I've done a pretty good job of it. I've warmed up the hotspot with some significant cycles although I could have done a pass first. I'm running on a multiprocessor box, I'm not testing GC, I've added some logic which should not optimize away the updates. But certainly I'm testing a single JVM on a single architecture."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33770171]-[1076604694]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"So in reading your document @mttdbrd I actually think I've done a pretty good job of it. I've warmed up the hotspot with some significant cycles although I could have done a pass first. I'm running on a multiprocessor box, I'm not testing GC, I've added some logic which should not optimize away the updates. But certainly I'm testing a single JVM on a single architecture."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "jvm":1,
                        "singl":2,
                        "test":2,
                        "good":1,
                        "document":1,
                        "warm":1,
                        "run":1,
                        "mttdbrd":1,
                        "updat":1,
                        "job":1,
                        "logic":1,
                        "hotspot":1,
                        "pretti":1,
                        "optim":1,
                        "signific":1,
                        "architectur":1,
                        "pass":1,
                        "ad":1,
                        "box":1,
                        "multiprocessor":1,
                        "cycl":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33770358,
          "postId":22237241,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3022173,
            "displayName":"mttdbrd",
            "reputation":1206
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The big one to me is that looping may result in loop unfolding or even worse simply setting a value at the end. And the JVM knows whether or not the values are used. The article seems to imply that the JVM and/or HotSpot compiler can tell whether or not variables incremented in loops are even used. Since no calculations are done and the arrays are simply being populated, the JIT may just skip over that bit of code and report being finished (without ever having done anything!)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33770358]-[203040253]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The big one to me is that looping may result in loop unfolding or even worse simply setting a value at the end. And the JVM knows whether or not the values are used. The article seems to imply that the JVM and/or HotSpot compiler can tell whether or not variables incremented in loops are even used. Since no calculations are done and the arrays are simply being populated, the JIT may just skip over that bit of code and report being finished (without ever having done anything!)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HotSpot",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jit":1,
                        "jvm":2,
                        "loop":3,
                        "bit":1,
                        "big":1,
                        "impli":1,
                        "result":1,
                        "set":1,
                        "wors":1,
                        "unfold":1,
                        "skip":1,
                        "calcul":1,
                        "articl":1,
                        "finish":1,
                        "code":1,
                        "array":1,
                        "simpli":2,
                        "popul":1,
                        "valu":1,
                        "spot":1,
                        "report":1,
                        "end":1,
                        "hot":1,
                        "compil":1,
                        "variabl":1,
                        "increment":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"HotSpot",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33770451,
          "postId":22237241,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yeah but it's updating a `volatile` array that is in the class @mttdbrd. It better not optimize it away. But always something to worry about. I added the logic because I thought it might optimize away the same operation 1000s of times in a row. :-)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33770451]-[-1702947968]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yeah but it's updating a `volatile` array that is in the class @mttdbrd. It better not optimize it away. But always something to worry about. I added the logic because I thought it might optimize away the same operation 1000s of times in a row. :-)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "thought":1,
                        "mttdbrd":1,
                        "updat":1,
                        "row":1,
                        "logic":1,
                        "oper":1,
                        "array":1,
                        "optim":2,
                        "yeah":1,
                        "ad":1,
                        "time":1,
                        "worri":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33771171,
          "postId":22237241,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":144746,
            "displayName":"Voo",
            "reputation":12920
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Apart from the use of `currentTimeMillis` Gray seems to take care of the basics, assuming he ran it with the usual flags to check for unusual GC activity during the benchmarks this should be accurate (please just use `nanoTime` the next time - it's at least as accurate as millis and monotonic contrary to mills!)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33771171]-[-971918331]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Apart from the use of `currentTimeMillis` Gray seems to take care of the basics, assuming he ran it with the usual flags to check for unusual GC activity during the benchmarks this should be accurate (please just use `nanoTime` the next time - it's at least as accurate as millis and monotonic contrary to mills!)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"currentTimeMillis",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"nanoTime",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "mill":1,
                        "assum":1,
                        "ran":1,
                        "milli":2,
                        "care":1,
                        "nano":1,
                        "accur":2,
                        "activ":1,
                        "check":1,
                        "contrari":1,
                        "usual":1,
                        "gray":1,
                        "flag":1,
                        "monoton":1,
                        "time":3,
                        "unusu":1,
                        "basic":1,
                        "current":1,
                        "benchmark":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33771355,
          "postId":22237241,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":144746,
            "displayName":"Voo",
            "reputation":12920
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"b2t: Assuming the usual architectures (not all ISAs allow atomic instructions on anything smaller word size and ll/sc works rather differently to CAS!) how much faster the boolean version is depends mostly on the contention. If you use an Int and 2 threads try to update at the same time only one (at best!) can succeed, while single booleans can be updated separately without interference. On the other hand we blow up the memory size by a factor of 8.#"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22237241-cu33771355]-[-1661816940]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"b2t: Assuming the usual architectures (not all ISAs allow atomic instructions on anything smaller word size and ll/sc works rather differently to CAS!) how much faster the boolean version is depends mostly on the contention. If you use an Int and 2 threads try to update at the same time only one (at best!) can succeed, while single booleans can be updated separately without interference. On the other hand we blow up the memory size by a factor of 8.#"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "succeed":1,
                        "singl":1,
                        "assum":1,
                        "faster":1,
                        "size":2,
                        "depend":1,
                        "differ":1,
                        "hand":1,
                        "blow":1,
                        "updat":2,
                        "separ":1,
                        "cas":1,
                        "work":1,
                        "factor":1,
                        "isa":1,
                        "interfer":1,
                        "version":1,
                        "thread":1,
                        "boolean":1,
                        "usual":1,
                        "architectur":1,
                        "content":1,
                        "smaller":1,
                        "atom":1,
                        "time":1,
                        "word":1,
                        "instruct":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-03-06",
      "lastActivityDate":"2014-03-07",
      "lastEditDate":"2014-03-07",
      "score":6,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":179850,
        "displayName":"Gray",
        "reputation":63324
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Which one do you think is faster and better?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[-380095476]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Which one do you think is faster and better?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "blockquot":2,
                    "faster":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Interesting question. The speed of this would probably only be visible if you are doing some very large number of cycles. Otherwise worrying about it smacks as premature optimization.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[-908081219]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Interesting question. The speed of this would probably only be visible if you are doing some very large number of cycles. Otherwise worrying about it smacks as premature optimization.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "question":1,
                    "smack":1,
                    "visibl":1,
                    "optim":1,
                    "larg":1,
                    "interest":1,
                    "prematur":1,
                    "worri":1,
                    "cycl":1,
                    "speed":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Under the covers, both methods use the <code>Unsafe.compareAndSwapInt(...)</code> so the performance may be very similar. Since there is no blocking with accessing of <code>volatile</code> storage, this is <em>not</em> about collisions. The <code>AtomicBoolean</code> array will certain have a larger number of objects associated with it -- each with their own volatile storage. Also, under the covers the <code>AtomicBoolean</code> stores the <code>boolean</code> value as an <code>int</code> so no savings there.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[-1563203122]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Under the covers, both methods use the <code>Unsafe.compareAndSwapInt(...)</code> so the performance may be very similar. Since there is no blocking with accessing of <code>volatile</code> storage, this is <em>not</em> about collisions. The <code>AtomicBoolean</code> array will certain have a larger number of objects associated with it -- each with their own volatile storage. Also, under the covers the <code>AtomicBoolean</code> stores the <code>boolean</code> value as an <code>int</code> so no savings there.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"compareAndSwapInt",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicBoolean",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicBoolean",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "method":1,
                    "similar":1,
                    "store":1,
                    "collis":1,
                    "object":1,
                    "code":12,
                    "array":1,
                    "larger":1,
                    "block":1,
                    "cover":2,
                    "compar":1,
                    "perform":1,
                    "swap":1,
                    "atom":2,
                    "unsaf":1,
                    "storag":2,
                    "save":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicBoolean",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>My instinct tells me to use the <code>AtomicIntegerArray</code>. Less code for you to write which typically means more reliance on the JDK to do the right thing. To figure it out you would have to test some large number of iterations on your production architecture to know for sure. I suspect the difference is going to be negligible and hard to measure.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[-1306171908]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>My instinct tells me to use the <code>AtomicIntegerArray</code>. Less code for you to write which typically means more reliance on the JDK to do the right thing. To figure it out you would have to test some large number of iterations on your production architecture to know for sure. I suspect the difference is going to be negligible and hard to measure.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "number":1,
                    "test":1,
                    "relianc":1,
                    "hard":1,
                    "differ":1,
                    "mean":1,
                    "thing":1,
                    "measur":1,
                    "code":3,
                    "array":1,
                    "larg":1,
                    "typic":1,
                    "neglig":1,
                    "iter":1,
                    "architectur":1,
                    "suspect":1,
                    "figur":1,
                    "atom":1,
                    "instinct":1,
                    "tell":1,
                    "jdk":1,
                    "write":1,
                    "product":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Not a great answer but hopefully something helpful here.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[1130928235]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Not a great answer but hopefully something helpful here.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "great":1,
                    "help":1,
                    "answer":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Edit:</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[2580858]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Edit:</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strong":2,
                    "edit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So I just ran some tests and I can't see any significant differences. Here's my <a href=\"http://pastebin.com/V9kV5YKm\"rel=\"nofollow\">little test program</a>. It used 100 threads and ran 10 million iterations and they were within 0-10% of each other. As @mttdbrd points out, this is in no way a &quot;real life&quot; test. Only benching this in production with the code actually functioning like it should before you truly know if there is a difference.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[972321615]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So I just ran some tests and I can't see any significant differences. Here's my <a href=\"http://pastebin.com/V9kV5YKm\"rel=\"nofollow\">little test program</a>. It used 100 threads and ran 10 million iterations and they were within 0-10% of each other. As @mttdbrd points out, this is in no way a &quot;real life&quot; test. Only benching this in production with the code actually functioning like it should before you truly know if there is a difference.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "test":3,
                    "point":1,
                    "real":1,
                    "differ":2,
                    "ran":2,
                    "mttdbrd":1,
                    "rel":1,
                    "code":1,
                    "thread":1,
                    "nofollow":1,
                    "function":1,
                    "signific":1,
                    "iter":1,
                    "life":1,
                    "quot":2,
                    "million":1,
                    "pastebin":1,
                    "href":1,
                    "http":1,
                    "ykm":1,
                    "product":1,
                    "bench":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Edit:</strong></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[2580858]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Edit:</strong></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "strong":2,
                    "edit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Ok after tweaking my program to make sure I warmed up the hotspot compiler per @mttdbrd's document, and changing the program to be able to better tune the number of entries, I see some interesting results.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[-18131730]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Ok after tweaking my program to make sure I warmed up the hotspot compiler per @mttdbrd's document, and changing the program to be able to better tune the number of entries, I see some interesting results.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tune":1,
                    "number":1,
                    "chang":1,
                    "program":2,
                    "document":1,
                    "warm":1,
                    "result":1,
                    "mttdbrd":1,
                    "hotspot":1,
                    "entri":1,
                    "tweak":1,
                    "interest":1,
                    "make":1,
                    "compil":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>With 1000 elements in the arrays:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[815137103]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>With 1000 elements in the arrays:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "element":1,
                    "array":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"AtomicIntegerArray in 4224 millis AtomicBoolean[] in 3546 millis (always a little bit faster) "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[22237241]-[1721904024]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicIntegerArray",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"in 4224 millis "
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicBoolean",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"[] in 3546 millis (always a little bit faster) "
                  }
                ]
              },
              "rawText":"AtomicIntegerArray in 4224 millis AtomicBoolean[] in 3546 millis (always a little bit faster) ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "faster":1,
                    "bit":1,
                    "milli":2,
                    "array":1,
                    "atom":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicBoolean",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>However with 10 elements in the array:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[1842126054]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>However with 10 elements in the array:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "element":1,
                    "array":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"AtomicIntegerArray in 26506 millis AtomicBoolean[] in 13263 millis (much faster) "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[22237241]-[-1640568280]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicIntegerArray",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"in 26506 millis "
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicBoolean",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"[] in 13263 millis (much faster) "
                  }
                ]
              },
              "rawText":"AtomicIntegerArray in 26506 millis AtomicBoolean[] in 13263 millis (much faster) ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "milli":2,
                    "atom":2,
                    "faster":1,
                    "array":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicBoolean",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Notice also the speed difference in general. It makes sense since there is more thread contention. 100 threads are much more likely to have to spin with 10 elements instead of 1000.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[840945958]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Notice also the speed difference in general. It makes sense since there is more thread contention. 100 threads are much more likely to have to spin with 10 elements instead of 1000.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sens":1,
                    "differ":1,
                    "spin":1,
                    "element":1,
                    "thread":2,
                    "general":1,
                    "content":1,
                    "make":1,
                    "notic":1,
                    "speed":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>What does this mean? That if you change from one to the other you might save yourself at most 1 <em>nanosecond</em> per operation. Might. So instead of worrying about the performance of the two, you should pick the pattern that is the cleanest and most easily maintained.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22237241]-[-1149339066]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>What does this mean? That if you change from one to the other you might save yourself at most 1 <em>nanosecond</em> per operation. Might. So instead of worrying about the performance of the two, you should pick the pattern that is the cleanest and most easily maintained.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chang":1,
                    "pattern":1,
                    "cleanest":1,
                    "easili":1,
                    "oper":1,
                    "nanosecond":1,
                    "pick":1,
                    "perform":1,
                    "worri":1,
                    "save":1,
                    "maintain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":22236998,
      "questionId":22236928,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":33768959,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2187285,
            "displayName":"piacente.cristian",
            "reputation":549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I mean if you expect a lot of thread working on the same array concurrently, and so the bottle neck of you algorithm is the atomic access of the object then the AtomicBoolean[] is a better solution."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33768959]-[-2075915336]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I mean if you expect a lot of thread working on the same array concurrently, and so the bottle neck of you algorithm is the atomic access of the object then the AtomicBoolean[] is a better solution."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicBoolean",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "neck":1,
                        "concurr":1,
                        "work":1,
                        "object":1,
                        "array":1,
                        "thread":1,
                        "algorithm":1,
                        "expect":1,
                        "lot":1,
                        "atom":2,
                        "solut":1,
                        "bottl":1,
                        "access":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicBoolean",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33768992,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3022173,
            "displayName":"mttdbrd",
            "reputation":1206
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Both AtomicBoolean and AtomicIntegerArray store their values in primitives. The get/set method for the AtomicIntegerArray class have much higher overhead."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33768992]-[1016923158]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Both AtomicBoolean and AtomicIntegerArray store their values in primitives. The get/set method for the AtomicIntegerArray class have much higher overhead."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicBoolean",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"have",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "higher":1,
                        "set":1,
                        "store":1,
                        "overhead":1,
                        "array":2,
                        "valu":1,
                        "atom":3,
                        "primit":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicBoolean",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicIntegerArray",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33768502,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Can you add more details? Why?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33768502]-[244581759]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Can you add more details? Why?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "detail":1,
                        "add":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33768551,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":571407,
            "displayName":"JB Nizet",
            "reputation":287730
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"An AtomicIntegerArray also has a fixed length. In fact, I wonder what an AtomicIntegerArray can do that an array of AtomicInteger can't. (except disallowing the replacement of any element in the array)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33768551]-[-95464904]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"An AtomicIntegerArray also has a fixed length. In fact, I wonder what an AtomicIntegerArray can do that an array of AtomicInteger can't. (except disallowing the replacement of any element in the array)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicInteger",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "fix":1,
                        "element":1,
                        "fact":1,
                        "array":4,
                        "replac":1,
                        "length":1,
                        "atom":3,
                        "disallow":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicIntegerArray",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicInteger",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33768573,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":967300,
            "displayName":"JohnPristine",
            "reputation":811
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Are you saying that you can change the size of AtomicIntegerArray??? Like @Gray I did not understand your reasoning..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33768573]-[-1683839644]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Are you saying that you can change the size of AtomicIntegerArray??? Like @Gray I did not understand your reasoning..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Gray",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "size":1,
                        "understand":1,
                        "reason":1,
                        "array":1,
                        "gray":1,
                        "atom":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicIntegerArray",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33768575,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":395760,
            "displayName":"delnan",
            "reputation":55307
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@JBNizet I asked myself the same thing, but at the very least it would be faster and more memory efficient (no need for n wrapper objects)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33768575]-[573641292]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@JBNizet I asked myself the same thing, but at the very least it would be faster and more memory efficient (no need for n wrapper objects)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"JBNizet",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "faster":1,
                        "jbnizet":1,
                        "effici":1,
                        "thing":1,
                        "object":1,
                        "wrapper":1,
                        "ask":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33769077,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2187285,
            "displayName":"piacente.cristian",
            "reputation":549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@mttdbrd but AtomicBoolean has its own lock for its atomic access and is an Object that means that I suppose that it will have more memory consumption then the same AtomicIntegerArray."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33769077]-[-515542802]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@mttdbrd but AtomicBoolean has its own lock for its atomic access and is an Object that means that I suppose that it will have more memory consumption then the same AtomicIntegerArray."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicBoolean",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "mttdbrd":1,
                        "mean":1,
                        "lock":1,
                        "object":1,
                        "array":1,
                        "atom":3,
                        "suppos":1,
                        "consumpt":1,
                        "access":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicBoolean",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicIntegerArray",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33768671,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2187285,
            "displayName":"piacente.cristian",
            "reputation":549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Updated the answer."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33768671]-[930031484]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Updated the answer."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "updat":1,
                        "answer":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33768702,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":967300,
            "displayName":"JohnPristine",
            "reputation":811
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@piacente.cristian So in terms of being faster, which one would you use? AtomicIntegerArray or AtomicBoolean[] ?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33768702]-[-1139214745]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@piacente.cristian So in terms of being faster, which one would you use? AtomicIntegerArray or AtomicBoolean[] ?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicBoolean",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "faster":1,
                        "term":1,
                        "cristian":1,
                        "array":1,
                        "atom":2,
                        "piacent":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicIntegerArray",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicBoolean",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33769386,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":3,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2891664,
            "displayName":"Radiodef",
            "reputation":12211
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@piacente.cristian In your comments you mention locks a couple times and I wonder if you are misunderstanding the mechanism used here. (There are no locks.)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33769386]-[1877526991]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@piacente.cristian In your comments you mention locks a couple times and I wonder if you are misunderstanding the mechanism used here. (There are no locks.)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "misunderstand":1,
                        "cristian":1,
                        "lock":2,
                        "mention":1,
                        "coupl":1,
                        "comment":1,
                        "mechan":1,
                        "time":1,
                        "piacent":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33768798,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2187285,
            "displayName":"piacente.cristian",
            "reputation":549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"if you need to use them concurrently I would use AtomicBoolean[], while if I expect them to be used only sometime concurrently by your threads I would choose AtomicIntegerArray since it seems that it only uses one lock."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33768798]-[-1155113909]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"if you need to use them concurrently I would use AtomicBoolean[], while if I expect them to be used only sometime concurrently by your threads I would choose AtomicIntegerArray since it seems that it only uses one lock."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicBoolean",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "concurr":2,
                        "lock":1,
                        "array":1,
                        "thread":1,
                        "expect":1,
                        "choos":1,
                        "atom":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicBoolean",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicIntegerArray",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33768901,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":967300,
            "displayName":"JohnPristine",
            "reputation":811
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@piacente.cristian Can you elaborate on what you mean by &quot;concurrently&quot; versus &quot;sometimes concurrently&quot;? They are going to be used concurrently of course... but not sure what measure you are talking about here. Thanks for the help!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33768901]-[-1756024190]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@piacente.cristian Can you elaborate on what you mean by &quot;concurrently&quot; versus &quot;sometimes concurrently&quot;? They are going to be used concurrently of course... but not sure what measure you are talking about here. Thanks for the help!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "concurr":3,
                        "versus":1,
                        "cristian":1,
                        "talk":1,
                        "measur":1,
                        "elabor":1,
                        "quot":4,
                        "piacent":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33769524,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3022173,
            "displayName":"mttdbrd",
            "reputation":1206
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Radiodef That's a good catch. The specification for the package clearly states that these variables support &quot;lock-free thread-safe programming on single variables.&quot;"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33769524]-[-1942211757]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Radiodef That's a good catch. The specification for the package clearly states that these variables support &quot;lock-free thread-safe programming on single variables.&quot;"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Radiodef",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "support":1,
                        "singl":1,
                        "state":1,
                        "good":1,
                        "lock":1,
                        "safe":1,
                        "radiodef":1,
                        "thread":1,
                        "specif":1,
                        "quot":2,
                        "variabl":2,
                        "free":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33769562,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":967300,
            "displayName":"JohnPristine",
            "reputation":811
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@mttdbrd But does it change anything in terms of who is faster for CAS (compareAndSet)? I don't think so, but I can be wrong..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33769562]-[1898206889]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@mttdbrd But does it change anything in terms of who is faster for CAS (compareAndSet)? I don't think so, but I can be wrong..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"compareAndSet",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "faster":1,
                        "wrong":1,
                        "set":1,
                        "mttdbrd":1,
                        "term":1,
                        "cas":1,
                        "compar":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33769660,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yeah this has nothing to do with contention because of the lack of locks. I've edited my answer to show that at 10 _million_ iterations I see little difference between them."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33769660]-[396680947]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yeah this has nothing to do with contention because of the lack of locks. I've edited my answer to show that at 10 _million_ iterations I see little difference between them."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"_million_",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "show":1,
                        "differ":1,
                        "lock":1,
                        "edit":1,
                        "yeah":1,
                        "lack":1,
                        "iter":1,
                        "content":1,
                        "answer":1,
                        "million":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33769670,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2187285,
            "displayName":"piacente.cristian",
            "reputation":549
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Trying to understand that too ... http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/ . However @Radiodef meaning lock I meant any kind of locking/atomic mechanism.. I was not caring about how it is actually implemented here"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33769670]-[-92832369]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Trying to understand that too ... http://mishadoff.github.io/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/ . However @Radiodef meaning lock I meant any kind of locking/atomic mechanism.. I was not caring about how it is actually implemented here"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Radiodef",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "dot":2,
                        "github":1,
                        "understand":1,
                        "sun":1,
                        "mean":1,
                        "lock":2,
                        "care":1,
                        "meant":1,
                        "radiodef":1,
                        "blog":1,
                        "mechan":1,
                        "implement":1,
                        "misc":1,
                        "atom":1,
                        "magic":1,
                        "unsaf":1,
                        "part":1,
                        "kind":1,
                        "http":1,
                        "mishadoff":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33769691,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3022173,
            "displayName":"mttdbrd",
            "reputation":1206
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@JohnPristine It's hard to say. The method that compareAndSet calls is itself a native method (JNI), so we'd have to look at the underlying VM code and the HotSpot code. The only way to really know is to test it in a production environment. I like Gray's answer to the question the best."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33769691]-[1590741276]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@JohnPristine It's hard to say. The method that compareAndSet calls is itself a native method (JNI), so we'd have to look at the underlying VM code and the HotSpot code. The only way to really know is to test it in a production environment. I like Gray's answer to the question the best."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"JohnPristine",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"compareAndSet",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HotSpot",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "method":2,
                        "test":1,
                        "pristin":1,
                        "hard":1,
                        "set":1,
                        "john":1,
                        "code":2,
                        "jni":1,
                        "gray":1,
                        "compar":1,
                        "spot":1,
                        "answer":1,
                        "under":1,
                        "hot":1,
                        "environ":1,
                        "call":1,
                        "product":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"HotSpot",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":33770297,
          "postId":22236998,
          "creationDate":"2014-03-06",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2891664,
            "displayName":"Radiodef",
            "reputation":12211
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@piacente.cristian Then your comments are still kind of confusing. There is a very big difference between locks and volatile. Also AtomicIntegerArray is using `putIntVolatile` so it's not like writing to one element prevents a read to a different element."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[22236998-cu33770297]-[1484342694]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@piacente.cristian Then your comments are still kind of confusing. There is a very big difference between locks and volatile. Also AtomicIntegerArray is using `putIntVolatile` so it's not like writing to one element prevents a read to a different element."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"AtomicIntegerArray",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"putIntVolatile",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "big":1,
                        "prevent":1,
                        "differ":1,
                        "cristian":1,
                        "lock":1,
                        "element":2,
                        "array":1,
                        "comment":1,
                        "put":1,
                        "atom":1,
                        "confus":1,
                        "kind":1,
                        "piacent":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"AtomicIntegerArray",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-03-06",
      "lastActivityDate":"2014-03-06",
      "lastEditDate":"2014-03-06",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2187285,
        "displayName":"piacente.cristian",
        "reputation":549
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Actually watching the implementation of AtomicIntegerArray</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22236998]-[689464483]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Actually watching the implementation of AtomicIntegerArray</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicIntegerArray",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "atom":1,
                    "watch":1,
                    "implement":1,
                    "array":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://fuseyism.com/classpath/doc/java/util/concurrent/atomic/AtomicIntegerArray-source.html\"rel=\"nofollow\">http://fuseyism.com/classpath/doc/java/util/concurrent/atomic/AtomicIntegerArray-source.html</a></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22236998]-[1114068242]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://fuseyism.com/classpath/doc/java/util/concurrent/atomic/AtomicIntegerArray-source.html\"rel=\"nofollow\">http://fuseyism.com/classpath/doc/java/util/concurrent/atomic/AtomicIntegerArray-source.html</a></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicIntegerArray",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "concurr":2,
                    "util":2,
                    "rel":1,
                    "fusey":2,
                    "doc":2,
                    "classpath":2,
                    "array":2,
                    "nofollow":1,
                    "atom":4,
                    "html":2,
                    "href":1,
                    "http":2,
                    "sourc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>it seem that it is managed with more attention then I thought.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22236998]-[-792128003]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>it seem that it is managed with more attention then I thought.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "attent":1,
                    "manag":1,
                    "thought":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>It doesn't use Objects to store the values, making it more efficient in memory. In fact it uses a simple int[] and then access them in a safe way.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22236998]-[688641748]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>It doesn't use Objects to store the values, making it more efficient in memory. In fact it uses a simple int[] and then access them in a safe way.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "simpl":1,
                    "effici":1,
                    "store":1,
                    "safe":1,
                    "object":1,
                    "fact":1,
                    "valu":1,
                    "make":1,
                    "access":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So I think that if you need to use many AtomicInteger it is better to use the AtomicIntegerArray.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22236998]-[-864746949]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So I think that if you need to use many AtomicInteger it is better to use the AtomicIntegerArray.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicInteger",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicIntegerArray",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "atom":2,
                    "array":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicInteger",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>AtomicIntegerArray: uses the Unsafe class to make atomic access to a single int[] in the AtomicIntegerArray</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22236998]-[1628740037]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>AtomicIntegerArray: uses the Unsafe class to make atomic access to a single int[] in the AtomicIntegerArray</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicIntegerArray",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"to",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicIntegerArray",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "singl":1,
                    "array":2,
                    "make":1,
                    "atom":3,
                    "unsaf":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>AtomicBoolean[]: every single object of the array has it's object(itself) for making atomic access</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22236998]-[-1295588122]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>AtomicBoolean[]: every single object of the array has it's object(itself) for making atomic access</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicBoolean",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "singl":1,
                    "object":2,
                    "array":1,
                    "make":1,
                    "atom":2,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicBoolean",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So I would expect a better performance in a heavy concurrent threaded environment with an AtomicBoolean[], with more memory consumption than the AtomicIntegerArray.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[22236998]-[-1534077460]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So I would expect a better performance in a heavy concurrent threaded environment with an AtomicBoolean[], with more memory consumption than the AtomicIntegerArray.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicBoolean",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AtomicIntegerArray",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "concurr":1,
                    "array":1,
                    "thread":1,
                    "expect":1,
                    "perform":1,
                    "heavi":1,
                    "atom":2,
                    "environ":1,
                    "consumpt":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicBoolean",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AtomicIntegerArray",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}