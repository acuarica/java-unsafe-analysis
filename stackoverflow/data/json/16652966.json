{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":16652966,
    "title":"What properties are guaranteed by constructors in Java?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":23954265,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2213023,
          "displayName":"Dog",
          "reputation":2672
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@jtahlborn, I can make the factory be in the same package and set the fields to package-private, or make the factory be nested within the class. Any other use case will need all fields to be **public anyways**."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23954265]-[-119664917]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@jtahlborn, I can make the factory be in the same package and set the fields to package-private, or make the factory be nested within the class. Any other use case will need all fields to be **public anyways**."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jtahlborn":1,
                      "nest":1,
                      "field":2,
                      "set":1,
                      "factori":2,
                      "make":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23954277,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":581994,
          "displayName":"Hot Licks",
          "reputation":27968
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What you're observing is that a constructor can be constructed incorrectly."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23954277]-[-951353893]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What you're observing is that a constructor can be constructed incorrectly."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "construct":1,
                      "observ":1,
                      "constructor":1,
                      "incorrect":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23954319,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2385178,
          "displayName":"Raza",
          "reputation":366
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@HotLicks correctly constructed comment. :)"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23954319]-[-1244975794]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@HotLicks correctly constructed comment. :)"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"HotLicks",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "lick":1,
                      "correct":1,
                      "comment":1,
                      "hot":1,
                      "construct":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23954339,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":552759,
          "displayName":"jtahlborn",
          "reputation":34955
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Dog - you aren't avoiding using a constructor. _all_ java objects have a constructor. if you don't add one, an implicit, no-args version is created for you (which is what you would be using in the case you described)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23954339]-[-67055940]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Dog - you aren't avoiding using a constructor. _all_ java objects have a constructor. if you don't add one, an implicit, no-args version is created for you (which is what you would be using in the case you described)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Dog",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_all_",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "aren":1,
                      "constructor":2,
                      "dog":1,
                      "avoid":1,
                      "object":1,
                      "version":1,
                      "implicit":1,
                      "creat":1,
                      "add":1,
                      "arg":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23954471,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2385178,
          "displayName":"Raza",
          "reputation":366
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@jtahlborn sorry mate, this is grey area, you can sort of avoid constructor. reflection and cloning are a few examples"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23954471]-[1507070669]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@jtahlborn sorry mate, this is grey area, you can sort of avoid constructor. reflection and cloning are a few examples"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "area":1,
                      "jtahlborn":1,
                      "exampl":1,
                      "grey":1,
                      "constructor":1,
                      "avoid":1,
                      "clone":1,
                      "sort":1,
                      "mate":1,
                      "reflect":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23954527,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2213023,
          "displayName":"Dog",
          "reputation":2672
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@jtahlborn: So you're saying that the point in the constructor is that you need to use it to get an instance of an object? That is a valid answer, although I already stated 2 more properties that it provides aside from that. Like I said, if Java only had default constructors, I think it would have been pretty much equivalent to how Java actually is, except without the syntactic sugar."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23954527]-[1603096180]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@jtahlborn: So you're saying that the point in the constructor is that you need to use it to get an instance of an object? That is a valid answer, although I already stated 2 more properties that it provides aside from that. Like I said, if Java only had default constructors, I think it would have been pretty much equivalent to how Java actually is, except without the syntactic sugar."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "properti":1,
                      "point":1,
                      "jtahlborn":1,
                      "sugar":1,
                      "equival":1,
                      "state":1,
                      "constructor":2,
                      "object":1,
                      "pretti":1,
                      "valid":1,
                      "answer":1,
                      "syntact":1,
                      "instanc":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23954632,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":552759,
          "displayName":"jtahlborn",
          "reputation":34955
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Raza - reflection doesn't avoid constructors. cloning and serialization avoid constructors, but that doesn't make it a &quot;greay area&quot;. you can only clone and serialize an existing instance, so, you _still_ need a constructor (for the existing instance)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23954632]-[674958199]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Raza - reflection doesn't avoid constructors. cloning and serialization avoid constructors, but that doesn't make it a &quot;greay area&quot;. you can only clone and serialize an existing instance, so, you _still_ need a constructor (for the existing instance)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Raza",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_still_",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "serial":2,
                      "area":1,
                      "exist":2,
                      "constructor":3,
                      "avoid":2,
                      "raza":1,
                      "greay":1,
                      "clone":2,
                      "make":1,
                      "quot":2,
                      "reflect":1,
                      "instanc":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23954701,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2385178,
          "displayName":"Raza",
          "reputation":366
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Dog The point of a constructor is to initialize the object. The default constructor is there only to initialize the object when you don't want to do it explicitly. It is not the answer to your Question though and I really like the question."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23954701]-[1851238161]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Dog The point of a constructor is to initialize the object. The default constructor is there only to initialize the object when you don't want to do it explicitly. It is not the answer to your Question though and I really like the question."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Dog",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":2,
                      "point":1,
                      "constructor":2,
                      "dog":1,
                      "object":2,
                      "answer":1,
                      "initi":2,
                      "explicit":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23955089,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2385178,
          "displayName":"Raza",
          "reputation":366
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@jtahlborn apologies and thanks for correcting me."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23955089]-[544093034]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@jtahlborn apologies and thanks for correcting me."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jtahlborn":1,
                      "apolog":1,
                      "correct":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23953927,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":205426,
          "displayName":"Woot4Moo",
          "reputation":14711
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"so your question is what properties do constructors guarantee in Java yes?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23953927]-[-260240293]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"so your question is what properties do constructors guarantee in Java yes?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "constructor":1,
                      "guarante":1,
                      "properti":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23953947,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2213023,
          "displayName":"Dog",
          "reputation":2672
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Woot4Moo: Yes, that and/or what is the point in them (e.g if they're just for convention, like comments/names)?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23953947]-[1498422608]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Woot4Moo: Yes, that and/or what is the point in them (e.g if they're just for convention, like comments/names)?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Woot4Moo",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "name":1,
                      "point":1,
                      "comment":1,
                      "moo":1,
                      "woot":1,
                      "convent":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23953986,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":205426,
          "displayName":"Woot4Moo",
          "reputation":14711
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I have changed the title, because I think it will get more viewership."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23953986]-[-1042792665]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I have changed the title, because I think it will get more viewership."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "viewership":1,
                      "chang":1,
                      "titl":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23954009,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":829571,
          "displayName":"assylias",
          "reputation":118960
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"As long as your object is safely published, you have the guarantee that the object is properly initialised once the call to the constructor returns (i.e. all the operations in the constructor have completed)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23954009]-[-482620386]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"As long as your object is safely published, you have the guarantee that the object is properly initialised once the call to the constructor returns (i.e. all the operations in the constructor have completed)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "proper":1,
                      "return":1,
                      "constructor":2,
                      "safe":1,
                      "object":2,
                      "oper":1,
                      "publish":1,
                      "guarante":1,
                      "complet":1,
                      "initialis":1,
                      "call":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23954105,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2213023,
          "displayName":"Dog",
          "reputation":2672
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@assylias: then what is the constructor doing that I can't do with a factory?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23954105]-[-1726713154]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@assylias: then what is the constructor doing that I can't do with a factory?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "factori":1,
                      "assylia":1,
                      "constructor":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23954122,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":552759,
          "displayName":"jtahlborn",
          "reputation":34955
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@Dog - can you create a factory in java which _doesn't_ use an object's constructor? (using sun.misc.Unsafe doesn't count)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23954122]-[-1203386595]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@Dog - can you create a factory in java which _doesn't_ use an object's constructor? (using sun.misc.Unsafe doesn't count)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Dog",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"_doesn",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "count":1,
                      "sun":1,
                      "constructor":1,
                      "dog":1,
                      "factori":1,
                      "object":1,
                      "misc":1,
                      "unsaf":1,
                      "creat":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":23954232,
        "postId":16652966,
        "creationDate":"2013-05-20",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":205426,
          "displayName":"Woot4Moo",
          "reputation":14711
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"@jtahlborn well that is unfair."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[16652966-cu23954232]-[1970062302]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"@jtahlborn well that is unfair."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "jtahlborn":1,
                      "unfair":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "security",
      "inheritance",
      "concurrency",
      "constructor"
    ],
    "creationDate":"2013-05-20",
    "lastActivityDate":"2013-05-21",
    "lastEditDate":"2013-05-20",
    "score":6,
    "viewCount":403,
    "owner":{
      "type":"StackOverflowUser",
      "id":2213023,
      "displayName":"Dog",
      "reputation":2672
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I used to think that, intuitively speaking, a constructor in Java is the thing that makes an object, and that nothing can touch that object until its constructor returns. However, I have been proven wrong about this over and over again:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16652966]-[1380862359]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I used to think that, intuitively speaking, a constructor in Java is the thing that makes an object, and that nothing can touch that object until its constructor returns. However, I have been proven wrong about this over and over again:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "proven":1,
                  "touch":1,
                  "wrong":1,
                  "return":1,
                  "constructor":2,
                  "thing":1,
                  "object":2,
                  "make":1,
                  "speak":1,
                  "intuit":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<ol> \n <li>uninitialized objects can be leaked by sharing <code>this</code></li> \n <li><a href=\"http://www.ibm.com/developerworks/library/j-fv/\"rel=\"nofollow\">uninitialized objects can be leaked by a subclass accessing it from the finalizer</a></li> \n <li><a href=\"http://stackoverflow.com/questions/16178020/uninitialized-object-leaked-to-another-thread-despite-no-code-explicitly-leaking\">uninitialized objects can be leaked to another thread before they're fully constructed</a></li> \n</ol>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16652966]-[1915614065]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<ol> \n <li>uninitialized objects can be leaked by sharing <code>this</code></li> \n <li><a href=\"http://www.ibm.com/developerworks/library/j-fv/\"rel=\"nofollow\">uninitialized objects can be leaked by a subclass accessing it from the finalizer</a></li> \n <li><a href=\"http://stackoverflow.com/questions/16178020/uninitialized-object-leaked-to-another-thread-despite-no-code-explicitly-leaking\">uninitialized objects can be leaked to another thread before they're fully constructed</a></li> \n</ol>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "developerwork":1,
                  "question":1,
                  "subclass":1,
                  "rel":1,
                  "leak":5,
                  "librari":1,
                  "object":4,
                  "code":3,
                  "share":1,
                  "stackoverflow":1,
                  "thread":2,
                  "nofollow":1,
                  "uniniti":4,
                  "final":1,
                  "fulli":1,
                  "ibm":1,
                  "href":2,
                  "explicit":1,
                  "http":2,
                  "construct":1,
                  "www":1,
                  "access":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>All of these facts violate my intuition of what I thought a constructor is.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16652966]-[-1649185242]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>All of these facts violate my intuition of what I thought a constructor is.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "violat":1,
                  "thought":1,
                  "constructor":1,
                  "fact":1,
                  "intuit":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I can no longer with confidence say what a constructor actually does in Java, or what it's meant to be used for. If I'm making a simple DTO with <em>all final fields</em>, then I can understand what the use of the constructor is, because this is exactly the same as a struct in C except it can't be modified. Other than that, I have no clue what constructors can be reliably used for in Java. Are they just a convention/syntactic sugar? (i.e If there were only factories that initialize objects for you, you would only have <code>X x = new X()</code>, then modify each field in <code>x</code> to make them have non default values - given the 3 facts above, this would be almost equivalent to how Java actually is)</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16652966]-[210929286]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I can no longer with confidence say what a constructor actually does in Java, or what it's meant to be used for. If I'm making a simple DTO with <em>all final fields</em>, then I can understand what the use of the constructor is, because this is exactly the same as a struct in C except it can't be modified. Other than that, I have no clue what constructors can be reliably used for in Java. Are they just a convention/syntactic sugar? (i.e If there were only factories that initialize objects for you, you would only have <code>X x = new X()</code>, then modify each field in <code>x</code> to make them have non default values - given the 3 facts above, this would be almost equivalent to how Java actually is)</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ConstructorCreatorNode",
                  "creatorType":{
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"X",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "expressionArgs":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "simpl":1,
                  "dto":1,
                  "sugar":1,
                  "field":2,
                  "equival":1,
                  "reliabl":1,
                  "understand":1,
                  "constructor":3,
                  "factori":1,
                  "object":1,
                  "code":4,
                  "meant":1,
                  "fact":1,
                  "confid":1,
                  "valu":1,
                  "modifi":2,
                  "struct":1,
                  "make":2,
                  "initi":1,
                  "longer":1,
                  "syntact":1,
                  "convent":1,
                  "clue":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"X",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I can name two properties that are actually guaranteed by constructors: If I do <code>X x = new X()</code>, then I know that <code>x</code> is an instance of <code>X</code> but not a subclass of <code>X</code>, and its final fields are fully initialized. You might be tempted to say that you know that constructor of <code>X</code> finished and you have a valid object, but this is untrue if you pass <code>X</code> to another thread - <a href=\"http://stackoverflow.com/questions/16178020/uninitialized-object-leaked-to-another-thread-despite-no-code-explicitly-leaking\">the other thread may see the uninitialized version</a> (i.e what you just said is no different than the guarantees of calling a factory). What other properties do constructors actually guarantee?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[16652966]-[1541375564]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I can name two properties that are actually guaranteed by constructors: If I do <code>X x = new X()</code>, then I know that <code>x</code> is an instance of <code>X</code> but not a subclass of <code>X</code>, and its final fields are fully initialized. You might be tempted to say that you know that constructor of <code>X</code> finished and you have a valid object, but this is untrue if you pass <code>X</code> to another thread - <a href=\"http://stackoverflow.com/questions/16178020/uninitialized-object-leaked-to-another-thread-despite-no-code-explicitly-leaking\">the other thread may see the uninitialized version</a> (i.e what you just said is no different than the guarantees of calling a factory). What other properties do constructors actually guarantee?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ConstructorCreatorNode",
                  "creatorType":{
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"X",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "expressionArgs":{
                    "type":"ExpressionListNode",
                    "arguments":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "properti":2,
                  "question":1,
                  "subclass":1,
                  "field":1,
                  "leak":2,
                  "untru":1,
                  "constructor":3,
                  "finish":1,
                  "factori":1,
                  "tempt":1,
                  "object":2,
                  "code":13,
                  "guarante":3,
                  "stackoverflow":1,
                  "version":1,
                  "thread":3,
                  "uniniti":2,
                  "fulli":1,
                  "valid":1,
                  "pass":1,
                  "initi":1,
                  "href":1,
                  "explicit":1,
                  "http":1,
                  "call":1,
                  "instanc":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"X",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":16653017,
      "questionId":16652966,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":23954002,
          "postId":16653017,
          "creationDate":"2013-05-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2213023,
            "displayName":"Dog",
            "reputation":2672
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"and so are factories."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[16653017-cu23954002]-[1489873805]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"and so are factories."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "factori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":23954033,
          "postId":16653017,
          "creationDate":"2013-05-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1059549,
            "displayName":"Dory Zidon",
            "reputation":3224
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"factories create a range of objects, not initialize a single object state.."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[16653017-cu23954033]-[516311795]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"factories create a range of objects, not initialize a single object state.."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "singl":1,
                        "state":1,
                        "rang":1,
                        "factori":1,
                        "object":2,
                        "initi":1,
                        "creat":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":23954082,
          "postId":16653017,
          "creationDate":"2013-05-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":552759,
            "displayName":"jtahlborn",
            "reputation":34955
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Dog - factories still use constructors."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[16653017-cu23954082]-[-358870315]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Dog - factories still use constructors."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Dog",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "dog":1,
                        "factori":1,
                        "constructor":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":23954117,
          "postId":16653017,
          "creationDate":"2013-05-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1059549,
            "displayName":"Dory Zidon",
            "reputation":3224
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Like you said, factories use constructors. constructor's sole purpose in life is to initialize the object's state..that's all.."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[16653017-cu23954117]-[225646311]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Like you said, factories use constructors. constructor's sole purpose in life is to initialize the object's state..that's all.."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "sole":1,
                        "state":1,
                        "constructor":2,
                        "factori":1,
                        "object":1,
                        "life":1,
                        "initi":1,
                        "purpos":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":23954181,
          "postId":16653017,
          "creationDate":"2013-05-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1766868,
            "displayName":"Bailey S",
            "reputation":1651
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Yes, factories construct objects, and are themselves constructed. Even static classes have `static` blocks, which are kinda their analog for a constructor."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[16653017-cu23954181]-[-820786355]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Yes, factories construct objects, and are themselves constructed. Even static classes have `static` blocks, which are kinda their analog for a constructor."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "constructor":1,
                        "factori":1,
                        "object":1,
                        "block":1,
                        "class":1,
                        "kinda":1,
                        "analog":1,
                        "construct":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-05-20",
      "lastActivityDate":"2013-05-20",
      "score":-1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1059549,
        "displayName":"Dory Zidon",
        "reputation":3224
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>constructors is java are just used to initialize the state of the object created..nothing more.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653017]-[-540099311]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>constructors is java are just used to initialize the state of the object created..nothing more.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "state":1,
                    "constructor":1,
                    "object":1,
                    "initi":1,
                    "creat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":16653036,
      "questionId":16652966,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":23954313,
          "postId":16653036,
          "creationDate":"2013-05-20",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"There are tons of complexities in a multithreaded program that make it &quot;behave the way [we] expected it not to&quot;. Reordering of instructions is one of them. You can have `x=1;` `y=2;` and another thread would see the `y` assignment but not the `x`. I don't see how this threatens the definition of the constructor @Dog."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[16653036-cu23954313]-[315172828]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"There are tons of complexities in a multithreaded program that make it &quot;behave the way [we] expected it not to&quot;. Reordering of instructions is one of them. You can have `x=1;` `y=2;` and another thread would see the `y` assignment but not the `x`. I don't see how this threatens the definition of the constructor @Dog."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"x",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"1"
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      },
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"=",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"y",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"IntegerLiteralNode",
                              "valueRep":"2"
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      },
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Dog",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "reorder":1,
                        "constructor":1,
                        "assign":1,
                        "ton":1,
                        "dog":1,
                        "behav":1,
                        "thread":1,
                        "multithread":1,
                        "definit":1,
                        "expect":1,
                        "make":1,
                        "quot":2,
                        "threaten":1,
                        "complex":1,
                        "instruct":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":24034758,
          "postId":16653036,
          "creationDate":"2013-05-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2213023,
            "displayName":"Dog",
            "reputation":2672
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The finalizer issue has nothing to do with concurrency."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[16653036-cu24034758]-[2066900042]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The finalizer issue has nothing to do with concurrency."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "concurr":1,
                        "issu":1,
                        "final":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":23954411,
          "postId":16653036,
          "creationDate":"2013-05-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2213023,
            "displayName":"Dog",
            "reputation":2672
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"the `SecurityManager` example has nothing to do with concurrency. Also it would be common sense to assume if you get an instance of `x`, the constructor's completion `happens-before` publishing the reference of `x`, but this is not the case in Java. The problem is I don't know what the &quot;definition of a constructor&quot; (purpose and properties of a constructor) is, and that's why I'm asking this question."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[16653036-cu23954411]-[1181575766]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"the `SecurityManager` example has nothing to do with concurrency. Also it would be common sense to assume if you get an instance of `x`, the constructor's completion `happens-before` publishing the reference of `x`, but this is not the case in Java. The problem is I don't know what the &quot;definition of a constructor&quot; (purpose and properties of a constructor) is, and that's why I'm asking this question."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"SecurityManager",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "sens":1,
                        "properti":1,
                        "question":1,
                        "assum":1,
                        "concurr":1,
                        "problem":1,
                        "constructor":3,
                        "secur":1,
                        "publish":1,
                        "common":1,
                        "definit":1,
                        "refer":1,
                        "quot":2,
                        "complet":1,
                        "manag":1,
                        "purpos":1,
                        "instanc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"SecurityManager",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":23954646,
          "postId":16653036,
          "creationDate":"2013-05-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2213023,
            "displayName":"Dog",
            "reputation":2672
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The finalizer leaks **are** an issue, because if you are using a `SecurityManager`, then you can no longer rely on only *fully constructed objects* being in the wild, because malicious code can use the technique described in point 2 in my question to obtain an uninitialized version."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[16653036-cu23954646]-[70448619]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The finalizer leaks **are** an issue, because if you are using a `SecurityManager`, then you can no longer rely on only *fully constructed objects* being in the wild, because malicious code can use the technique described in point 2 in my question to obtain an uninitialized version."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"SecurityManager",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "wild":1,
                        "question":1,
                        "point":1,
                        "leak":1,
                        "issu":1,
                        "secur":1,
                        "object":1,
                        "code":1,
                        "version":1,
                        "malici":1,
                        "uniniti":1,
                        "final":1,
                        "techniqu":1,
                        "fulli":1,
                        "longer":1,
                        "reli":1,
                        "manag":1,
                        "construct":1,
                        "obtain":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"SecurityManager",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":23954834,
          "postId":16653036,
          "creationDate":"2013-05-20",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179850,
            "displayName":"Gray",
            "reputation":63324
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"You are correct that the finalizer hacks mentioned can result in an improperly initialized object unless you use their private initializer methods at the bottom. But to me that doesn't threaten my definition of the constructor. It demonstrates (yet again) the complexities of a modern, mature multithreaded language but that's about it for me."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[16653036-cu23954834]-[1538634838]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"You are correct that the finalizer hacks mentioned can result in an improperly initialized object unless you use their private initializer methods at the bottom. But to me that doesn't threaten my definition of the constructor. It demonstrates (yet again) the complexities of a modern, mature multithreaded language but that's about it for me."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "languag":1,
                        "bottom":1,
                        "correct":1,
                        "result":1,
                        "matur":1,
                        "improp":1,
                        "constructor":1,
                        "demonstr":1,
                        "object":1,
                        "modern":1,
                        "mention":1,
                        "multithread":1,
                        "definit":1,
                        "final":1,
                        "initi":2,
                        "hack":1,
                        "threaten":1,
                        "complex":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":23954062,
          "postId":16653036,
          "creationDate":"2013-05-20",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2213023,
            "displayName":"Dog",
            "reputation":2672
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"What? These optimizations make the code behave the way I expected it not to, also the first 2 bullets are not about this, for example number 2 means I can't rely on constructors to do what I expect under a `SecurityManager`."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[16653036-cu23954062]-[596729428]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"What? These optimizations make the code behave the way I expected it not to, also the first 2 bullets are not about this, for example number 2 means I can't rely on constructors to do what I expect under a `SecurityManager`."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"SecurityManager",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "number":1,
                        "mean":1,
                        "constructor":1,
                        "secur":1,
                        "bullet":1,
                        "behav":1,
                        "code":1,
                        "optim":1,
                        "expect":2,
                        "make":1,
                        "reli":1,
                        "manag":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"SecurityManager",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-05-20",
      "lastActivityDate":"2013-05-21",
      "lastEditDate":"2013-05-21",
      "score":6,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":179850,
        "displayName":"Gray",
        "reputation":63324
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>All of these facts violate my intuition of what I thought a constructor is.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[1648014921]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>All of these facts violate my intuition of what I thought a constructor is.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "violat":1,
                    "thought":1,
                    "constructor":1,
                    "blockquot":2,
                    "fact":1,
                    "intuit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>They shouldn't. A constructor does exactly what you think it does.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[-247081758]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>They shouldn't. A constructor does exactly what you think it does.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "constructor":1,
                    "shouldn":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>1: uninitialized objects can be leaked by sharing this</p> \n <p>3: uninitialized objects can be leaked to another thread before they're fully constructed</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[1264010239]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>1: uninitialized objects can be leaked by sharing this</p> \n <p>3: uninitialized objects can be leaked to another thread before they're fully constructed</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "leak":2,
                    "blockquot":2,
                    "object":2,
                    "share":1,
                    "thread":1,
                    "uniniti":2,
                    "fulli":1,
                    "construct":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The problem with the leaking of <code>this</code>, starting threads in the constructor, and storing a newly constructed object where multiple threads access it without synchronization are all problems around the reordering of the initialization of non-final (and non-volatile) fields. But the initialization code is still done by the constructor. The thread that constructed the object sees the object fully. This is about when those changes are <em>visible</em> in other threads which is not guaranteed by the language definition.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[-791470053]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The problem with the leaking of <code>this</code>, starting threads in the constructor, and storing a newly constructed object where multiple threads access it without synchronization are all problems around the reordering of the initialization of non-final (and non-volatile) fields. But the initialization code is still done by the constructor. The thread that constructed the object sees the object fully. This is about when those changes are <em>visible</em> in other threads which is not guaranteed by the language definition.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "languag":1,
                    "field":1,
                    "reorder":1,
                    "problem":2,
                    "leak":1,
                    "constructor":2,
                    "store":1,
                    "visibl":1,
                    "object":3,
                    "code":3,
                    "newli":1,
                    "guarante":1,
                    "thread":4,
                    "definit":1,
                    "fulli":1,
                    "initi":2,
                    "start":1,
                    "see":1,
                    "multipl":1,
                    "construct":2,
                    "access":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>You might be tempted to say that you know that constructor of X finished and you have a valid object, but this is untrue if you pass X to another thread - the other thread may see the uninitialized version (i.e what you just said is no different than the guarantees of calling a factory).</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[-131379028]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>You might be tempted to say that you know that constructor of X finished and you have a valid object, but this is untrue if you pass X to another thread - the other thread may see the uninitialized version (i.e what you just said is no different than the guarantees of calling a factory).</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "untru":1,
                    "constructor":1,
                    "finish":1,
                    "factori":1,
                    "blockquot":2,
                    "tempt":1,
                    "object":1,
                    "guarante":1,
                    "version":1,
                    "thread":2,
                    "uniniti":1,
                    "valid":1,
                    "pass":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This is correct. It is also correct that if you have an unsynchronized object and you mutate it in one thread, other threads may or may not see the mutation. That's the nature of threaded programming. Even constructors are not safe from the need to synchronize objects properly.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[956206399]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This is correct. It is also correct that if you have an unsynchronized object and you mutate it in one thread, other threads may or may not see the mutation. That's the nature of threaded programming. Even constructors are not safe from the need to synchronize objects properly.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "program":1,
                    "natur":1,
                    "unsynchron":1,
                    "proper":1,
                    "correct":2,
                    "constructor":1,
                    "safe":1,
                    "mutat":2,
                    "object":2,
                    "thread":3,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>2: uninitialized objects can be leaked by a subclass accessing it from the finalizer</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[-862088830]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>2: uninitialized objects can be leaked by a subclass accessing it from the finalizer</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "subclass":1,
                    "leak":1,
                    "blockquot":2,
                    "object":1,
                    "uniniti":1,
                    "final":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This document is talking about finalizers and improperly being able to access an object <em>after</em> it has been garbage collected. By hacking subclasses and finalizers you can generate an object that is not properly constructed but it is a major hack to do so. For me this does not somehow challenge what a constructor does. Instead it demonstrates the complexity of the modern, mature, JVM. The document also shows how you can write your code to work around this hack.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[-938198712]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This document is talking about finalizers and improperly being able to access an object <em>after</em> it has been garbage collected. By hacking subclasses and finalizers you can generate an object that is not properly constructed but it is a major hack to do so. For me this does not somehow challenge what a constructor does. Instead it demonstrates the complexity of the modern, mature, JVM. The document also shows how you can write your code to work around this hack.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jvm":1,
                    "subclass":1,
                    "show":1,
                    "proper":1,
                    "document":2,
                    "matur":1,
                    "improp":1,
                    "constructor":1,
                    "talk":1,
                    "demonstr":1,
                    "work":1,
                    "object":2,
                    "code":1,
                    "modern":1,
                    "challeng":1,
                    "final":2,
                    "generat":1,
                    "hack":3,
                    "collect":1,
                    "major":1,
                    "construct":1,
                    "write":1,
                    "garbag":1,
                    "complex":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>What properties are guaranteed by constructors in Java?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[-2053846159]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>What properties are guaranteed by constructors in Java?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "blockquot":2,
                    "constructor":1,
                    "guarante":1,
                    "properti":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>According to the definition, a constructor:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[796466323]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>According to the definition, a constructor:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "constructor":1,
                    "definit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ol> \n <li>Allocates space for the object.</li> \n <li>Sets all the instance variables in the object to their default values. This includes the instance variables in the object's superclasses.</li> \n <li>Assigns the parameter variables for the object.</li> \n <li>Processes any explicit or implicit constructor invocation (a call to this() or super() in the constructor).</li> \n <li>Initializes variables in the class.</li> \n <li>Executes the rest of the constructor.</li> \n</ol>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[44037073]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ol> \n <li>Allocates space for the object.</li> \n <li>Sets all the instance variables in the object to their default values. This includes the instance variables in the object's superclasses.</li> \n <li>Assigns the parameter variables for the object.</li> \n <li>Processes any explicit or implicit constructor invocation (a call to this() or super() in the constructor).</li> \n <li>Initializes variables in the class.</li> \n <li>Executes the rest of the constructor.</li> \n</ol>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "invoc":1,
                    "process":1,
                    "rest":1,
                    "set":1,
                    "constructor":3,
                    "assign":1,
                    "superclass":1,
                    "object":4,
                    "includ":1,
                    "paramet":1,
                    "space":1,
                    "implicit":1,
                    "valu":1,
                    "initi":1,
                    "variabl":4,
                    "explicit":1,
                    "call":1,
                    "execut":1,
                    "instanc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>In terms of your 3 issues, #1 and #3 are, again, about when the initialization of non-final and non-volatile fields are seen by threads other than the one that constructed the object. This visibility without synchronization is not guaranteed.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[-1877825891]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>In terms of your 3 issues, #1 and #3 are, again, about when the initialization of non-final and non-volatile fields are seen by threads other than the one that constructed the object. This visibility without synchronization is not guaranteed.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "field":1,
                    "term":1,
                    "issu":1,
                    "visibl":1,
                    "object":1,
                    "guarante":1,
                    "thread":1,
                    "initi":1,
                    "construct":1,
                    "synchron":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The #2 issue shows a mechanism where if an exception is thrown while executing the constructor, you can override the finalize method to obtain and improperly constructed object. Constructor points 1-5 have occurred. With the hack you can bypass a portion of 6. I guess it is in the eye of the beholder if this challenges the identity of the constructor.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653036]-[1667816974]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The #2 issue shows a mechanism where if an exception is thrown while executing the constructor, you can override the finalize method to obtain and improperly constructed object. Constructor points 1-5 have occurred. With the hack you can bypass a portion of 6. I guess it is in the eye of the beholder if this challenges the identity of the constructor.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "eye":1,
                    "method":1,
                    "portion":1,
                    "point":1,
                    "behold":1,
                    "show":1,
                    "occur":1,
                    "improp":1,
                    "overrid":1,
                    "thrown":1,
                    "constructor":3,
                    "issu":1,
                    "object":1,
                    "ident":1,
                    "challeng":1,
                    "final":1,
                    "mechan":1,
                    "bypass":1,
                    "hack":1,
                    "guess":1,
                    "construct":1,
                    "execut":1,
                    "obtain":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":16653121,
      "questionId":16652966,
      "comments":[
        
      ],
      "creationDate":"2013-05-20",
      "lastActivityDate":"2013-05-20",
      "lastEditDate":"2013-05-20",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":205426,
        "displayName":"Woot4Moo",
        "reputation":14711
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>From the <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.5\"rel=\"nofollow\">JLS section 12.5</a>: </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653121]-[2077739221]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>From the <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.5\"rel=\"nofollow\">JLS section 12.5</a>: </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jls":4,
                    "rel":1,
                    "oracl":1,
                    "section":1,
                    "doc":1,
                    "nofollow":1,
                    "spec":1,
                    "javas":1,
                    "html":2,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>12.5. Creation of New Class Instances</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653121]-[1307892107]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>12.5. Creation of New Class Instances</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "instanc":1,
                    "creation":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Just before a reference to the newly created object is returned as the result, the indicated constructor is processed to initialize the new object using the following procedure:</p> \n <p>Assign the arguments for the constructor to newly created parameter variables for this constructor invocation.</p> \n <p>If this constructor begins with an explicit constructor invocation (&sect;8.8.7.1) of another constructor in the same class (using this), then evaluate the arguments and process that constructor invocation recursively using these same five steps. If that constructor invocation completes abruptly, then this procedure completes abruptly for the same reason; otherwise, continue with step 5.</p> \n <p>This constructor does not begin with an explicit constructor invocation of another constructor in the same class (using this). If this constructor is for a class other than Object, then this constructor will begin with an explicit or implicit invocation of a superclass constructor (using super). Evaluate the arguments and process that superclass constructor invocation recursively using these same five steps. If that constructor invocation completes abruptly, then this procedure completes abruptly for the same reason. Otherwise, continue with step 4.</p> \n <p>Execute the instance initializers and instance variable initializers for this class, assigning the values of instance variable initializers to the corresponding instance variables, in the left-to-right order in which they appear textually in the source code for the class. If execution of any of these initializers results in an exception, then no further initializers are processed and this procedure completes abruptly with that same exception. Otherwise, continue with step 5.</p> \n <p>Execute the rest of the body of this constructor. If that execution completes abruptly, then this procedure completes abruptly for the same reason. Otherwise, this procedure completes normally. </p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653121]-[1323222651]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Just before a reference to the newly created object is returned as the result, the indicated constructor is processed to initialize the new object using the following procedure:</p> \n <p>Assign the arguments for the constructor to newly created parameter variables for this constructor invocation.</p> \n <p>If this constructor begins with an explicit constructor invocation (&sect;8.8.7.1) of another constructor in the same class (using this), then evaluate the arguments and process that constructor invocation recursively using these same five steps. If that constructor invocation completes abruptly, then this procedure completes abruptly for the same reason; otherwise, continue with step 5.</p> \n <p>This constructor does not begin with an explicit constructor invocation of another constructor in the same class (using this). If this constructor is for a class other than Object, then this constructor will begin with an explicit or implicit invocation of a superclass constructor (using super). Evaluate the arguments and process that superclass constructor invocation recursively using these same five steps. If that constructor invocation completes abruptly, then this procedure completes abruptly for the same reason. Otherwise, continue with step 4.</p> \n <p>Execute the instance initializers and instance variable initializers for this class, assigning the values of instance variable initializers to the corresponding instance variables, in the left-to-right order in which they appear textually in the source code for the class. If execution of any of these initializers results in an exception, then no further initializers are processed and this procedure completes abruptly with that same exception. Otherwise, continue with step 5.</p> \n <p>Execute the rest of the body of this constructor. If that execution completes abruptly, then this procedure completes abruptly for the same reason. Otherwise, this procedure completes normally. </p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"other",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "abrupt":7,
                    "textual":1,
                    "begin":3,
                    "step":5,
                    "invoc":8,
                    "return":1,
                    "process":4,
                    "rest":1,
                    "result":2,
                    "left":1,
                    "procedur":6,
                    "constructor":17,
                    "assign":2,
                    "reason":3,
                    "blockquot":2,
                    "superclass":2,
                    "object":3,
                    "code":1,
                    "newli":2,
                    "paramet":1,
                    "recurs":2,
                    "implicit":1,
                    "order":1,
                    "valu":1,
                    "refer":1,
                    "initi":6,
                    "sect":1,
                    "evalu":2,
                    "complet":8,
                    "bodi":1,
                    "variabl":4,
                    "explicit":3,
                    "creat":2,
                    "sourc":1,
                    "argument":3,
                    "execut":4,
                    "instanc":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>**</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653121]-[1281845579]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>**</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Unlike C++, the Java programming language does not specify altered rules for method &gt;dispatch during the creation of a new class instance. If methods are invoked that are &gt;overridden in subclasses in the object being initialized, then these overriding methods &gt;are used, even before the new object is completely initialized.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653121]-[-773765266]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Unlike C++, the Java programming language does not specify altered rules for method &gt;dispatch during the creation of a new class instance. If methods are invoked that are &gt;overridden in subclasses in the object being initialized, then these overriding methods &gt;are used, even before the new object is completely initialized.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"instance",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "unlik":1,
                    "program":1,
                    "method":3,
                    "subclass":1,
                    "languag":1,
                    "alter":1,
                    "overridden":1,
                    "dispatch":1,
                    "invok":1,
                    "overrid":1,
                    "rule":1,
                    "blockquot":2,
                    "creation":1,
                    "object":2,
                    "initi":2,
                    "complet":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>And from <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-16.html#jls-16.9\"rel=\"nofollow\">JLS 16.9</a>: </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653121]-[791881974]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>And from <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-16.html#jls-16.9\"rel=\"nofollow\">JLS 16.9</a>: </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jls":4,
                    "rel":1,
                    "oracl":1,
                    "doc":1,
                    "nofollow":1,
                    "spec":1,
                    "javas":1,
                    "html":2,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Note that there are no rules that would allow us to conclude that V is definitely unassigned before an instance variable initializer. We can informally conclude that V is not definitely unassigned before any instance variable initializer of C, but there is no need for such a rule to be stated explicitly.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653121]-[593232631]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Note that there are no rules that would allow us to conclude that V is definitely unassigned before an instance variable initializer. We can informally conclude that V is not definitely unassigned before any instance variable initializer of C, but there is no need for such a rule to be stated explicitly.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "state":1,
                    "rule":2,
                    "blockquot":2,
                    "inform":1,
                    "conclud":2,
                    "note":1,
                    "unassign":2,
                    "initi":2,
                    "variabl":2,
                    "explicit":1,
                    "instanc":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\"rel=\"nofollow\">Happens before 17.4.5</a>: </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653121]-[303202865]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.4.5\"rel=\"nofollow\">Happens before 17.4.5</a>: </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jls":3,
                    "rel":1,
                    "oracl":1,
                    "doc":1,
                    "nofollow":1,
                    "spec":1,
                    "javas":1,
                    "html":2,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.5.2\"rel=\"nofollow\">Threading 17.5.2</a>: </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653121]-[-612133575]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.5.2\"rel=\"nofollow\">Threading 17.5.2</a>: </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jls":3,
                    "rel":1,
                    "oracl":1,
                    "doc":1,
                    "thread":1,
                    "nofollow":1,
                    "spec":1,
                    "javas":1,
                    "html":2,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>A read of a final field of an object within the thread that constructs that object is ordered with respect to the initialization of that field within the constructor by the usual happens-before rules. If the read occurs after the field is set in the constructor, it sees the value the final field is assigned, otherwise it sees the default value.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16653121]-[-1023616318]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>A read of a final field of an object within the thread that constructs that object is ordered with respect to the initialization of that field within the constructor by the usual happens-before rules. If the read occurs after the field is set in the constructor, it sees the value the final field is assigned, otherwise it sees the default value.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":2,
                    "field":4,
                    "occur":1,
                    "set":1,
                    "constructor":2,
                    "assign":1,
                    "rule":1,
                    "blockquot":2,
                    "object":2,
                    "thread":1,
                    "usual":1,
                    "order":1,
                    "initi":1,
                    "respect":1,
                    "see":2,
                    "construct":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":16654425,
      "questionId":16652966,
      "comments":[
        
      ],
      "creationDate":"2013-05-20",
      "lastActivityDate":"2013-05-20",
      "lastEditDate":"2013-05-20",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1830513,
        "displayName":"Sazzadur Rahaman",
        "reputation":3136
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>A class contains constructors that are invoked to create objects from the class blueprint.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16654425]-[-613596199]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>A class contains constructors that are invoked to create objects from the class blueprint.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"contains",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"blueprint",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "invok":1,
                    "constructor":1,
                    "blockquot":2,
                    "object":1,
                    "blueprint":1,
                    "creat":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html\"rel=\"nofollow\">This</a> is what Oracle says about constructors. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16654425]-[-75070635]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html\"rel=\"nofollow\">This</a> is what Oracle says about constructors. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "rel":1,
                    "constructor":2,
                    "oracl":2,
                    "doc":1,
                    "nofollow":1,
                    "javas":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "tutori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Now to your point.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16654425]-[45730235]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Now to your point.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>intuitively speaking, a constructor in Java is the thing that makes an object, and that nothing can touch that object until its constructor returns.</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16654425]-[1778679572]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>intuitively speaking, a constructor in Java is the thing that makes an object, and that nothing can touch that object until its constructor returns.</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "touch":1,
                    "return":1,
                    "constructor":2,
                    "thing":1,
                    "blockquot":2,
                    "object":2,
                    "make":1,
                    "speak":1,
                    "intuit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>So according to the official documentation, your assumption is not right. And the point <em><code>1</code></em> and <em><code>2</code></em> are the abuse of the rules and behaviors of Java, unless you consciously want to leak your objects! As also being irrelevant to <code>Constructor</code>, I will skip discussing these points.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16654425]-[-483182570]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>So according to the official documentation, your assumption is not right. And the point <em><code>1</code></em> and <em><code>2</code></em> are the abuse of the rules and behaviors of Java, unless you consciously want to leak your objects! As also being irrelevant to <code>Constructor</code>, I will skip discussing these points.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":2,
                    "offici":1,
                    "document":1,
                    "abus":1,
                    "leak":1,
                    "constructor":1,
                    "rule":1,
                    "skip":1,
                    "conscious":1,
                    "object":1,
                    "code":6,
                    "discuss":1,
                    "assumpt":1,
                    "behavior":1,
                    "irrelev":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Now if we talk about your <em><code>3rd</code></em> point, in multi-threaded environment there is nothing that can guarantee you about the consistency of your code, unless <em>&quot;properly synchronized blocks&quot;</em> or <em>&quot;the atomic instructions&quot;</em>. As object creation is not a <code>synchronized</code> nor an <code>atomic</code> instruction, there is no guarantee of being consistent! There is nothing the <code>Constructor</code> can do with it. In other words its not the responsibility of the <code>Constructor</code> to make your object creation <code>atomic</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16654425]-[-715780086]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Now if we talk about your <em><code>3rd</code></em> point, in multi-threaded environment there is nothing that can guarantee you about the consistency of your code, unless <em>&quot;properly synchronized blocks&quot;</em> or <em>&quot;the atomic instructions&quot;</em>. As object creation is not a <code>synchronized</code> nor an <code>atomic</code> instruction, there is no guarantee of being consistent! There is nothing the <code>Constructor</code> can do with it. In other words its not the responsibility of the <code>Constructor</code> to make your object creation <code>atomic</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "proper":1,
                    "constructor":2,
                    "talk":1,
                    "creation":2,
                    "object":2,
                    "code":13,
                    "guarante":2,
                    "block":1,
                    "thread":1,
                    "consist":2,
                    "make":1,
                    "quot":4,
                    "atom":3,
                    "respons":1,
                    "environ":1,
                    "word":1,
                    "multi":1,
                    "instruct":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Now, the answer to your question, <strong><em>&quot;What other properties do constructors actually guarantee?&quot;</em></strong> is somewhat easy. <code>Constructors</code> are merely nothing but special type of methods, that are invoked during object creation from the blue print of the class. So it can guarantee nothing, unless you give it a chance to be executed consistently like any other methods. It after being consistently executed it can guarantee you that, your object is created and initialized as you wanted and instructed in it.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[16654425]-[891172916]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Now, the answer to your question, <strong><em>&quot;What other properties do constructors actually guarantee?&quot;</em></strong> is somewhat easy. <code>Constructors</code> are merely nothing but special type of methods, that are invoked during object creation from the blue print of the class. So it can guarantee nothing, unless you give it a chance to be executed consistently like any other methods. It after being consistently executed it can guarantee you that, your object is created and initialized as you wanted and instructed in it.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "properti":1,
                    "question":1,
                    "method":2,
                    "easi":1,
                    "want":1,
                    "blue":1,
                    "print":1,
                    "invok":1,
                    "constructor":2,
                    "strong":2,
                    "creation":1,
                    "object":2,
                    "code":2,
                    "guarante":3,
                    "consist":2,
                    "give":1,
                    "answer":1,
                    "quot":2,
                    "initi":1,
                    "special":1,
                    "type":1,
                    "creat":1,
                    "chanc":1,
                    "execut":2,
                    "instruct":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}