{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":19726617,
    "title":"Instantiating a class with no default constructor",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":29307677,
        "postId":19726617,
        "creationDate":"2013-11-01",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1451634,
          "displayName":"sutanu dalui",
          "reputation":152
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I want to have the superclass members initialized the same way. So is that &quot;allocation&quot; of an object on the heap, and instantiation of its members (which in turn might need allocation) are part of different strategies? @millimoose What you are saying is correct for a DI framework, since as you said &quot;it is mostly objects from your codebase&quot;. However, I am kind of trying a generic, &quot;object generator&quot; for a project which takes external adaptor classes and did not want to restrict to a you-need-to-have-a-default-constructor defined."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19726617-cu29307677]-[1906268312]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I want to have the superclass members initialized the same way. So is that &quot;allocation&quot; of an object on the heap, and instantiation of its members (which in turn might need allocation) are part of different strategies? @millimoose What you are saying is correct for a DI framework, since as you said &quot;it is mostly objects from your codebase&quot;. However, I am kind of trying a generic, &quot;object generator&quot; for a project which takes external adaptor classes and did not want to restrict to a you-need-to-have-a-default-constructor defined."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "alloc":2,
                      "instanti":1,
                      "codebas":1,
                      "adaptor":1,
                      "project":1,
                      "correct":1,
                      "constructor":1,
                      "strategi":1,
                      "framework":1,
                      "superclass":1,
                      "object":3,
                      "generic":1,
                      "member":2,
                      "take":1,
                      "extern":1,
                      "turn":1,
                      "generat":1,
                      "class":1,
                      "quot":6,
                      "initi":1,
                      "part":1,
                      "heap":1,
                      "kind":1,
                      "defin":1,
                      "millimoos":1,
                      "restrict":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29307120,
        "postId":19726617,
        "creationDate":"2013-11-01",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":41655,
          "displayName":"millimoose",
          "reputation":23793
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You can always inspect the available constructors and see if you have any values you can pass to them. Dependency injection frameworks will do this for autowired constructor-injected objects - the assumption is that the objects you're creating mostly need other objects from your codebase, not &quot;generic&quot; parameters like strings; and that the DI container also manages these dependencies, and thus knows how to create them."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19726617-cu29307120]-[1325870512]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You can always inspect the available constructors and see if you have any values you can pass to them. Dependency injection frameworks will do this for autowired constructor-injected objects - the assumption is that the objects you're creating mostly need other objects from your codebase, not &quot;generic&quot; parameters like strings; and that the DI container also manages these dependencies, and thus knows how to create them."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "depend":2,
                      "codebas":1,
                      "constructor":2,
                      "autowir":1,
                      "string":1,
                      "contain":1,
                      "framework":1,
                      "object":3,
                      "generic":1,
                      "inspect":1,
                      "paramet":1,
                      "assumpt":1,
                      "valu":1,
                      "pass":1,
                      "inject":2,
                      "quot":2,
                      "manag":1,
                      "creat":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":29307269,
        "postId":19726617,
        "creationDate":"2013-11-01",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1206301,
          "displayName":"Alexei Kaigorodov",
          "reputation":6180
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Do you want to get an initialized object (a constructor invoked), or uninitialized one (no constructors and initializers invoked, fields have default (0 or null) values?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[19726617-cu29307269]-[246843925]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Do you want to get an initialized object (a constructor invoked), or uninitialized one (no constructors and initializers invoked, fields have default (0 or null) values?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "field":1,
                      "invok":2,
                      "constructor":2,
                      "object":1,
                      "uniniti":1,
                      "valu":1,
                      "initi":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "introspection",
      "objectinstantiation"
    ],
    "creationDate":"2013-11-01",
    "lastActivityDate":"2013-11-01",
    "score":1,
    "viewCount":210,
    "owner":{
      "type":"StackOverflowUser",
      "id":1451634,
      "displayName":"sutanu dalui",
      "reputation":152
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>For many framework development, we need to instantiate class by reading qualified class names from a config file.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19726617]-[1217652007]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>For many framework development, we need to instantiate class by reading qualified class names from a config file.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"by",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"names",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "read":1,
                  "name":1,
                  "instanti":1,
                  "config":1,
                  "framework":1,
                  "qualifi":1,
                  "file":1,
                  "develop":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>There are different introspection strategies, and dedicated libraries (like Objenesis) geared towards it.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19726617]-[-926234536]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>There are different introspection strategies, and dedicated libraries (like Objenesis) geared towards it.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "introspect":1,
                  "librari":1,
                  "strategi":1,
                  "gear":1,
                  "dedic":1,
                  "objenesi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>However, for classes with no default constructor (overloaded) I believe no introspection works if we do not know the signature of the overloaded constructor. The non standard approach is to use sun.misc.Unsafe class to allocate. This is what I understand. Is that a correct understanding?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19726617]-[751853466]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>However, for classes with no default constructor (overloaded) I believe no introspection works if we do not know the signature of the overloaded constructor. The non standard approach is to use sun.misc.Unsafe class to allocate. This is what I understand. Is that a correct understanding?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"sun",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"misc",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ClassDeclarationNode",
                  "modifiers":[
                    
                  ],
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"to",
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "introspect":1,
                  "alloc":1,
                  "standard":1,
                  "signatur":1,
                  "overload":2,
                  "correct":1,
                  "understand":2,
                  "sun":1,
                  "constructor":2,
                  "work":1,
                  "misc":1,
                  "approach":1,
                  "class":1,
                  "unsaf":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"sun",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"misc",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Unsafe",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Then there's a problem with that, as super classes are not instantiated by using Unsafe. But I thought Unsafe is the closest to whatever C code 'new' operator invokes, at least a part of it.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19726617]-[-1482333145]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Then there's a problem with that, as super classes are not instantiated by using Unsafe. But I thought Unsafe is the closest to whatever C code 'new' operator invokes, at least a part of it.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "instanti":1,
                  "thought":1,
                  "problem":1,
                  "invok":1,
                  "code":1,
                  "oper":1,
                  "class":1,
                  "unsaf":2,
                  "part":1,
                  "closest":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>So the question is, do we have Java ways of instantiating a object the way new operator does, by some form of introspection when the only information we have is the qualified name of the class (and of course that is present somewhere in the classpath!)</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[19726617]-[351565041]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>So the question is, do we have Java ways of instantiating a object the way new operator does, by some form of introspection when the only information we have is the qualified name of the class (and of course that is present somewhere in the classpath!)</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1,
                  "introspect":1,
                  "instanti":1,
                  "present":1,
                  "way":1,
                  "object":1,
                  "classpath":1,
                  "oper":1,
                  "qualifi":1,
                  "inform":1,
                  "form":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":19726686,
      "questionId":19726617,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":29307411,
          "postId":19726686,
          "creationDate":"2013-11-01",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":449553,
            "displayName":"msangel",
            "reputation":2442
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"This question is related to runtime - in compile time he did not know type, so cannot write this. He has only string, that contain class name."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[19726686-cu29307411]-[924826458]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"This question is related to runtime - in compile time he did not know type, so cannot write this. He has only string, that contain class name."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"name",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "runtim":1,
                        "relat":1,
                        "compil":1,
                        "time":1,
                        "type":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-11-01",
      "lastActivityDate":"2013-11-01",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2940994,
        "displayName":"user2940994",
        "reputation":1
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>i'm not sure if i understand your question but usually in java if you know the class name you can simply write: classname myObject=new classname();</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19726686]-[1766594895]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>i'm not sure if i understand your question but usually in java if you know the class name you can simply write: classname myObject=new classname();</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"name",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"myObject",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"ConstructorCreatorNode",
                        "creatorType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"classname",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "expressionArgs":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "classnam":2,
                    "understand":1,
                    "object":1,
                    "simpli":1,
                    "write":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"classname",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":19726781,
      "questionId":19726617,
      "comments":[
        
      ],
      "creationDate":"2013-11-01",
      "lastActivityDate":"2013-11-01",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If all you have a is a class name, you can use Class.newInstance() but if it doesn't have a default constructor, you can use Unsafe.allocateInstance(). </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19726781]-[1333059509]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If all you have a is a class name, you can use Class.newInstance() but if it doesn't have a default constructor, you can use Unsafe.allocateInstance(). </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"name",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Class",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"newInstance",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Unsafe",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"allocateInstance",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "instanc":2,
                    "unsaf":1,
                    "alloc":1,
                    "constructor":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can use reflection to find a constructor to call, but you don't know which one or what arguments to pass.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[19726781]-[-659366667]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can use reflection to find a constructor to call, but you don't know which one or what arguments to pass.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "constructor":1,
                    "pass":1,
                    "call":1,
                    "reflect":1,
                    "argument":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}