{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":18131827,
    "title":"Java Arrays.sort performance for primitive types and objects",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":26552123,
        "postId":18131827,
        "creationDate":"2013-08-08",
        "score":2,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":8922,
          "displayName":"Sebastian Redl",
          "reputation":24828
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"How exactly is that inconsistent with the expectation? Aside from the indirection for the object costing performance (which makes your benchmark invalid) quick-sort is simply faster than merge-sort."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[18131827-cu26552123]-[355370984]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"How exactly is that inconsistent with the expectation? Aside from the indirection for the object costing performance (which makes your benchmark invalid) quick-sort is simply faster than merge-sort."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "indirect":1,
                      "faster":1,
                      "object":1,
                      "simpli":1,
                      "cost":1,
                      "invalid":1,
                      "expect":1,
                      "merg":1,
                      "perform":1,
                      "make":1,
                      "inconsist":1,
                      "quick":1,
                      "sort":2,
                      "benchmark":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":26552131,
        "postId":18131827,
        "creationDate":"2013-08-08",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":775523,
          "displayName":"dbf",
          "reputation":2976
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"What are you trying to proove?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[18131827-cu26552131]-[45760729]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"What are you trying to proove?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "proov":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":26552136,
        "postId":18131827,
        "creationDate":"2013-08-08",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2607024,
          "displayName":"Zhe",
          "reputation":192
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Doesn't this depend quite a bit on the implementation of the comparators? I assume that the primitive comparator just uses machine integer comparison, but using the Integer object would take more time for a comparison..."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[18131827-cu26552136]-[377100608]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Doesn't this depend quite a bit on the implementation of the comparators? I assume that the primitive comparator just uses machine integer comparison, but using the Integer object would take more time for a comparison..."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "assum":1,
                      "bit":1,
                      "depend":1,
                      "comparison":2,
                      "object":1,
                      "machin":1,
                      "compar":2,
                      "implement":1,
                      "time":1,
                      "primit":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":26552147,
        "postId":18131827,
        "creationDate":"2013-08-08",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":57695,
          "displayName":"Peter Lawrey",
          "reputation":257803
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"More likely you drew an incorrect conclusion. Accessing objects is more expensive than accessing a primitive due to the extra dereference so you would expect it to be slower. Also it is much biggest so less likely to fit in your smaller CPU caches"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[18131827-cu26552147]-[-705521100]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"More likely you drew an incorrect conclusion. Accessing objects is more expensive than accessing a primitive due to the extra dereference so you would expect it to be slower. Also it is much biggest so less likely to fit in your smaller CPU caches"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "due":1,
                      "cach":1,
                      "derefer":1,
                      "fit":1,
                      "biggest":1,
                      "object":1,
                      "conclus":1,
                      "slower":1,
                      "incorrect":1,
                      "expect":1,
                      "cpu":1,
                      "drew":1,
                      "extra":1,
                      "smaller":1,
                      "expens":1,
                      "primit":1,
                      "access":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":26552160,
        "postId":18131827,
        "creationDate":"2013-08-08",
        "score":3,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2415194,
          "displayName":"nachokk",
          "reputation":11704
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"you should use `System.nanoTime()` and should post proper microbenchmark as a [SSCCE](http://www.sscce.org), and primitives comparision should be faster than object creation, accessing etc.."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[18131827-cu26552160]-[698122305]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"you should use `System.nanoTime()` and should post proper microbenchmark as a [SSCCE](http://www.sscce.org), and primitives comparision should be faster than object creation, accessing etc.."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"nanoTime",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "post":1,
                      "faster":1,
                      "system":1,
                      "proper":1,
                      "microbenchmark":1,
                      "nano":1,
                      "creation":1,
                      "object":1,
                      "comparis":1,
                      "time":1,
                      "org":1,
                      "primit":1,
                      "http":1,
                      "sscce":2,
                      "www":1,
                      "access":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "performance"
    ],
    "creationDate":"2013-08-08",
    "lastActivityDate":"2013-08-08",
    "score":2,
    "viewCount":684,
    "owner":{
      "type":"StackOverflowUser",
      "id":411709,
      "displayName":"Abidi",
      "reputation":1245
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I read a few threads here about Arrays.sort using &quot;tuned quick-sort&quot; for primitive types and merge-sort for objects. I did a small test just to prove that but I found is quiet the opposite.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18131827]-[929510051]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I read a few threads here about Arrays.sort using &quot;tuned quick-sort&quot; for primitive types and merge-sort for objects. I did a small test just to prove that but I found is quiet the opposite.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "tune":1,
                  "read":1,
                  "test":1,
                  "prove":1,
                  "quiet":1,
                  "object":1,
                  "small":1,
                  "array":1,
                  "found":1,
                  "thread":1,
                  "opposit":1,
                  "merg":1,
                  "quot":2,
                  "quick":1,
                  "sort":3,
                  "type":1,
                  "primit":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":" int a[] = new int[50000]; //Integer a[] = new Integer[50000]; for(int i=0; i&lt;50000; i++) { //a[i] = new Integer(new Random().nextInt(5000)); a[i] = new Random().nextInt(5000); } System.out.println(System.currentTimeMillis()); Arrays.sort(a); System.out.println(System.currentTimeMillis()); "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[18131827]-[348426223]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":" int a[] = new int[50000]; //"
                },
                {
                  "type":"LocalVariableDeclarationStatementNode",
                  "modifiers":[
                    
                  ],
                  "declarators":{
                    "type":"VariableDeclaratorsNode",
                    "declarators":[
                      {
                        "type":"VariableDeclaratorNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"a",
                          "comments":[
                            
                          ]
                        },
                        "arrayDepth":[
                          {
                            "type":"ArrayDimensionNode",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "assignment":{
                          "type":"VariableAssignmentNode",
                          "variableAssignment":{
                            "type":"VariableExpressionInitNode",
                            "expression":{
                              "type":"ArrayExpressionCreatorNode",
                              "creatorType":{
                                "type":"ReferenceTypeNode",
                                "ids":[
                                  {
                                    "type":"ParameterizedTypeNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"Integer",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "expressionDepth":[
                                {
                                  "type":"DimExpressionNode",
                                  "argument":{
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"IntegerLiteralNode",
                                      "valueRep":"50000"
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "arrayDepth":[
                                
                              ],
                              "comments":[
                                
                              ]
                            }
                          },
                          "comments":[
                            
                          ]
                        },
                        "varType":{
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"Integer",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                },
                {
                  "type":"ForLoopStatementNode",
                  "forControl":{
                    "type":"ForVarControlNode",
                    "variables":{
                      "type":"LocalVariableDeclarationStatementNode",
                      "modifiers":[
                        
                      ],
                      "declarators":{
                        "type":"VariableDeclaratorsNode",
                        "declarators":[
                          {
                            "type":"VariableDeclaratorNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"i",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepth":[
                              
                            ],
                            "assignment":{
                              "type":"VariableAssignmentNode",
                              "variableAssignment":{
                                "type":"VariableExpressionInitNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"IntegerLiteralNode",
                                    "valueRep":"0"
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              },
                              "comments":[
                                
                              ]
                            },
                            "varType":{
                              "type":"PrimitiveTypeNode",
                              "name":"int",
                              "comments":[
                                
                              ]
                            }
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "condition":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"<",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"i",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"IntegerLiteralNode",
                          "valueRep":"50000"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "update":[
                      {
                        "type":"PostfixOperatorExpressionNode",
                        "argument":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"i",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"++",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "statement":{
                    "type":"BlockNode",
                    "statements":[
                      
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      {
                        "text":"//a[i] = new Integer(new Random().nextInt(5000)); a[i] = new Random().nextInt(5000); } System.out.println(System.currentTimeMillis()); Arrays.sort(a); System.out.println(System.currentTimeMillis()); \n"
                      }
                    ]
                  },
                  "labels":[
                    
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":" int a[] = new int[50000]; //Integer a[] = new Integer[50000]; for(int i=0; i<50000; i++) { //a[i] = new Integer(new Random().nextInt(5000)); a[i] = new Random().nextInt(5000); } System.out.println(System.currentTimeMillis()); Arrays.sort(a); System.out.println(System.currentTimeMillis()); \n...\n}",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "random":2,
                  "system":4,
                  "milli":2,
                  "println":2,
                  "array":1,
                  "time":2,
                  "sort":1,
                  "current":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Integer",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"int",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"a",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      {
                        "type":"ArrayDimensionNode",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"ArrayExpressionCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"Integer",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionDepth":[
                            {
                              "type":"DimExpressionNode",
                              "argument":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"IntegerLiteralNode",
                                  "valueRep":"50000"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "arrayDepth":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Integer",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  },
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"i",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ],
                    "assignment":{
                      "type":"VariableAssignmentNode",
                      "variableAssignment":{
                        "type":"VariableExpressionInitNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0"
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "varType":{
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>For primitive type array it took 22ms where as for array with objects it took 98ms. My laptop it i7 with 8 cores and 8GB of RAM. Have I run it incorrectly?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18131827]-[-1295174678]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>For primitive type array it took 22ms where as for array with objects it took 98ms. My laptop it i7 with 8 cores and 8GB of RAM. Have I run it incorrectly?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "ram":1,
                  "run":1,
                  "laptop":1,
                  "object":1,
                  "array":2,
                  "incorrect":1,
                  "type":1,
                  "core":1,
                  "primit":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Many Thanks!</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[18131827]-[760024514]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Many Thanks!</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":18131912,
      "questionId":18131827,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":26554786,
          "postId":18131912,
          "creationDate":"2013-08-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1103872,
            "displayName":"Marko Topolnik",
            "reputation":88730
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"`nanoTime` is but one small problem in OP's na&iuml;ve attempt at benchmarking inside the JVM."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18131912-cu26554786]-[62482923]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"`nanoTime` is but one small problem in OP's na&iuml;ve attempt at benchmarking inside the JVM."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"nanoTime",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "iuml":1,
                        "problem":1,
                        "nano":1,
                        "small":1,
                        "insid":1,
                        "time":1,
                        "attempt":1,
                        "benchmark":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26552911,
          "postId":18131912,
          "creationDate":"2013-08-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":45914,
            "displayName":"Jason",
            "reputation":134017
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Major props to someone with art skills that can make pretty versions of my *primitive* (pun intended!) caveman array artwork."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18131912-cu26552911]-[-1091341017]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Major props to someone with art skills that can make pretty versions of my *primitive* (pun intended!) caveman array artwork."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "art":1,
                        "pun":1,
                        "caveman":1,
                        "pretti":1,
                        "array":1,
                        "intend":1,
                        "version":1,
                        "make":1,
                        "prop":1,
                        "skill":1,
                        "primit":1,
                        "major":1,
                        "artwork":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-08-08",
      "lastActivityDate":"2013-08-08",
      "lastEditDate":"2013-08-08",
      "score":7,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":45914,
        "displayName":"Jason",
        "reputation":134017
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This is not surprising to me at all. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131912]-[479031193]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This is not surprising to me at all. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "surpris":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>First, you have primitives vs. the indirection of needing to chase references down, the comparisons between two primitives will be faster, etc.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131912]-[-504559887]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>First, you have primitives vs. the indirection of needing to chase references down, the comparisons between two primitives will be faster, etc.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "indirect":1,
                    "faster":1,
                    "comparison":1,
                    "chase":1,
                    "need":1,
                    "refer":1,
                    "primit":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Second, a primitive array will play extremely nicely with the CPU cache. A non-primitive array will not necessarily because there is no guarantee that the referenced objects are contiguous in memory (unlikely) and, additionally, the <em>referrent</em> objects are larger which means that <em>less</em> of them can fit in cache at any one time.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131912]-[-946017954]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Second, a primitive array will play extremely nicely with the CPU cache. A non-primitive array will not necessarily because there is no guarantee that the referenced objects are contiguous in memory (unlikely) and, additionally, the <em>referrent</em> objects are larger which means that <em>less</em> of them can fit in cache at any one time.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cach":2,
                    "addit":1,
                    "contigu":1,
                    "play":1,
                    "fit":1,
                    "mean":1,
                    "nice":1,
                    "object":2,
                    "array":2,
                    "guarante":1,
                    "larger":1,
                    "cpu":1,
                    "extrem":1,
                    "referr":1,
                    "necessarili":1,
                    "time":1,
                    "primit":2,
                    "referenc":1,
                    "memori":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>See, in both cases, the values in the <em>arrays</em> will fit in the cache, but the problem with the <code>Integer[]</code> is that you still have to leave the cache and hit the memory bus to chase down the references and find them in main memory; those references could be pointing all over the place on the heap. This is going to make the poor CPU just wait and wait as <em>now</em> cache misses become much more likely. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131912]-[-1022313637]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>See, in both cases, the values in the <em>arrays</em> will fit in the cache, but the problem with the <code>Integer[]</code> is that you still have to leave the cache and hit the memory bus to chase down the references and find them in main memory; those references could be pointing all over the place on the heap. This is going to make the poor CPU just wait and wait as <em>now</em> cache misses become much more likely. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":1,
                    "bus":1,
                    "point":1,
                    "wait":2,
                    "cach":3,
                    "problem":1,
                    "fit":1,
                    "hit":1,
                    "main":1,
                    "leav":1,
                    "miss":1,
                    "code":2,
                    "array":1,
                    "chase":1,
                    "poor":1,
                    "cpu":1,
                    "valu":1,
                    "refer":2,
                    "make":1,
                    "place":1,
                    "heap":1,
                    "case":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>That is, you have this array of primitives like this</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131912]-[-25200066]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>That is, you have this array of primitives like this</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "primit":1,
                    "array":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":" _ _ _ _ _ |5| |7| |2| |1| ... |4| "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[18131912]-[61872834]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":" _ _ _ _ _ |5| |7| |2| |1| ... |4| "
                  }
                ]
              },
              "rawText":" _ _ _ _ _ |5| |7| |2| |1| ... |4| ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>and these all sit next to each other in memory. When one value is pulled into cache from memory, the neighbors get pulled into the cache too. Quicksort and mergesort operate on contiguous sections of the array, so they benefit <em>very</em> much from the CPU cache being nice here (this is <a href=\"http://en.wikipedia.org/wiki/Locality_of_reference\"rel=\"nofollow\">locality of reference</a>)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131912]-[1268611314]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>and these all sit next to each other in memory. When one value is pulled into cache from memory, the neighbors get pulled into the cache too. Quicksort and mergesort operate on contiguous sections of the array, so they benefit <em>very</em> much from the CPU cache being nice here (this is <a href=\"http://en.wikipedia.org/wiki/Locality_of_reference\"rel=\"nofollow\">locality of reference</a>)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "neighbor":1,
                    "cach":3,
                    "sit":1,
                    "contigu":1,
                    "quicksort":1,
                    "local":2,
                    "rel":1,
                    "nice":1,
                    "section":1,
                    "oper":1,
                    "array":1,
                    "wikipedia":1,
                    "nofollow":1,
                    "cpu":1,
                    "refer":2,
                    "pull":2,
                    "wiki":1,
                    "mergesort":1,
                    "benefit":1,
                    "org":1,
                    "href":1,
                    "http":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>But when you have an array of <code>Integer</code> like this</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131912]-[401058886]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>But when you have an array of <code>Integer</code> like this</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "code":2,
                    "array":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":" _ _ |---&gt;|7| ______&gt; |1| _ | _ | _ | | |_| | | ... |_| | | _ | _ |_____ |________&gt;|4| |___&gt;|5| | _ |__&gt;|2| "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[18131912]-[-1791735828]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":" _ _ |--->|7| "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"______",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"> |1| _ | _ | _ | | |_| | | ... |_| | | _ | _ |"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"_____",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" |"
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"________",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":">|4| |___>|5| | _ |__>|2| "
                  }
                ]
              },
              "rawText":" _ _ |--->|7| ______> |1| _ | _ | _ | | |_| | | ... |_| | | _ | _ |_____ |________>|4| |___>|5| | _ |__>|2| ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>the storage locations for the <em>references</em> are contiguous in memory, so <em>they</em> play nicely with the cache. The problem is the *indirection, the possibility of the <em>referrent</em> <code>Integer</code> objects being fragmented in memory and the fact that <em>less</em> of them will fit in the cache. This extra indirection, the fragmentation, and the size issue is what will <em>not</em> play nicely with the cache.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131912]-[595843814]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>the storage locations for the <em>references</em> are contiguous in memory, so <em>they</em> play nicely with the cache. The problem is the *indirection, the possibility of the <em>referrent</em> <code>Integer</code> objects being fragmented in memory and the fact that <em>less</em> of them will fit in the cache. This extra indirection, the fragmentation, and the size issue is what will <em>not</em> play nicely with the cache.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "indirect":2,
                    "cach":3,
                    "size":1,
                    "contigu":1,
                    "problem":1,
                    "play":2,
                    "fit":1,
                    "fragment":2,
                    "issu":1,
                    "nice":2,
                    "possibl":1,
                    "object":1,
                    "code":2,
                    "fact":1,
                    "refer":1,
                    "extra":1,
                    "referr":1,
                    "storag":1,
                    "locat":1,
                    "memori":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Again, for something like quicksort or mergesort which plays on contiguous sections of the array, this is huge, Huge, HUGE and almost surely accounts for the vast majority of the performance difference.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131912]-[-1847636187]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Again, for something like quicksort or mergesort which plays on contiguous sections of the array, this is huge, Huge, HUGE and almost surely accounts for the vast majority of the performance difference.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "huge":3,
                    "sure":1,
                    "contigu":1,
                    "vast":1,
                    "play":1,
                    "differ":1,
                    "quicksort":1,
                    "section":1,
                    "array":1,
                    "perform":1,
                    "account":1,
                    "mergesort":1,
                    "major":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Have I run it incorrectly?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131912]-[532816972]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Have I run it incorrectly?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "blockquot":2,
                    "run":1,
                    "incorrect":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Yes, please use <code>System.nanoTime</code> the next time that you need to do a benchmark. <code>System.currentTimeMillis</code> has terrible resolution and is not good for benchmarking.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131912]-[-1316370947]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Yes, please use <code>System.nanoTime</code> the next time that you need to do a benchmark. <code>System.currentTimeMillis</code> has terrible resolution and is not good for benchmarking.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"System",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"nanoTime",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"System",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"currentTimeMillis",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "terribl":1,
                    "system":2,
                    "good":1,
                    "milli":1,
                    "resolut":1,
                    "nano":1,
                    "code":4,
                    "time":3,
                    "current":1,
                    "benchmark":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":18131929,
      "questionId":18131827,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":26569718,
          "postId":18131929,
          "creationDate":"2013-08-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":411709,
            "displayName":"Abidi",
            "reputation":1245
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Peter I ran it and I got the same result as u did, but why does warming up the code make a difference since objects are not in continuous memory and unlike primitives they need to be accessed through cached references?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18131929-cu26569718]-[-903130735]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Peter I ran it and I got the same result as u did, but why does warming up the code make a difference since objects are not in continuous memory and unlike primitives they need to be accessed through cached references?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Peter",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "unlik":1,
                        "cach":1,
                        "continu":1,
                        "differ":1,
                        "ran":1,
                        "warm":1,
                        "peter":1,
                        "result":1,
                        "object":1,
                        "code":1,
                        "refer":1,
                        "make":1,
                        "primit":1,
                        "access":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26570789,
          "postId":18131929,
          "creationDate":"2013-08-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"It makes a difference to start with because the code is more complicated and difficult to optimise. Later it is slower due to the access to the caches and size of the data. I suspect on the first run, the cost of access is not so much higher, meaning it is code optimised away where is spend most of the time."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18131929-cu26570789]-[-135698324]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"It makes a difference to start with because the code is more complicated and difficult to optimise. Later it is slower due to the access to the caches and size of the data. I suspect on the first run, the cost of access is not so much higher, meaning it is code optimised away where is spend most of the time."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "due":1,
                        "cach":1,
                        "size":1,
                        "spend":1,
                        "higher":1,
                        "optimis":2,
                        "differ":1,
                        "complic":1,
                        "run":1,
                        "data":1,
                        "mean":1,
                        "code":2,
                        "difficult":1,
                        "cost":1,
                        "slower":1,
                        "suspect":1,
                        "make":1,
                        "time":1,
                        "start":1,
                        "access":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26554960,
          "postId":18131929,
          "creationDate":"2013-08-08",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1103872,
            "displayName":"Marko Topolnik",
            "reputation":88730
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"One more point: `quicksort` does no heap allocation, whereas merge/timsort does: hence there will be minor GC's occuring during sorting. That also adds a millisecond or two."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18131929-cu26554960]-[-1039104090]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"One more point: `quicksort` does no heap allocation, whereas merge/timsort does: hence there will be minor GC's occuring during sorting. That also adds a millisecond or two."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "point":1,
                        "alloc":1,
                        "occur":1,
                        "quicksort":1,
                        "timsort":1,
                        "millisecond":1,
                        "merg":1,
                        "heap":1,
                        "sort":1,
                        "add":1,
                        "minor":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26552465,
          "postId":18131929,
          "creationDate":"2013-08-08",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":45914,
            "displayName":"Jason",
            "reputation":134017
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I don't think that this is *quite* right. On 32-bit JVM, `int` and the references in the `Integer[]` have the same size; they'll both consume the same amount of cache. The problem is the indirection and that the references still have to be chased out across the memory bus. Since the allocated objects are not necessarily contiguous, that's where the cache difference comes in."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18131929-cu26552465]-[355729059]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I don't think that this is *quite* right. On 32-bit JVM, `int` and the references in the `Integer[]` have the same size; they'll both consume the same amount of cache. The problem is the indirection and that the references still have to be chased out across the memory bus. Since the allocated objects are not necessarily contiguous, that's where the cache difference comes in."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "consum":1,
                        "jvm":1,
                        "bus":1,
                        "indirect":1,
                        "cach":2,
                        "bit":1,
                        "alloc":1,
                        "size":1,
                        "contigu":1,
                        "problem":1,
                        "differ":1,
                        "amount":1,
                        "object":1,
                        "chase":1,
                        "refer":2,
                        "necessarili":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26552770,
          "postId":18131929,
          "creationDate":"2013-08-08",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Jason even on the 32-bit JVM each Integer has a reference which is 4 bytes, a header which is 12 bytes and a value which is 4 bytes, This is 20 bytes total and every byte matters because they take up space on the cache lines. On a 64 bit JVM, the reference is still 32-bit (Unless you have 32 GB heap or more) but the header is 16 bytes, 4 bytes for the value and 4 bytes padding as the objects are 8 byte aligned. When objects are allocated in the Eden space they are typically continuous in memory. You can see this by using `Unsafe.getInt(array, offset)`"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18131929-cu26552770]-[1283269614]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Jason even on the 32-bit JVM each Integer has a reference which is 4 bytes, a header which is 12 bytes and a value which is 4 bytes, This is 20 bytes total and every byte matters because they take up space on the cache lines. On a 64 bit JVM, the reference is still 32-bit (Unless you have 32 GB heap or more) but the header is 16 bytes, 4 bytes for the value and 4 bytes padding as the objects are 8 byte aligned. When objects are allocated in the Eden space they are typically continuous in memory. You can see this by using `Unsafe.getInt(array, offset)`"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Jason",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"getInt",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":2,
                        "jason":1,
                        "cach":1,
                        "bit":3,
                        "alloc":1,
                        "continu":1,
                        "line":1,
                        "align":1,
                        "total":1,
                        "pad":1,
                        "object":2,
                        "eden":1,
                        "array":1,
                        "offset":1,
                        "space":2,
                        "typic":1,
                        "refer":2,
                        "header":2,
                        "unsaf":1,
                        "matter":1,
                        "heap":1,
                        "byte":7,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26553072,
          "postId":18131929,
          "creationDate":"2013-08-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":45914,
            "displayName":"Jason",
            "reputation":134017
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"But the storage locations in the *array* are just the references. The *referrent objects* have the header and what-not that you describe."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18131929-cu26553072]-[425941707]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"But the storage locations in the *array* are just the references. The *referrent objects* have the header and what-not that you describe."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "object":1,
                        "array":1,
                        "refer":1,
                        "header":1,
                        "referr":1,
                        "storag":1,
                        "describ":1,
                        "locat":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26553315,
          "postId":18131929,
          "creationDate":"2013-08-08",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":57695,
            "displayName":"Peter Lawrey",
            "reputation":257803
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Jason and they all need to be in memory/cache somewhere. You can't sort an array of references without looking at the objects."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18131929-cu26553315]-[-2084808869]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Jason and they all need to be in memory/cache somewhere. You can't sort an array of references without looking at the objects."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Jason",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jason":1,
                        "cach":1,
                        "object":1,
                        "array":1,
                        "refer":1,
                        "sort":1,
                        "memori":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":26553566,
          "postId":18131929,
          "creationDate":"2013-08-08",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":45914,
            "displayName":"Jason",
            "reputation":134017
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I see your point, and I think we're both right. The indirection, the fragmentation, and the larger objects *all* hurt the cache performance."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[18131929-cu26553566]-[-1238236439]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I see your point, and I think we're both right. The indirection, the fragmentation, and the larger objects *all* hurt the cache performance."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "indirect":1,
                        "hurt":1,
                        "point":1,
                        "cach":1,
                        "fragment":1,
                        "object":1,
                        "larger":1,
                        "perform":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2013-08-08",
      "lastActivityDate":"2013-08-08",
      "lastEditDate":"2013-08-08",
      "score":6,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":57695,
        "displayName":"Peter Lawrey",
        "reputation":257803
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Your int[] fits in your L2 cache. It is about 4 B * 50K which is 200 KB and your L2 cache is 256 KB. This will run much faster than your Object[] which will be in your L3 cache as it is about 28 B * 50K or 1400 KB in size.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131929]-[254943269]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Your int[] fits in your L2 cache. It is about 4 B * 50K which is 200 KB and your L2 cache is 256 KB. This will run much faster than your Object[] which will be in your L3 cache as it is about 28 B * 50K or 1400 KB in size.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "faster":1,
                    "cach":3,
                    "size":1,
                    "fit":1,
                    "run":1,
                    "object":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The L2 cache (~11 clock cycles) is about 4-6x faster than your L3 cache (~45 - 75 clock cycles)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131929]-[637690614]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The L2 cache (~11 clock cycles) is about 4-6x faster than your L3 cache (~45 - 75 clock cycles)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "cycl":2,
                    "faster":1,
                    "clock":2,
                    "cach":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I bet if you ran this more than once you would get a better result as the code warms up.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131929]-[-1973772698]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I bet if you ran this more than once you would get a better result as the code warms up.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "bet":1,
                    "ran":1,
                    "warm":1,
                    "result":1,
                    "code":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public static void test_int_array() { int a[] = new int[50000]; //Integer a[] = new Integer[50000]; Random random = new Random(); for (int i = 0; i &lt; 50000; i++) { //a[i] = new Integer(new Random().nextInt(5000)); a[i] = random.nextInt(5000); } long start = System.nanoTime(); Arrays.sort(a); long time = System.nanoTime() - start; System.out.printf(&quot;int[] sort took %.1f ms%n&quot;, time / 1e6); } public static void test_Integer_array() { Integer a[] = new Integer[50000]; Random random = new Random(); for (int i = 0; i &lt; 50000; i++) { a[i] = random.nextInt(5000); } long start = System.nanoTime(); Arrays.sort(a); long time = System.nanoTime() - start; System.out.printf(&quot;Integer[] sort took %.1f ms%n&quot;, time / 1e6); } public static void main(String... ignored) { for (int i = 0; i &lt; 10; i++) { if (test_int_array()[0] &gt; 0) throw new AssertionError(); if (test_Integer_array()[0] &gt; 0) throw new AssertionError(); } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[18131929]-[-600365491]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"public",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"KeywordModifierNode",
                        "value":"static",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"test_int_array",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"a",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  {
                                    "type":"ArrayDimensionNode",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"ArrayExpressionCreatorNode",
                                      "creatorType":{
                                        "type":"PrimitiveTypeNode",
                                        "name":"int",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "expressionDepth":[
                                        {
                                          "type":"DimExpressionNode",
                                          "argument":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"IntegerLiteralNode",
                                              "valueRep":"50000"
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "arrayDepth":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"PrimitiveTypeNode",
                                  "name":"int",
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            {
                              "text":"//Integer a[] = new Integer[50000]; Random random = new Random(); for (int i = 0; i < 50000; i++) { //a[i] = new Integer(new Random().nextInt(5000)); a[i] = random.nextInt(5000); } long start = System.nanoTime(); Arrays.sort(a); long time = System.nanoTime() - start; System.out.printf(\"int[] sort took %.1f ms%n\", time / 1e6); } public static void test_Integer_array() { Integer a[] = new Integer[50000]; Random random = new Random(); for (int i = 0; i < 50000; i++) { a[i] = random.nextInt(5000); } long start = System.nanoTime(); Arrays.sort(a); long time = System.nanoTime() - start; System.out.printf(\"Integer[] sort took %.1f ms%n\", time / 1e6); } public static void main(String... ignored) { for (int i = 0; i < 10; i++) { if (test_int_array()[0] > 0) throw new AssertionError(); if (test_Integer_array()[0] > 0) throw new AssertionError(); } } \n"
                            }
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"public static void test_int_array() { int a[] = new int[50000]; //Integer a[] = new Integer[50000]; Random random = new Random(); for (int i = 0; i < 50000; i++) { //a[i] = new Integer(new Random().nextInt(5000)); a[i] = random.nextInt(5000); } long start = System.nanoTime(); Arrays.sort(a); long time = System.nanoTime() - start; System.out.printf(\"int[] sort took %.1f ms%n\", time / 1e6); } public static void test_Integer_array() { Integer a[] = new Integer[50000]; Random random = new Random(); for (int i = 0; i < 50000; i++) { a[i] = random.nextInt(5000); } long start = System.nanoTime(); Arrays.sort(a); long time = System.nanoTime() - start; System.out.printf(\"Integer[] sort took %.1f ms%n\", time / 1e6); } public static void main(String... ignored) { for (int i = 0; i < 10; i++) { if (test_int_array()[0] > 0) throw new AssertionError(); if (test_Integer_array()[0] > 0) throw new AssertionError(); } } \n...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "assert":2,
                    "test":4,
                    "random":9,
                    "system":6,
                    "main":1,
                    "nano":4,
                    "array":6,
                    "printf":2,
                    "error":2,
                    "time":8,
                    "sort":4,
                    "start":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"int",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"a",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        {
                          "type":"ArrayDimensionNode",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"ArrayExpressionCreatorNode",
                            "creatorType":{
                              "type":"PrimitiveTypeNode",
                              "name":"int",
                              "comments":[
                                
                              ]
                            },
                            "expressionDepth":[
                              {
                                "type":"DimExpressionNode",
                                "argument":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"IntegerLiteralNode",
                                    "valueRep":"50000"
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "arrayDepth":[
                              
                            ],
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"int",
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>prints</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131929]-[1561833329]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>prints</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "print":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"int[] sort took 32.1 ms Integer[] sort took 104.1 ms int[] sort took 4.0 ms Integer[] sort took 83.8 ms int[] sort took 33.4 ms Integer[] sort took 76.7 ms int[] sort took 4.4 ms Integer[] sort took 40.5 ms int[] sort took 3.8 ms Integer[] sort took 17.4 ms int[] sort took 4.7 ms Integer[] sort took 22.4 ms int[] sort took 4.4 ms Integer[] sort took 12.1 ms int[] sort took 3.7 ms Integer[] sort took 11.2 ms int[] sort took 3.9 ms Integer[] sort took 10.7 ms int[] sort took 3.6 ms Integer[] sort took 11.9 ms "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[18131929]-[-1877796104]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"int[] sort took 32.1 ms Integer[] sort took 104.1 ms int[] sort took 4.0 ms Integer[] sort took 83.8 ms int[] sort took 33.4 ms Integer[] sort took 76.7 ms int[] sort took 4.4 ms Integer[] sort took 40.5 ms int[] sort took 3.8 ms Integer[] sort took 17.4 ms int[] sort took 4.7 ms Integer[] sort took 22.4 ms int[] sort took 4.4 ms Integer[] sort took 12.1 ms int[] sort took 3.7 ms Integer[] sort took 11.2 ms int[] sort took 3.9 ms Integer[] sort took 10.7 ms int[] sort took 3.6 ms Integer[] sort took 11.9 ms "
                  }
                ]
              },
              "rawText":"int[] sort took 32.1 ms Integer[] sort took 104.1 ms int[] sort took 4.0 ms Integer[] sort took 83.8 ms int[] sort took 33.4 ms Integer[] sort took 76.7 ms int[] sort took 4.4 ms Integer[] sort took 40.5 ms int[] sort took 3.8 ms Integer[] sort took 17.4 ms int[] sort took 4.7 ms Integer[] sort took 22.4 ms int[] sort took 4.4 ms Integer[] sort took 12.1 ms int[] sort took 3.7 ms Integer[] sort took 11.2 ms int[] sort took 3.9 ms Integer[] sort took 10.7 ms int[] sort took 3.6 ms Integer[] sort took 11.9 ms ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "sort":20
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You can see how much difference warming up the code can make.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131929]-[-912200697]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You can see how much difference warming up the code can make.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "warm":1,
                    "code":1,
                    "differ":1,
                    "make":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":18131996,
      "questionId":18131827,
      "comments":[
        
      ],
      "creationDate":"2013-08-08",
      "lastActivityDate":"2013-08-08",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":535871,
        "displayName":"Ted Hopp",
        "reputation":130000
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>Have I run it incorrectly?</p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131996]-[532816972]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>Have I run it incorrectly?</p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "blockquot":2,
                    "run":1,
                    "incorrect":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Your benchmarking is quite primitive and it doesn't really establish anything. How does sorting time grow with array size for each case? How much of the difference between primitive sorting and object sorting can be attributed to the different costs of comparing primitives vs. comparing objects? (This would be independent of the performance of the sorting algorithm, but would be attributed to the sorting algorithm by your test.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131996]-[-1589546506]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Your benchmarking is quite primitive and it doesn't really establish anything. How does sorting time grow with array size for each case? How much of the difference between primitive sorting and object sorting can be attributed to the different costs of comparing primitives vs. comparing objects? (This would be independent of the performance of the sorting algorithm, but would be attributed to the sorting algorithm by your test.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":1,
                    "size":1,
                    "differ":1,
                    "establish":1,
                    "object":2,
                    "attribut":2,
                    "array":1,
                    "independ":1,
                    "algorithm":2,
                    "cost":1,
                    "grow":1,
                    "compar":2,
                    "perform":1,
                    "time":1,
                    "sort":5,
                    "primit":3,
                    "benchmark":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>As others have noted, if you are timing things that take on the order of tens of milliseconds, you should be using <code>System.nanoTime</code>; <code>System.currentTimeMillis</code> often has a resolution no better than 10 ms. Simply switching your timing technology, however, won't solve the more serious problems with your tests.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[18131996]-[620497789]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>As others have noted, if you are timing things that take on the order of tens of milliseconds, you should be using <code>System.nanoTime</code>; <code>System.currentTimeMillis</code> often has a resolution no better than 10 ms. Simply switching your timing technology, however, won't solve the more serious problems with your tests.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"System",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"nanoTime",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"System",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"currentTimeMillis",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "solv":1,
                    "test":1,
                    "switch":1,
                    "system":2,
                    "problem":1,
                    "milli":1,
                    "thing":1,
                    "resolut":1,
                    "nano":1,
                    "code":4,
                    "millisecond":1,
                    "simpli":1,
                    "note":1,
                    "order":1,
                    "ten":1,
                    "time":4,
                    "current":1,
                    "technolog":1,
                    "won":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}