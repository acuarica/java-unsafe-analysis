{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":3438854,
    "title":"Replace Unicode Control Characters",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":3583045,
        "postId":3438854,
        "creationDate":"2010-08-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":128662,
          "displayName":"Cyril Gandon",
          "reputation":9323
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I can replace manually all the character that are not valid. The problem is that I don't know all the list (and I don't want to test one by one), and I don't want to do a replaceAll for each of the invalid character neither"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3438854-cu3583045]-[144842318]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I can replace manually all the character that are not valid. The problem is that I don't know all the list (and I don't want to test one by one), and I don't want to do a replaceAll for each of the invalid character neither"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"replaceAll",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "test":1,
                      "charact":2,
                      "problem":1,
                      "replac":2,
                      "invalid":1,
                      "valid":1,
                      "manual":1,
                      "list":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":3582922,
        "postId":3438854,
        "creationDate":"2010-08-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":338004,
          "displayName":"jowierun",
          "reputation":4352
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"can you manually get rid of the %C2%8F part of your URL to see if that URL is valid?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[3438854-cu3582922]-[401289984]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"can you manually get rid of the %C2%8F part of your URL to see if that URL is valid?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "rid":1,
                      "url":2,
                      "valid":1,
                      "part":1,
                      "manual":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "regex",
      "google-maps",
      "unicode",
      "character-properties"
    ],
    "creationDate":"2010-08-09",
    "lastActivityDate":"2012-11-22",
    "lastEditDate":"2012-11-22",
    "score":3,
    "viewCount":8113,
    "owner":{
      "type":"StackOverflowUser",
      "id":128662,
      "displayName":"Cyril Gandon",
      "reputation":9323
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I need to replace all special control character in a string in Java.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3438854]-[-1616154001]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I need to replace all special control character in a string in Java.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "charact":1,
                  "special":1,
                  "replac":1,
                  "control":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I want to ask the Google maps API v3, and Google doesn't seems to like these characters.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3438854]-[1625436550]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I want to ask the Google maps API v3, and Google doesn't seems to like these characters.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "charact":1,
                  "googl":2,
                  "api":1,
                  "map":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Example: <a href=\"http://www.google.com/maps/api/geocode/json?sensor=false&amp;address=NEW%20YORK%C2%8F\"rel=\"nofollow\">http://www.google.com/maps/api/geocode/json?sensor=false&amp;address=NEW%20YORK%C2%8F</a></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3438854]-[1429321100]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Example: <a href=\"http://www.google.com/maps/api/geocode/json?sensor=false&amp;address=NEW%20YORK%C2%8F\"rel=\"nofollow\">http://www.google.com/maps/api/geocode/json?sensor=false&amp;address=NEW%20YORK%C2%8F</a></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "googl":2,
                  "map":2,
                  "json":2,
                  "rel":1,
                  "geocod":2,
                  "amp":2,
                  "sensor":2,
                  "nofollow":1,
                  "address":2,
                  "fals":2,
                  "api":2,
                  "href":1,
                  "http":2,
                  "www":2,
                  "york":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>This URL contains this character: <a href=\"http://www.fileformat.info/info/unicode/char/008f/index.htm\"rel=\"nofollow\">http://www.fileformat.info/info/unicode/char/008f/index.htm</a></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3438854]-[1865732141]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>This URL contains this character: <a href=\"http://www.fileformat.info/info/unicode/char/008f/index.htm\"rel=\"nofollow\">http://www.fileformat.info/info/unicode/char/008f/index.htm</a></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "htm":2,
                  "fileformat":2,
                  "charact":1,
                  "url":1,
                  "rel":1,
                  "info":4,
                  "nofollow":1,
                  "unicod":2,
                  "href":1,
                  "http":2,
                  "index":2,
                  "www":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>So I receive some data, and I need to geocode this data. I know some character would not pass the geocoding, but I don't know the exact list.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3438854]-[1871154021]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>So I receive some data, and I need to geocode this data. I know some character would not pass the geocoding, but I don't know the exact list.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "receiv":1,
                  "charact":1,
                  "data":2,
                  "geocod":2,
                  "exact":1,
                  "pass":1,
                  "list":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I was not able to find any documentation about this issue, so I think the list of characters that Google doesn't like is this one: <a href=\"http://www.fileformat.info/info/unicode/category/Cc/list.htm\"rel=\"nofollow\">http://www.fileformat.info/info/unicode/category/Cc/list.htm</a></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3438854]-[1242526455]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I was not able to find any documentation about this issue, so I think the list of characters that Google doesn't like is this one: <a href=\"http://www.fileformat.info/info/unicode/category/Cc/list.htm\"rel=\"nofollow\">http://www.fileformat.info/info/unicode/category/Cc/list.htm</a></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "htm":2,
                  "fileformat":2,
                  "find":1,
                  "charact":1,
                  "googl":1,
                  "document":1,
                  "rel":1,
                  "issu":1,
                  "categori":2,
                  "info":4,
                  "nofollow":1,
                  "unicod":2,
                  "href":1,
                  "http":2,
                  "list":3,
                  "www":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is there any already built function to get rid of these characters, or do I have to build a new one, with a replace one by one?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3438854]-[-882247795]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is there any already built function to get rid of these characters, or do I have to build a new one, with a replace one by one?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "rid":1,
                  "charact":1,
                  "built":1,
                  "build":1,
                  "replac":1,
                  "function":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Or is there a good regexp to do the job done?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3438854]-[-875894326]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Or is there a good regexp to do the job done?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "job":1,
                  "regexp":1,
                  "good":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>And does somebody know which exact list of characters Google doesn't like?</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3438854]-[196952656]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>And does somebody know which exact list of characters Google doesn't like?</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "googl":1,
                  "charact":1,
                  "list":1,
                  "exact":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Edit : Google have create a webpage for this :</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3438854]-[-1285933203]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Edit : Google have create a webpage for this :</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "googl":1,
                  "edit":1,
                  "creat":1,
                  "webpag":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><a href=\"https://developers.google.com/maps/documentation/webservices/?hl=fr#BuildingURLs\"rel=\"nofollow\">https://developers.google.com/maps/documentation/webservices/?hl=fr#BuildingURLs</a></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[3438854]-[43122796]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><a href=\"https://developers.google.com/maps/documentation/webservices/?hl=fr#BuildingURLs\"rel=\"nofollow\">https://developers.google.com/maps/documentation/webservices/?hl=fr#BuildingURLs</a></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"BuildingURLs",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "googl":2,
                  "map":2,
                  "url":2,
                  "webservic":2,
                  "document":2,
                  "rel":1,
                  "build":2,
                  "https":2,
                  "nofollow":1,
                  "href":1,
                  "develop":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"BuildingURLs",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":3439206,
      "questionId":3438854,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":3583819,
          "postId":3439206,
          "creationDate":"2010-08-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":128662,
            "displayName":"Cyril Gandon",
            "reputation":9323
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The problem is that I am goign to use chinese, arabic, all the utf-8 character possible :) I will try with p{Cc} !!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3439206-cu3583819]-[-837403514]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The problem is that I am goign to use chinese, arabic, all the utf-8 character possible :) I will try with p{Cc} !!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "charact":1,
                        "problem":1,
                        "goign":1,
                        "utf":1,
                        "chines":1,
                        "arab":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3586016,
          "postId":3439206,
          "creationDate":"2010-08-09",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":157882,
            "displayName":"BalusC",
            "reputation":548029
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Oh, `\\p{Cc}`, one more [undocumented](http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html) pattern expression. Nice one. Good to know."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3439206-cu3586016]-[-211563906]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Oh, `\\p{Cc}`, one more [undocumented](http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html) pattern expression. Nice one. Good to know."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "regex":1,
                        "util":1,
                        "pattern":2,
                        "good":1,
                        "oracl":1,
                        "nice":1,
                        "doc":1,
                        "undocu":1,
                        "javas":1,
                        "express":1,
                        "api":1,
                        "html":1,
                        "http":1,
                        "download":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3584123,
          "postId":3439206,
          "creationDate":"2010-08-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":276101,
            "displayName":"polygenelubricants",
            "reputation":155260
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Scorpi0: the above are just examples. Find whatever Unicode category/block you want to black/white-list and compose the regex as you wish using elements shown here."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3439206-cu3584123]-[-268172160]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Scorpi0: the above are just examples. Find whatever Unicode category/block you want to black/white-list and compose the regex as you wish using elements shown here."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Scorpi0",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "regex":1,
                        "find":1,
                        "compos":1,
                        "exampl":1,
                        "categori":1,
                        "element":1,
                        "block":1,
                        "black":1,
                        "shown":1,
                        "scorpi":1,
                        "unicod":1,
                        "white":1,
                        "list":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3586289,
          "postId":3439206,
          "creationDate":"2010-08-09",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":276101,
            "displayName":"polygenelubricants",
            "reputation":155260
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@BalusC: I'm no Unicode expert, but I think it is documented: &quot;Categories may be specified with the optional prefix `Is`: Both `\\p{L}` and `\\p{IsL}` denote the category of Unicode letters. &quot;. Replace `L` with `Cc`, or any other category name."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3439206-cu3586289]-[1363098082]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@BalusC: I'm no Unicode expert, but I think it is documented: &quot;Categories may be specified with the optional prefix `Is`: Both `\\p{L}` and `\\p{IsL}` denote the category of Unicode letters. &quot;. Replace `L` with `Cc`, or any other category name."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"BalusC",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "document":1,
                        "prefix":1,
                        "option":1,
                        "categori":3,
                        "letter":1,
                        "expert":1,
                        "replac":1,
                        "denot":1,
                        "quot":2,
                        "balus":1,
                        "unicod":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":3586333,
          "postId":3439206,
          "creationDate":"2010-08-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":157882,
            "displayName":"BalusC",
            "reputation":548029
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Oh, it works that way! Thank you, regex expert :)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3439206-cu3586333]-[1713012970]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Oh, it works that way! Thank you, regex expert :)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "work":1,
                        "expert":1,
                        "regex":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":19152068,
          "postId":3439206,
          "creationDate":"2012-12-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":7748,
            "displayName":"gnobal",
            "reputation":8714
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"With Oracle Java 1.6.0_29 on Linux, &quot;\\\\p{Cc}&quot; didn't work for me but &quot;\\\\p{C}&quot; did (without the lowercase &quot;c&quot;). I have no idea why"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[3439206-cu19152068]-[-85990496]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"With Oracle Java 1.6.0_29 on Linux, &quot;\\\\p{Cc}&quot; didn't work for me but &quot;\\\\p{C}&quot; did (without the lowercase &quot;c&quot;). I have no idea why"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "lowercas":1,
                        "idea":1,
                        "oracl":1,
                        "work":1,
                        "linux":1,
                        "quot":6
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-08-09",
      "lastActivityDate":"2010-08-09",
      "lastEditDate":"2010-08-09",
      "score":6,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":276101,
        "displayName":"polygenelubricants",
        "reputation":155260
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If you want to delete all characters in Other/Control Unicode category, you can do something like this:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3439206]-[785329501]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If you want to delete all characters in Other/Control Unicode category, you can do something like this:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "charact":1,
                    "delet":1,
                    "categori":1,
                    "control":1,
                    "unicod":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":" System.out.println( &quot;a\\u0000b\\u0007c\\u008fd&quot;.replaceAll(&quot;\\\\p{Cc}&quot;, &quot;&quot;) ); // abcd "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[3439206]-[-1680346744]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":" "
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":".",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"a\\u0000b\\u0007c\\u008fd\""
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"replaceAll",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"\\\\p{Cc}\""
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      {
                        "text":"// abcd \n"
                      }
                    ]
                  }
                ]
              },
              "rawText":" Systemoutprintln( \"a\\u0000b\\u0007c\\u008fd\".replaceAll(\"\\\\p{Cc}\", \"\") ); // abcd \n",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "systemoutprintln":1,
                    "replac":1,
                    "abcd":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":".",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"StringLiteralNode",
                                "valueRep":"\"a\\u0000b\\u0007c\\u008fd\""
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"replaceAll",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"\\\\p{Cc}\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        {
                          "text":"// abcd \n"
                        }
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"replaceAll",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"\\\\p{Cc}\""
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Note that this actually removes (among others) <code>'\\u008f'</code> Unicode character from the string, not the escaped form <code>&quot;%8F&quot;</code> string.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3439206]-[-1165427714]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Note that this actually removes (among others) <code>'\\u008f'</code> Unicode character from the string, not the escaped form <code>&quot;%8F&quot;</code> string.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "remov":1,
                    "charact":1,
                    "escap":1,
                    "code":4,
                    "note":1,
                    "quot":2,
                    "unicod":1,
                    "form":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If the blacklist is not nicely captured by one Unicode block/category, Java does have a powerful character class arithmetics featuring intersection, subtraction, etc that you can use. Alternatively you can also use a negated whitelist approach, i.e. instead of explicitly specifying what characters are illegal, you specify what are legal, and everything else then becomes illegal.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3439206]-[-450969961]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If the blacklist is not nicely captured by one Unicode block/category, Java does have a powerful character class arithmetics featuring intersection, subtraction, etc that you can use. Alternatively you can also use a negated whitelist approach, i.e. instead of explicitly specifying what characters are illegal, you specify what are legal, and everything else then becomes illegal.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"arithmetics",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "blacklist":1,
                    "negat":1,
                    "charact":2,
                    "intersect":1,
                    "subtract":1,
                    "nice":1,
                    "altern":1,
                    "categori":1,
                    "block":1,
                    "legal":1,
                    "arithmet":1,
                    "captur":1,
                    "illeg":2,
                    "approach":1,
                    "whitelist":1,
                    "unicod":1,
                    "featur":1,
                    "power":1,
                    "explicit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<h3>API links</h3>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3439206]-[-1601052380]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<h3>API links</h3>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "link":1,
                    "api":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<ul> \n <li><a href=\"http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html\"><code>java.util.regex.Pattern</code></a></li> \n <li><a href=\"http://www.regular-expressions.info/charclass.html\">regular-expressions.info/Character Class</a></li> \n</ul>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3439206]-[-380568438]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<ul> \n <li><a href=\"http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html\"><code>java.util.regex.Pattern</code></a></li> \n <li><a href=\"http://www.regular-expressions.info/charclass.html\">regular-expressions.info/Character Class</a></li> \n</ul>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"java",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"util",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"regex",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Pattern",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "regex":2,
                    "charact":1,
                    "util":2,
                    "pattern":2,
                    "oracl":1,
                    "regular":2,
                    "doc":1,
                    "info":2,
                    "code":2,
                    "javas":1,
                    "express":2,
                    "charclass":1,
                    "api":1,
                    "html":2,
                    "href":2,
                    "http":2,
                    "download":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"java",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"util",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"regex",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Pattern",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<hr />"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3439206]-[1817223689]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<hr />"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<h3>Examples</h3>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3439206]-[-815206400]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<h3>Examples</h3>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "exampl":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here's a subtraction example:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3439206]-[-478185674]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here's a subtraction example:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "subtract":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":" System.out.println( &quot;regular expressions: now you have two problems!!&quot; .replaceAll(&quot;[a-z&amp;&amp;[^aeiou]]&quot;, &quot;_&quot;) ); // _e_u_a_ e___e__io__: _o_ _ou _a_e __o __o__e__!! "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[3439206]-[1773911469]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":" "
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":".",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"regular expressions: now you have two problems!!\""
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"replaceAll",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"[a-z&&[^aeiou]]\""
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"_\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      {
                        "text":"// _e_u_a_ e___e__io__: _o_ _ou _a_e __o __o__e__!! \n"
                      }
                    ]
                  }
                ]
              },
              "rawText":" Systemoutprintln( \"regular expressions: now you have two problems!!\".replaceAll(\"[a-z&&[^aeiou]]\", \"_\") ); // _e_u_a_ e___e__io__: _o_ _ou _a_e __o __o__e__!! \n",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aeiou":1,
                    "problem":1,
                    "regular":1,
                    "replac":1,
                    "express":1,
                    "systemoutprintln":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":".",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"StringLiteralNode",
                                "valueRep":"\"regular expressions: now you have two problems!!\""
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"replaceAll",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"[a-z&&[^aeiou]]\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"_\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        {
                          "text":"// _e_u_a_ e___e__io__: _o_ _ou _a_e __o __o__e__!! \n"
                        }
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"replaceAll",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"[a-z&&[^aeiou]]\""
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"_\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The <code>[\u2026]</code> is a <a href=\"http://www.regular-expressions.info/charclass.html\"><em>character class</em></a>. Something like <code>[aeiou]</code> matches one of any of the lowercase vowels. <code>[^\u2026]</code> is a <em>negated</em> character class. <code>[^aeiou]</code> matches one of <em>anything but</em> the lowercase vowels.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3439206]-[-1248402148]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The <code>[\u2026]</code> is a <a href=\"http://www.regular-expressions.info/charclass.html\"><em>character class</em></a>. Something like <code>[aeiou]</code> matches one of any of the lowercase vowels. <code>[^\u2026]</code> is a <em>negated</em> character class. <code>[^aeiou]</code> matches one of <em>anything but</em> the lowercase vowels.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "negat":1,
                    "charact":2,
                    "vowel":2,
                    "aeiou":2,
                    "lowercas":2,
                    "regular":1,
                    "info":1,
                    "match":2,
                    "code":8,
                    "express":1,
                    "charclass":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "www":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><code>[a-z&amp;&amp;[^aeiou]]</code> matches <code>[a-z]</code> subtracted by <code>[aeiou]</code>, i.e. all lowercase consonants.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3439206]-[-803612421]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><code>[a-z&amp;&amp;[^aeiou]]</code> matches <code>[a-z]</code> subtracted by <code>[aeiou]</code>, i.e. all lowercase consonants.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "subtract":1,
                    "aeiou":2,
                    "lowercas":1,
                    "amp":2,
                    "match":1,
                    "code":6,
                    "conson":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The next example shows the negated whitelist approach:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3439206]-[-118841639]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The next example shows the negated whitelist approach:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "approach":1,
                    "negat":1,
                    "whitelist":1,
                    "show":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":" System.out.println( &quot;regular expressions: now you have two problems!!&quot; .replaceAll(&quot;[^a-z]&quot;, &quot;_&quot;) ); // regular_expressions__now_you_have_two_problems__ "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[3439206]-[710572566]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":" "
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":".",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"regular expressions: now you have two problems!!\""
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"replaceAll",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"[^a-z]\""
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"StringLiteralNode",
                                    "valueRep":"\"_\""
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      {
                        "text":"// regular_expressions__now_you_have_two_problems__ \n"
                      }
                    ]
                  }
                ]
              },
              "rawText":" Systemoutprintln( \"regular expressions: now you have two problems!!\".replaceAll(\"[^a-z]\", \"_\") ); // regular_expressions__now_you_have_two_problems__ \n",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "problem":2,
                    "regular":2,
                    "replac":1,
                    "express":2,
                    "systemoutprintln":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":".",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"LiteralNode",
                              "node":{
                                "type":"StringLiteralNode",
                                "valueRep":"\"regular expressions: now you have two problems!!\""
                              },
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"replaceAll",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"[^a-z]\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"_\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        {
                          "text":"// regular_expressions__now_you_have_two_problems__ \n"
                        }
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"replaceAll",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"[^a-z]\""
                            },
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"_\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Only lowercase letters <code>a-z</code> are legal; everything else is illegal.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[3439206]-[632074898]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Only lowercase letters <code>a-z</code> are legal; everything else is illegal.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "lowercas":1,
                    "code":2,
                    "letter":1,
                    "legal":1,
                    "illeg":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}