{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":9737266,
    "title":"Why do I need to return a value in a Java method, even if I always throw an Exception?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":12383005,
        "postId":9737266,
        "creationDate":"2012-03-16",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":179850,
          "displayName":"Gray",
          "reputation":63324
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"FYI: Eclipse does the same thing."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[9737266-cu12383005]-[2081598201]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"FYI: Eclipse does the same thing."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "thing":1,
                      "eclips":1,
                      "fyi":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "exception",
      "exception-handling"
    ],
    "creationDate":"2012-03-16",
    "lastActivityDate":"2012-03-16",
    "score":1,
    "viewCount":203,
    "owner":{
      "type":"StackOverflowUser",
      "id":20962,
      "displayName":"Nicolai",
      "reputation":1360
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Why doesn't the following code compile:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9737266]-[2051610845]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Why doesn't the following code compile:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "code":1,
                  "compil":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":" @Test public boolean testException() throws MyException { try { System.out.println(&quot;Try some resource, which may throw an exception&quot;); return resource.getSomething(); } catch (Exception e) { logAndThrowSpecificException(e); } finally { System.out.println(&quot;Clean up&quot;); } } private void logAndThrowSpecificException(Exception e) throws MyException { throw new MyException(&quot;Checked exception&quot;, e); } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[9737266]-[990304809]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"TextFragmentNode",
                  "text":" "
                },
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Test",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"KeywordModifierNode",
                      "value":"public",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "returnType":{
                    "type":"PrimitiveTypeNode",
                    "name":"boolean",
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"testException",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "thrownExceptions":{
                    "type":"ThrownExceptionsNode",
                    "qualifiedIdentifierList":{
                      "type":"QualifiedIdentifierListNode",
                      "qualifiedNames":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"MyException",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "body":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"TryCatchStatementNode",
                        "block":{
                          "type":"BlockNode",
                          "statements":[
                            {
                              "type":"ExpressionStatement",
                              "expression":{
                                "type":"MethodInvocationNode",
                                "qualifiedIdentifier":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"System",
                                      "comments":[
                                        
                                      ]
                                    },
                                    {
                                      "type":"IdentifierNode",
                                      "name":"out",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"println",
                                  "comments":[
                                    
                                  ]
                                },
                                "args":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    {
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"StringLiteralNode",
                                        "valueRep":"\"Try some resource, which may throw an exception\""
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ]
                            },
                            {
                              "type":"ReturnStatementNode",
                              "expression":{
                                "type":"MethodInvocationNode",
                                "qualifiedIdentifier":{
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"resource",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"getSomething",
                                  "comments":[
                                    
                                  ]
                                },
                                "args":{
                                  "type":"ExpressionListNode",
                                  "arguments":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "catches":[
                          {
                            "type":"CatchClauseNode",
                            "modifiers":[
                              
                            ],
                            "catchType":{
                              "type":"CatchTypeNode",
                              "identifiers":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"Exception",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"e",
                              "comments":[
                                
                              ]
                            },
                            "block":{
                              "type":"BlockNode",
                              "statements":[
                                {
                                  "type":"ExpressionStatement",
                                  "expression":{
                                    "type":"MethodInvocationNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"logAndThrowSpecificException",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "args":{
                                      "type":"ExpressionListNode",
                                      "arguments":[
                                        {
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"e",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                }
                              ],
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "finallyBlock":{
                          "type":"FinallyBlockNode",
                          "block":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"MethodInvocationNode",
                                  "qualifiedIdentifier":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"System",
                                        "comments":[
                                          
                                        ]
                                      },
                                      {
                                        "type":"IdentifierNode",
                                        "name":"out",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"println",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "args":{
                                    "type":"ExpressionListNode",
                                    "arguments":[
                                      {
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"StringLiteralNode",
                                          "valueRep":"\"Clean up\""
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                },
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"private",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "returnType":{
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"logAndThrowSpecificException",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "parameters":{
                      "type":"FormalParameterDeclsNode",
                      "modifiers":[
                        
                      ],
                      "parameterType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Exception",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "nextDeclarator":{
                        "type":"AdditionalFormalParameterDeclNode",
                        "variableDeclarator":{
                          "type":"VariableDeclaratorNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"e",
                            "comments":[
                              
                            ]
                          },
                          "arrayDepth":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    },
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "thrownExceptions":{
                    "type":"ThrownExceptionsNode",
                    "qualifiedIdentifierList":{
                      "type":"QualifiedIdentifierListNode",
                      "qualifiedNames":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"MyException",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  "body":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"ThrowStatementNode",
                        "expression":{
                          "type":"ConstructorCreatorNode",
                          "creatorType":{
                            "type":"ReferenceTypeNode",
                            "ids":[
                              {
                                "type":"ParameterizedTypeNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"MyException",
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "expressionArgs":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"LiteralNode",
                                "node":{
                                  "type":"StringLiteralNode",
                                  "valueRep":"\"Checked exception\""
                                },
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"e",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":" @Test public boolean testException() throws MyException { try { System.out.println(\"Try some resource, which may throw an exception\"); return resource.getSomething(); } catch (Exception e) { logAndThrowSpecificException(e); } finally { System.out.println(\"Clean up\"); } } private void logAndThrowSpecificException(Exception e) throws MyException { throw new MyException(\"Checked exception\", e); } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "test":2,
                  "system":2,
                  "clean":1,
                  "resourc":2,
                  "println":2,
                  "check":1,
                  "specif":2,
                  "log":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Exception",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"MyException",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"boolean",
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"PrimitiveTypeNode",
                    "name":"void",
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"Try some resource, which may throw an exception\""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"resource",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"getSomething",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"logAndThrowSpecificException",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"e",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodInvocationNode",
                    "qualifiedIdentifier":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"System",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"out",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"println",
                      "comments":[
                        
                      ]
                    },
                    "args":{
                      "type":"ExpressionListNode",
                      "arguments":[
                        {
                          "type":"LiteralNode",
                          "node":{
                            "type":"StringLiteralNode",
                            "valueRep":"\"Clean up\""
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  {
                    "type":"VariableDeclaratorNode",
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"e",
                      "comments":[
                        
                      ]
                    },
                    "arrayDepth":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>In IntelliJ it complains that I need to return a value from the last line of the testException() method, but as far as I can see there is no code path that will get to that point? What am I missing? </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9737266]-[-614802848]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>In IntelliJ it complains that I need to return a value from the last line of the testException() method, but as far as I can see there is no code path that will get to that point? What am I missing? </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"testException",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":1,
                  "test":1,
                  "point":1,
                  "path":1,
                  "line":1,
                  "complain":1,
                  "miss":1,
                  "code":1,
                  "intelli":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>There are <a href=\"http://stackoverflow.com/questions/2945545/in-java-how-do-i-set-a-return-type-if-an-exception-occurs\">similar questions on StackOverflow</a>, but the best resolution I could find was to just put in a return null statement. There was no proper answer to why this was necessary.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[9737266]-[1013670565]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>There are <a href=\"http://stackoverflow.com/questions/2945545/in-java-how-do-i-set-a-return-type-if-an-exception-occurs\">similar questions on StackOverflow</a>, but the best resolution I could find was to just put in a return null statement. There was no proper answer to why this was necessary.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"ReferenceTypeNode",
                  "ids":[
                    {
                      "type":"ParameterizedTypeNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"StackOverflow",
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "find":1,
                  "question":2,
                  "overflow":1,
                  "similar":1,
                  "proper":1,
                  "occur":1,
                  "set":1,
                  "resolut":1,
                  "statement":1,
                  "stackoverflow":1,
                  "stack":1,
                  "put":1,
                  "answer":1,
                  "type":1,
                  "href":1,
                  "http":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"StackOverflow",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":9737305,
      "questionId":9737266,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":12387697,
          "postId":9737305,
          "creationDate":"2012-03-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":363751,
            "displayName":"supercat",
            "reputation":29896
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@aioobe: In general, the legitimacy of one compiled function should not depend upon the code which exists in others. If one could declare the return type of a function as &quot;doesntReturn&quot;, and if such functions would refuse to compile if there were any code execution paths which didn't throw an exception, then a compiler could determine that statements following a call to such a function could never execute without having to examine the code within the function. Such a feature might not be overly difficult to add to the language, but as yet the designers have not thought it worth the effort."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9737305-cu12387697]-[476273811]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@aioobe: In general, the legitimacy of one compiled function should not depend upon the code which exists in others. If one could declare the return type of a function as &quot;doesntReturn&quot;, and if such functions would refuse to compile if there were any code execution paths which didn't throw an exception, then a compiler could determine that statements following a call to such a function could never execute without having to examine the code within the function. Such a feature might not be overly difficult to add to the language, but as yet the designers have not thought it worth the effort."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"doesntReturn",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "examin":1,
                        "languag":1,
                        "design":1,
                        "determin":1,
                        "effort":1,
                        "path":1,
                        "depend":1,
                        "refus":1,
                        "exist":1,
                        "thought":1,
                        "statement":1,
                        "declar":1,
                        "code":3,
                        "aioob":1,
                        "difficult":1,
                        "doesnt":1,
                        "over":1,
                        "general":1,
                        "worth":1,
                        "function":5,
                        "quot":2,
                        "compil":3,
                        "featur":1,
                        "legitimaci":1,
                        "type":1,
                        "call":1,
                        "add":1,
                        "execut":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12383056,
          "postId":9737305,
          "creationDate":"2012-03-16",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1252434,
            "displayName":"user1252434",
            "reputation":1005
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"It *can't* know for certain. It is possible to instrument the class and replace the implementation of `logAndThrowSpecificException` with one that does not (always) throw an exception at load time. Keyword: aspect oriented programming."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9737305-cu12383056]-[917437401]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"It *can't* know for certain. It is possible to instrument the class and replace the implementation of `logAndThrowSpecificException` with one that does not (always) throw an exception at load time. Keyword: aspect oriented programming."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"and",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"logAndThrowSpecificException",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "aspect":1,
                        "load":1,
                        "keyword":1,
                        "replac":1,
                        "specif":1,
                        "implement":1,
                        "orient":1,
                        "time":1,
                        "instrument":1,
                        "log":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12383178,
          "postId":9737305,
          "creationDate":"2012-03-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":20962,
            "displayName":"Nicolai",
            "reputation":1360
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@user1252434 thank you, that was exactly the precise answer I was hoping for. Though you should write an answer for it, so that I can accept that rather than this one. I think that will be the most helpful for the next person looking for the same answer."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9737305-cu12383178]-[-1472913424]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@user1252434 thank you, that was exactly the precise answer I was hoping for. Though you should write an answer for it, so that I can accept that rather than this one. I think that will be the most helpful for the next person looking for the same answer."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "precis":1,
                        "accept":1,
                        "help":1,
                        "hope":1,
                        "person":1,
                        "answer":3,
                        "user":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12383389,
          "postId":9737305,
          "creationDate":"2012-03-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":276052,
            "displayName":"aioobe",
            "reputation":183991
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@user1252434, I'm not sure I follow your argument. It sounds like you're saying the compiler can't know that `logAndThrowSpecificException` will always throw an exception, because someone could change the method after the class has been compiled. I can give you numerous ways in which I can change the bytecode so that it doesn't conform to valid Java code. The reason the compiler gives an error in this case, is because the spec says it should, and the spec says it should because there's no way, in general, to solve this type of reachability problem."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9737305-cu12383389]-[-2070409176]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@user1252434, I'm not sure I follow your argument. It sounds like you're saying the compiler can't know that `logAndThrowSpecificException` will always throw an exception, because someone could change the method after the class has been compiled. I can give you numerous ways in which I can change the bytecode so that it doesn't conform to valid Java code. The reason the compiler gives an error in this case, is because the spec says it should, and the spec says it should because there's no way, in general, to solve this type of reachability problem."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"logAndThrowSpecificException",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"has",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "solv":1,
                        "chang":2,
                        "method":1,
                        "conform":1,
                        "problem":1,
                        "bytecod":1,
                        "reachabl":1,
                        "way":1,
                        "reason":1,
                        "numer":1,
                        "code":1,
                        "general":1,
                        "error":1,
                        "specif":1,
                        "sound":1,
                        "valid":1,
                        "give":1,
                        "spec":2,
                        "compil":3,
                        "type":1,
                        "argument":1,
                        "user":1,
                        "log":1,
                        "follow":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-03-16",
      "lastActivityDate":"2012-03-16",
      "score":6,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1033896,
        "displayName":"hmjd",
        "reputation":78586
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>I suspect it does not know for certain that <code>logAndThrowSpecificException()</code> will always throw an exception, even though it has a very clear name as to its purpose, so it would be possible for the end of <code>testException()</code> to be reached.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9737305]-[586903271]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>I suspect it does not know for certain that <code>logAndThrowSpecificException()</code> will always throw an exception, even though it has a very clear name as to its purpose, so it would be possible for the end of <code>testException()</code> to be reached.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"logAndThrowSpecificException",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"testException",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":1,
                    "reach":1,
                    "clear":1,
                    "code":4,
                    "specif":1,
                    "suspect":1,
                    "end":1,
                    "purpos":1,
                    "log":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9737318,
      "questionId":9737266,
      "comments":[
        
      ],
      "creationDate":"2012-03-16",
      "lastActivityDate":"2012-03-16",
      "lastEditDate":"2012-03-16",
      "score":2,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":276052,
        "displayName":"aioobe",
        "reputation":183991
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<blockquote> \n <p>[...] <em>as far as I can see there is no code path that will get to that point? What am I missing?</em> </p> \n</blockquote>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9737318]-[-1790568611]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<blockquote> \n <p>[...] <em>as far as I can see there is no code path that will get to that point? What am I missing?</em> </p> \n</blockquote>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "point":1,
                    "path":1,
                    "blockquot":2,
                    "miss":1,
                    "code":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There is, in general, no way to tell if a certain path is possible or not (standard result, follows immediately from the halting problem).</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9737318]-[-947828018]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There is, in general, no way to tell if a certain path is possible or not (standard result, follows immediately from the halting problem).</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "halt":1,
                    "path":1,
                    "standard":1,
                    "problem":1,
                    "result":1,
                    "general":1,
                    "immedi":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Due to this, the compiler won't put much effort into analyzing such things. In fact it won't even bother looking outside the method currently being compiled, which is why you get the error in this case.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9737318]-[-710081401]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Due to this, the compiler won't put much effort into analyzing such things. In fact it won't even bother looking outside the method currently being compiled, which is why you get the error in this case.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "due":1,
                    "effort":1,
                    "analyz":1,
                    "thing":1,
                    "bother":1,
                    "fact":1,
                    "error":1,
                    "put":1,
                    "compil":2,
                    "won":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The specifics of what is regarded as reachable code is specified in the Java Language Specification in <a href=\"http://docs.oracle.com/javase/specs/jls/se5.0/html/statements.html#14.21\"rel=\"nofollow\">Section 14.21 Unreachable Statements</a>. In fact, it would be a <strong>direct violation of the specification</strong> if a compiler compiled the code you provided.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9737318]-[-934183638]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The specifics of what is regarded as reachable code is specified in the Java Language Specification in <a href=\"http://docs.oracle.com/javase/specs/jls/se5.0/html/statements.html#14.21\"rel=\"nofollow\">Section 14.21 Unreachable Statements</a>. In fact, it would be a <strong>direct violation of the specification</strong> if a compiler compiled the code you provided.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jls":1,
                    "provid":1,
                    "languag":1,
                    "regard":1,
                    "violat":1,
                    "unreach":1,
                    "rel":1,
                    "oracl":1,
                    "reachabl":1,
                    "statement":2,
                    "strong":2,
                    "section":1,
                    "doc":1,
                    "direct":1,
                    "code":2,
                    "fact":1,
                    "nofollow":1,
                    "specif":3,
                    "spec":1,
                    "javas":1,
                    "compil":2,
                    "html":2,
                    "href":1,
                    "http":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":9737555,
      "questionId":9737266,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":12383450,
          "postId":9737555,
          "creationDate":"2012-03-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":276052,
            "displayName":"aioobe",
            "reputation":183991
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"So you're saying, &quot;that the compiler needs to be careful because someone can rewrite logAndTrowSpecificException after the class has been compiled&quot;? I can give you numerous ways in which I can rewrite a method so that the class file is invalid... even though javac compiled the class."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9737555-cu12383450]-[1210813960]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"So you're saying, &quot;that the compiler needs to be careful because someone can rewrite logAndTrowSpecificException after the class has been compiled&quot;? I can give you numerous ways in which I can rewrite a method so that the class file is invalid... even though javac compiled the class."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"logAndTrowSpecificException",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"has",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"file",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "care":1,
                        "way":1,
                        "numer":1,
                        "invalid":1,
                        "specif":1,
                        "give":1,
                        "trow":1,
                        "file":1,
                        "quot":2,
                        "compil":3,
                        "rewrit":2,
                        "javac":1,
                        "log":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12384317,
          "postId":9737555,
          "creationDate":"2012-03-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1252434,
            "displayName":"user1252434",
            "reputation":1005
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I'm not thinking about invalid bytecode here. When the compiler looks at the method declaration it only sees that it *may* throw an exception. If it looked into the method implementation is could see that this exception is always thrown unconditionally. But the method implementation can be changed after compiling and may actually return. This *can* happen at load time, the class loader *may* replace the method with an otherwise valid, but not always exception throwing implementation. E.g. a noop. One way to do it would be an aspect with an around advice."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9737555-cu12384317]-[-1789467724]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I'm not thinking about invalid bytecode here. When the compiler looks at the method declaration it only sees that it *may* throw an exception. If it looked into the method implementation is could see that this exception is always thrown unconditionally. But the method implementation can be changed after compiling and may actually return. This *can* happen at load time, the class loader *may* replace the method with an otherwise valid, but not always exception throwing implementation. E.g. a noop. One way to do it would be an aspect with an around advice."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"loader",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "chang":1,
                        "method":4,
                        "uncondit":1,
                        "happen":1,
                        "advic":1,
                        "loader":1,
                        "bytecod":1,
                        "look":1,
                        "aspect":1,
                        "thrown":1,
                        "load":1,
                        "declar":1,
                        "noop":1,
                        "replac":1,
                        "invalid":1,
                        "think":1,
                        "valid":1,
                        "implement":3,
                        "compil":2,
                        "time":1,
                        "throw":1,
                        "see":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":12384372,
          "postId":9737555,
          "creationDate":"2012-03-16",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":276052,
            "displayName":"aioobe",
            "reputation":183991
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The class loader can do what ever it likes when loading a class. Even changing the return type of a method. Still, that isn't taken into account by the compiler. You're argument doesn't make sense."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[9737555-cu12384372]-[1915543415]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The class loader can do what ever it likes when loading a class. Even changing the return type of a method. Still, that isn't taken into account by the compiler. You're argument doesn't make sense."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"loader",
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "sens":1,
                        "chang":1,
                        "method":1,
                        "loader":1,
                        "load":1,
                        "isn":1,
                        "make":1,
                        "account":1,
                        "compil":1,
                        "type":1,
                        "argument":1,
                        "like":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-03-16",
      "lastActivityDate":"2012-03-16",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":1252434,
        "displayName":"user1252434",
        "reputation":1005
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Even though it seems obvious that <code>logAndTrowSpecificException</code> always throws an exception, the compiler can't know that for certain. It is possible to instrument the class at load time and replace the implementation of the method with one that does not (always) throw an exception.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9737555]-[2045886928]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Even though it seems obvious that <code>logAndTrowSpecificException</code> always throws an exception, the compiler can't know that for certain. It is possible to instrument the class at load time and replace the implementation of the method with one that does not (always) throw an exception.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"logAndTrowSpecificException",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"at",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "obvious":1,
                    "load":1,
                    "code":2,
                    "replac":1,
                    "specif":1,
                    "implement":1,
                    "trow":1,
                    "compil":1,
                    "time":1,
                    "instrument":1,
                    "log":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Keyword: aspect oriented programming.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[9737555]-[-1744014705]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Keyword: aspect oriented programming.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "aspect":1,
                    "keyword":1,
                    "program":1,
                    "orient":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}