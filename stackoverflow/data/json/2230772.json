{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":2230772,
    "title":"Is this an abuse of try/finally?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":2203836,
        "postId":2230772,
        "creationDate":"2010-02-11",
        "score":1,
        "isEdited":false,
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"It is worth pointing out that try-finally as used in option B is equivalent to scope-bound resource management (SBRM, sometimes called RAII) which is so often praised in other languages."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2230772-cu2203836]-[1372707577]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"It is worth pointing out that try-finally as used in option B is equivalent to scope-bound resource management (SBRM, sometimes called RAII) which is so often praised in other languages."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "languag":1,
                      "point":1,
                      "equival":1,
                      "scope":1,
                      "option":1,
                      "resourc":1,
                      "sbrm":1,
                      "bound":1,
                      "worth":1,
                      "prais":1,
                      "raii":1,
                      "manag":1,
                      "call":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":2185979,
        "postId":2230772,
        "creationDate":"2010-02-09",
        "score":1,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":105604,
          "displayName":"Donal Boyle",
          "reputation":1608
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I would have answered with option C if you had not already provided it! What are your teammate's objections to option C? What is their answer to What happens if the &quot;code that must run at end of method&quot; needs to change?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2230772-cu2185979]-[-331229766]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I would have answered with option C if you had not already provided it! What are your teammate's objections to option C? What is their answer to What happens if the &quot;code that must run at end of method&quot; needs to change?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "chang":1,
                      "provid":1,
                      "method":1,
                      "teammat":1,
                      "run":1,
                      "option":2,
                      "object":1,
                      "code":1,
                      "answer":2,
                      "end":1,
                      "quot":2
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":2186021,
        "postId":2230772,
        "creationDate":"2010-02-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":198376,
          "displayName":"Geo Ego",
          "reputation":613
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I agree with Donal. I like Option C. What are their specific objections?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2230772-cu2186021]-[2116562314]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I agree with Donal. I like Option C. What are their specific objections?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "option":1,
                      "object":1,
                      "specif":1,
                      "agre":1,
                      "donal":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":2186102,
        "postId":2230772,
        "creationDate":"2010-02-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":176741,
          "displayName":"Dolph",
          "reputation":14424
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"I don't really want to speak for them, but as I understand it, they don't like Option C simply because it doesn't have multiple return statements. I'm not sure that's a defensible position, but that's another topic."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2230772-cu2186102]-[2136432670]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"I don't really want to speak for them, but as I understand it, they don't like Option C simply because it doesn't have multiple return statements. I'm not sure that's a defensible position, but that's another topic."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "defens":1,
                      "understand":1,
                      "option":1,
                      "statement":1,
                      "simpli":1,
                      "posit":1,
                      "topic":1,
                      "multipl":1,
                      "speak":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":2186691,
        "postId":2230772,
        "creationDate":"2010-02-09",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":178526,
          "displayName":"sfussenegger",
          "reputation":17647
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"if it's something like `if(!save(foo)) return false;` I'd suggest to throw an exception from `save(..)` to force people to handle this case instead of ignoring it (or forgetting about it!). If it's closer to `if (count() == 0) return false;` an exception obviously wouldn't make sense and C would be my choice (with @Loadmaster's simplifications)."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2230772-cu2186691]-[1834469265]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"if it's something like `if(!save(foo)) return false;` I'd suggest to throw an exception from `save(..)` to force people to handle this case instead of ignoring it (or forgetting about it!). If it's closer to `if (count() == 0) return false;` an exception obviously wouldn't make sense and C would be my choice (with @Loadmaster's simplifications)."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"IfStatementNode",
                      "expression":{
                        "type":"PrefixOperatorExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"!",
                          "comments":[
                            
                          ]
                        },
                        "argument":{
                          "type":"MethodInvocationNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"save",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              {
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"foo",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "statement":{
                        "type":"ReturnStatementNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"BooleanLiteralNode",
                            "valueRep":"false"
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IfStatementNode",
                      "expression":{
                        "type":"BinaryExpressionNode",
                        "operator":{
                          "type":"OperatorNode",
                          "symbol":"==",
                          "comments":[
                            
                          ]
                        },
                        "left":{
                          "type":"MethodInvocationNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"count",
                            "comments":[
                              
                            ]
                          },
                          "args":{
                            "type":"ExpressionListNode",
                            "arguments":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "right":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"IntegerLiteralNode",
                            "valueRep":"0"
                          },
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      "statement":{
                        "type":"ReturnStatementNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"BooleanLiteralNode",
                            "valueRep":"false"
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"AnnotationNode",
                      "identifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"Loadmaster",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "sens":1,
                      "ignor":1,
                      "count":1,
                      "suggest":1,
                      "closer":1,
                      "simplif":1,
                      "wouldn":1,
                      "choic":1,
                      "forget":1,
                      "loadmast":1,
                      "make":1,
                      "fals":2,
                      "forc":1,
                      "save":2,
                      "peopl":1,
                      "handl":1,
                      "foo":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      {
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"save",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            {
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"foo",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"MethodInvocationNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"count",
                          "comments":[
                            
                          ]
                        },
                        "args":{
                          "type":"ExpressionListNode",
                          "arguments":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":5353416,
        "postId":2230772,
        "creationDate":"2011-01-28",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":34537,
          "displayName":"acidzombie24",
          "reputation":31871
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"If the code in question should be executed if an exception is thrown then hands down b. If i cant reorder code i'd use c. option A is not acceptable to me."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[2230772-cu5353416]-[88014927]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"If the code in question should be executed if an exception is thrown then hands down b. If i cant reorder code i'd use c. option A is not acceptable to me."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "question":1,
                      "accept":1,
                      "reorder":1,
                      "hand":1,
                      "option":1,
                      "thrown":1,
                      "code":2,
                      "execut":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java",
      "language-agnostic",
      "coding-style"
    ],
    "creationDate":"2010-02-09",
    "lastActivityDate":"2012-06-07",
    "lastEditDate":"2011-05-18",
    "score":30,
    "viewCount":1436,
    "owner":{
      "type":"StackOverflowUser",
      "id":176741,
      "displayName":"Dolph",
      "reputation":14424
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Given that <strong>multiple return statements are acceptable</strong> (I sort of disagree, but <a href=\"http://stackoverflow.com/questions/36707/should-a-function-have-only-one-return-statement\">let us digress</a>), I'm looking for a more acceptable way to achieve the following behavior:</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2230772]-[1169409357]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Given that <strong>multiple return statements are acceptable</strong> (I sort of disagree, but <a href=\"http://stackoverflow.com/questions/36707/should-a-function-have-only-one-return-statement\">let us digress</a>), I'm looking for a more acceptable way to achieve the following behavior:</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":1,
                  "accept":2,
                  "digress":1,
                  "statement":2,
                  "strong":2,
                  "stackoverflow":1,
                  "achiev":1,
                  "function":1,
                  "sort":1,
                  "behavior":1,
                  "href":1,
                  "http":1,
                  "multipl":1,
                  "disagre":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>Option A</strong>: multiple returns, repeated code block</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2230772]-[472274923]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>Option A</strong>: multiple returns, repeated code block</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "return":1,
                  "option":1,
                  "strong":2,
                  "code":1,
                  "block":1,
                  "repeat":1,
                  "multipl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"public bool myMethod() { /* ... code ... */ if(thisCondition) { /* ... code that must run at end of method ... */ return false; } /* ... more code ... */ if(thatCondition) { /* ... the SAME code that must run at end of method ... */ return false; } /* ... even more code ... */ /* ... the SAME CODE AGAIN that must run at end of method ... */ return lastCondition; } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[2230772]-[806227951]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"public",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "returnType":{
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"bool",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"myMethod",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "body":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"IfStatementNode",
                        "expression":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"thisCondition",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "statement":{
                          "type":"BlockNode",
                          "statements":[
                            {
                              "type":"ReturnStatementNode",
                              "expression":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"BooleanLiteralNode",
                                  "valueRep":"false"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "labels":[
                            
                          ],
                          "comments":[
                            {
                              "text":"/* ... code that must run at end of method ... */"
                            },
                            {
                              "text":"/* ... more code ... */"
                            }
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IfStatementNode",
                        "expression":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"thatCondition",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "statement":{
                          "type":"BlockNode",
                          "statements":[
                            {
                              "type":"ReturnStatementNode",
                              "expression":{
                                "type":"LiteralNode",
                                "node":{
                                  "type":"BooleanLiteralNode",
                                  "valueRep":"false"
                                },
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "labels":[
                            
                          ],
                          "comments":[
                            {
                              "text":"/* ... the SAME code that must run at end of method ... */"
                            },
                            {
                              "text":"/* ... even more code ... */"
                            },
                            {
                              "text":"/* ... the SAME CODE AGAIN that must run at end of method ... */"
                            }
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReturnStatementNode",
                        "expression":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"lastCondition",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      {
                        "text":"/* ... code ... */"
                      }
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"public bool myMethod() { /* ... code ... */ if(thisCondition) { /* ... code that must run at end of method ... */ return false; } /* ... more code ... */ if(thatCondition) { /* ... the SAME code that must run at end of method ... */ return false; } /* ... even more code ... */ /* ... the SAME CODE AGAIN that must run at end of method ... */ return lastCondition; } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":4,
                  "condit":3,
                  "run":3,
                  "code":6,
                  "bool":1,
                  "end":3,
                  "fals":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"bool",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>It makes me feel dirty to see the same (little) code block repeated three times each time the method returns. Furthermore, I would like to clarify that the two <code>return false</code> statements above can certainly be described as returning mid-method... they are absolutely not &quot;guard statements.&quot;</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2230772]-[594258339]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>It makes me feel dirty to see the same (little) code block repeated three times each time the method returns. Furthermore, I would like to clarify that the two <code>return false</code> statements above can certainly be described as returning mid-method... they are absolutely not &quot;guard statements.&quot;</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":2,
                  "feel":1,
                  "return":2,
                  "mid":1,
                  "statement":2,
                  "code":3,
                  "block":1,
                  "absolut":1,
                  "make":1,
                  "fals":1,
                  "quot":2,
                  "time":2,
                  "repeat":1,
                  "guard":1,
                  "dirti":1,
                  "clarifi":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Is Option B <em>slightly</em> more acceptable? I feel that I may abusing try/finally, and I'm hoping there is something completely different that I <em>should</em> be doing.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2230772]-[717547541]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Is Option B <em>slightly</em> more acceptable? I feel that I may abusing try/finally, and I'm hoping there is something completely different that I <em>should</em> be doing.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "feel":1,
                  "accept":1,
                  "abus":1,
                  "slight":1,
                  "option":1,
                  "hope":1,
                  "complet":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>Option B</strong>: multiple returns, <strong>try/finally</strong> block (without catch blocks / exceptions)</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2230772]-[-793566958]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>Option B</strong>: multiple returns, <strong>try/finally</strong> block (without catch blocks / exceptions)</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "return":1,
                  "option":1,
                  "strong":4,
                  "block":2,
                  "except":1,
                  "multipl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"public bool myMethod() { try { /* ... code ... */ if(thisCondition) { return false; } /* ... more code ... */ if(thatCondition) { return false; } /* ... even more code ... */ return lastCondition; } finally { /* ... code that must run at end of method ... */ } } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[2230772]-[1832966953]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"public",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "returnType":{
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"bool",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"myMethod",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "body":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"TryCatchStatementNode",
                        "block":{
                          "type":"BlockNode",
                          "statements":[
                            {
                              "type":"IfStatementNode",
                              "expression":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"thisCondition",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "statement":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ReturnStatementNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"BooleanLiteralNode",
                                        "valueRep":"false"
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  {
                                    "text":"/* ... more code ... */"
                                  }
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IfStatementNode",
                              "expression":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"thatCondition",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "statement":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"ReturnStatementNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"BooleanLiteralNode",
                                        "valueRep":"false"
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  {
                                    "text":"/* ... even more code ... */"
                                  }
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"ReturnStatementNode",
                              "expression":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"lastCondition",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "labels":[
                                
                              ],
                              "comments":[
                                
                              ]
                            }
                          ],
                          "labels":[
                            
                          ],
                          "comments":[
                            {
                              "text":"/* ... code ... */"
                            }
                          ]
                        },
                        "catches":[
                          
                        ],
                        "finallyBlock":{
                          "type":"FinallyBlockNode",
                          "block":{
                            "type":"BlockNode",
                            "statements":[
                              
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              {
                                "text":"/* ... code that must run at end of method ... */"
                              }
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"public bool myMethod() { try { /* ... code ... */ if(thisCondition) { return false; } /* ... more code ... */ if(thatCondition) { return false; } /* ... even more code ... */ return lastCondition; } finally { /* ... code that must run at end of method ... */ } } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":2,
                  "condit":3,
                  "run":1,
                  "code":4,
                  "bool":1,
                  "end":1,
                  "fals":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"bool",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Finally, Option C is the best solution in <em>my</em> book, but my team doesn't like this approach for whatever reason(s), hence I'm looking for a compromise.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2230772]-[74214448]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Finally, Option C is the best solution in <em>my</em> book, but my team doesn't like this approach for whatever reason(s), hence I'm looking for a compromise.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "compromis":1,
                  "book":1,
                  "option":1,
                  "reason":1,
                  "team":1,
                  "approach":1,
                  "solut":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p><strong>Option C</strong>: single return, conditional blocks</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2230772]-[-2030519792]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p><strong>Option C</strong>: single return, conditional blocks</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "singl":1,
                  "condit":1,
                  "option":1,
                  "strong":2,
                  "block":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlNode",
          "name":{
            "type":"XmlNameNode",
            "value":"pre"
          },
          "attributes":[
            
          ],
          "elements":[
            {
              "type":"XmlNode",
              "name":{
                "type":"XmlNameNode",
                "value":"code"
              },
              "attributes":[
                
              ],
              "elements":[
                {
                  "type":"XmlTextNode",
                  "contents":"public bool myMethod() { /* ... code ... */ if(!thisCondition) { /* ... more code ... */ } if(!thisCondition &amp;&amp; !thatCondition) { /* ... even more code ... */ } /* ... code that must run at end of method ... */ return summaryCondition; } "
                }
              ]
            }
          ]
        },
        "units":[
          {
            "type":"StructuredFragmentUnit",
            "id":"[2230772]-[-859600381]",
            "astNode":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"MethodDeclaratorNode",
                  "modifiers":[
                    {
                      "type":"KeywordModifierNode",
                      "value":"public",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "returnType":{
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"bool",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  "identifier":{
                    "type":"IdentifierNode",
                    "name":"myMethod",
                    "comments":[
                      
                    ]
                  },
                  "parameters":{
                    "type":"FormalParametersNode",
                    "comments":[
                      
                    ]
                  },
                  "arrayReturnType":[
                    
                  ],
                  "body":{
                    "type":"BlockNode",
                    "statements":[
                      {
                        "type":"IfStatementNode",
                        "expression":{
                          "type":"PrefixOperatorExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"!",
                            "comments":[
                              
                            ]
                          },
                          "argument":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"thisCondition",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "statement":{
                          "type":"BlockNode",
                          "statements":[
                            
                          ],
                          "labels":[
                            
                          ],
                          "comments":[
                            {
                              "text":"/* ... more code ... */"
                            }
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IfStatementNode",
                        "expression":{
                          "type":"BinaryExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"&&",
                            "comments":[
                              
                            ]
                          },
                          "left":{
                            "type":"PrefixOperatorExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"!",
                              "comments":[
                                
                              ]
                            },
                            "argument":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"thisCondition",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "right":{
                            "type":"PrefixOperatorExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"!",
                              "comments":[
                                
                              ]
                            },
                            "argument":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"thatCondition",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "statement":{
                          "type":"BlockNode",
                          "statements":[
                            
                          ],
                          "labels":[
                            
                          ],
                          "comments":[
                            {
                              "text":"/* ... even more code ... */"
                            },
                            {
                              "text":"/* ... code that must run at end of method ... */"
                            }
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReturnStatementNode",
                        "expression":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"summaryCondition",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ],
                    "labels":[
                      
                    ],
                    "comments":[
                      {
                        "text":"/* ... code ... */"
                      }
                    ]
                  },
                  "comments":[
                    
                  ]
                }
              ]
            },
            "rawText":"public bool myMethod() { /* ... code ... */ if(!thisCondition) { /* ... more code ... */ } if(!thisCondition && !thatCondition) { /* ... even more code ... */ } /* ... code that must run at end of method ... */ return summaryCondition; } ",
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "method":2,
                  "summari":1,
                  "condit":4,
                  "run":1,
                  "code":4,
                  "bool":1,
                  "end":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"bool",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>If you want to discuss multiple return statements, please do so in <a href=\"http://stackoverflow.com/questions/36707/should-a-function-have-only-one-return-statement\">this question</a>.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[2230772]-[394004611]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>If you want to discuss multiple return statements, please do so in <a href=\"http://stackoverflow.com/questions/36707/should-a-function-have-only-one-return-statement\">this question</a>.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "question":2,
                  "statement":2,
                  "stackoverflow":1,
                  "discuss":1,
                  "function":1,
                  "href":1,
                  "http":1,
                  "multipl":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":2230810,
      "questionId":2230772,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2210116,
          "postId":2230810,
          "creationDate":"2010-02-12",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":151019,
            "displayName":"Mark",
            "reputation":22087
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I suppose nearest is &quot;unusual and impressive&quot;. Iy can also depend on the language, e.g. Python will use exceptions more than C++ or Java. If the bad condition is normal in the execution path than don't use an exception"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230810-cu2210116]-[-881663107]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I suppose nearest is &quot;unusual and impressive&quot;. Iy can also depend on the language, e.g. Python will use exceptions more than C++ or Java. If the bad condition is normal in the execution path than don't use an exception"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "languag":1,
                        "impress":1,
                        "path":1,
                        "depend":1,
                        "nearest":1,
                        "normal":1,
                        "condit":1,
                        "bad":1,
                        "python":1,
                        "quot":2,
                        "unusu":1,
                        "suppos":1,
                        "except":1,
                        "execut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2204630,
          "postId":2230810,
          "creationDate":"2010-02-11",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":264017,
            "displayName":"Ken",
            "reputation":217
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I keep hearing the catchy phrase &quot;Exceptions should be exceptional&quot; but never an explanation of what this *means*. Rare in code? This is probably the only place he does this. Rare in execution? I get a lot of IOExceptions, so would you say I should make IO conditions not use Exceptions? Or do you mean &quot;exceptional&quot; in the more general &quot;unusual and impressive&quot;, in which case this use looks fine? In general, what do you mean by &quot;exceptional&quot;?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230810-cu2204630]-[-441512792]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I keep hearing the catchy phrase &quot;Exceptions should be exceptional&quot; but never an explanation of what this *means*. Rare in code? This is probably the only place he does this. Rare in execution? I get a lot of IOExceptions, so would you say I should make IO conditions not use Exceptions? Or do you mean &quot;exceptional&quot; in the more general &quot;unusual and impressive&quot;, in which case this use looks fine? In general, what do you mean by &quot;exceptional&quot;?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "catchi":1,
                        "impress":1,
                        "condit":1,
                        "phrase":1,
                        "mean":1,
                        "hear":1,
                        "code":1,
                        "explan":1,
                        "general":2,
                        "rare":2,
                        "lot":1,
                        "make":1,
                        "quot":8,
                        "place":1,
                        "fine":1,
                        "ioexcept":1,
                        "unusu":1,
                        "except":5,
                        "execut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186015,
          "postId":2230810,
          "creationDate":"2010-02-09",
          "score":17,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":8946,
            "displayName":"Lawrence Dol",
            "reputation":30760
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"+1 for correctly answering the second half of the question. But the comment that finally is incorrect in the absence of exceptions is just plain wrong. try/finally exists in order to execute some block of code and then always do something else regardless of how that block exits - finally is often tied to exception handling but not limited to that; it is perfectly legitimate to use finally for exit handling too."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230810-cu2186015]-[-709449794]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"+1 for correctly answering the second half of the question. But the comment that finally is incorrect in the absence of exceptions is just plain wrong. try/finally exists in order to execute some block of code and then always do something else regardless of how that block exits - finally is often tied to exception handling but not limited to that; it is perfectly legitimate to use finally for exit handling too."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "tie":1,
                        "exist":1,
                        "wrong":1,
                        "correct":1,
                        "perfect":1,
                        "legitim":1,
                        "half":1,
                        "code":1,
                        "block":2,
                        "incorrect":1,
                        "order":1,
                        "comment":1,
                        "exit":2,
                        "plain":1,
                        "answer":1,
                        "absenc":1,
                        "except":1,
                        "limit":1,
                        "handl":2,
                        "execut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186284,
          "postId":2230810,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":176741,
            "displayName":"Dolph",
            "reputation":14424
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Accepting this answer since this code was posted five minutes before Joachim Sauer's. This is the *duh* solution I was hoping for."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230810-cu2186284]-[-1471770059]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Accepting this answer since this code was posted five minutes before Joachim Sauer's. This is the *duh* solution I was hoping for."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "minut":1,
                        "post":1,
                        "sauer":1,
                        "accept":1,
                        "duh":1,
                        "code":1,
                        "hope":1,
                        "joachim":1,
                        "answer":1,
                        "solut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186287,
          "postId":2230810,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":151019,
            "displayName":"Mark",
            "reputation":22087
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"But I did not say it is incorrect. I said I did not like it - it is like the original question a matter of style"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230810-cu2186287]-[-1024808435]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"But I did not say it is incorrect. I said I did not like it - it is like the original question a matter of style"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "style":1,
                        "incorrect":1,
                        "origin":1,
                        "matter":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186335,
          "postId":2230810,
          "creationDate":"2010-02-09",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3474,
            "displayName":"erickson",
            "reputation":141001
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I agree with @SoftwareMonkey; a `finally` block is independent of any `catch` block. In fact, there are way too many instances of `try-catch` in Java code that really should be `try-finally`. In other words, exceptions are often caught and mis-handled, when what is needed is to clean up a resource and let the exception be handled by a caller with more context."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230810-cu2186335]-[-476932086]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I agree with @SoftwareMonkey; a `finally` block is independent of any `catch` block. In fact, there are way too many instances of `try-catch` in Java code that really should be `try-finally`. In other words, exceptions are often caught and mis-handled, when what is needed is to clean up a resource and let the exception be handled by a caller with more context."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"SoftwareMonkey",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "context":1,
                        "clean":1,
                        "resourc":1,
                        "softwar":1,
                        "monkey":1,
                        "code":1,
                        "fact":1,
                        "caught":1,
                        "block":2,
                        "need":1,
                        "independ":1,
                        "agre":1,
                        "mis":1,
                        "except":1,
                        "word":1,
                        "handl":2,
                        "caller":1,
                        "instanc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2187012,
          "postId":2230810,
          "creationDate":"2010-02-09",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":8946,
            "displayName":"Lawrence Dol",
            "reputation":30760
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Mark: Sorry read in an inference that you may not have intended (but hey, I still +1'd you!)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230810-cu2187012]-[650981486]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Mark: Sorry read in an inference that you may not have intended (but hey, I still +1'd you!)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Mark",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "infer":1,
                        "intend":1,
                        "mark":1,
                        "hey":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":25086824,
          "postId":2230810,
          "creationDate":"2013-06-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2020801,
            "displayName":"Erik Madsen",
            "reputation":325
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"myMethodWork() is too long. It should be refactored to extract smaller methods like in this answer http://stackoverflow.com/a/2230932/2020801"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230810-cu25086824]-[1786092830]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"myMethodWork() is too long. It should be refactored to extract smaller methods like in this answer http://stackoverflow.com/a/2230932/2020801"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"myMethodWork",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":2,
                        "work":1,
                        "stackoverflow":1,
                        "refactor":1,
                        "answer":1,
                        "smaller":1,
                        "http":1,
                        "extract":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-02-09",
      "lastActivityDate":"2012-06-07",
      "lastEditDate":"2012-06-07",
      "score":28,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":151019,
        "displayName":"Mark",
        "reputation":22087
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Exceptions should be exceptional so I don't like option B if there are no other exceptions around(Note for downvoters - I don't say that having finally is incorrect just that I prefer not to have it if there are no exceptions - if you have reasons please comment)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230810]-[1499556369]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Exceptions should be exceptional so I don't like option B if there are no other exceptions around(Note for downvoters - I don't say that having finally is incorrect just that I prefer not to have it if there are no exceptions - if you have reasons please comment)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "option":1,
                    "reason":1,
                    "incorrect":1,
                    "note":1,
                    "comment":1,
                    "downvot":1,
                    "except":4,
                    "prefer":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If code is always needed how about refactoring into 2 functions</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230810]-[1104734567]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If code is always needed how about refactoring into 2 functions</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "function":1,
                    "need":1,
                    "code":1,
                    "refactor":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public bool myMethod() { bool summaryCondition = myMethodWork(); // do common code return summaryCondition; } private bool myMethodWork() { /* ... code ... */ if(thisCondition) { return false; } /* ... more code ... */ if(thatCondition) { return false; } /* ... even more code ... */ return lastCondition; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2230810]-[146313881]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"public",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"bool",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myMethod",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"summaryCondition",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"myMethodWork",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"ReferenceTypeNode",
                                  "ids":[
                                    {
                                      "type":"ParameterizedTypeNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"bool",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            {
                              "text":"// do common code return summaryCondition; } private bool myMethodWork() { /* ... code ... */ if(thisCondition) { return false; } /* ... more code ... */ if(thatCondition) { return false; } /* ... even more code ... */ return lastCondition; } \n"
                            }
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"public bool myMethod() { bool summaryCondition = myMethodWork(); // do common code return summaryCondition; } private bool myMethodWork() { /* ... code ... */ if(thisCondition) { return false; } /* ... more code ... */ if(thatCondition) { return false; } /* ... even more code ... */ return lastCondition; } \n...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":3,
                    "summari":2,
                    "condit":5,
                    "work":2,
                    "code":4,
                    "common":1,
                    "bool":3,
                    "fals":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"bool",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"myMethodWork",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"summaryCondition",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"myMethodWork",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"bool",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2230885,
      "questionId":2230772,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2186056,
          "postId":2230885,
          "creationDate":"2010-02-09",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":176741,
            "displayName":"Dolph",
            "reputation":14424
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Hey, it was worth the laugh :P"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230885-cu2186056]-[-909072334]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Hey, it was worth the laugh :P"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "worth":1,
                        "hey":1,
                        "laugh":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186173,
          "postId":2230885,
          "creationDate":"2010-02-09",
          "score":5,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":8946,
            "displayName":"Lawrence Dol",
            "reputation":30760
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I assume, and hope, David is serious."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230885-cu2186173]-[1669920260]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I assume, and hope, David is serious."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "david":1,
                        "hope":1,
                        "assum":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186353,
          "postId":2230885,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":170383,
            "displayName":"David R Tribble",
            "reputation":5210
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"In C or C++, using `goto` would be acceptable, since you're trying to exit early from the method."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230885-cu2186353]-[-1261928913]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"In C or C++, using `goto` would be acceptable, since you're trying to exit early from the method."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "accept":1,
                        "exit":1,
                        "earli":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2187189,
          "postId":2230885,
          "creationDate":"2010-02-09",
          "score":3,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":179910,
            "displayName":"Jerry Coffin",
            "reputation":260562
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Loadmaster:In C++ one would typically use something like a `ScopeGuard` to execute that final block of code."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230885-cu2187189]-[1953410324]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Loadmaster:In C++ one would typically use something like a `ScopeGuard` to execute that final block of code."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Loadmaster",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"ScopeGuard",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "scope":1,
                        "code":1,
                        "block":1,
                        "typic":1,
                        "loadmast":1,
                        "guard":1,
                        "execut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"ScopeGuard",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-02-09",
      "lastActivityDate":"2010-02-09",
      "score":16,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":168646,
        "displayName":"David Oneill",
        "reputation":3366
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>This is a perfect place for a <code>GOTO</code></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230885]-[1427004008]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>This is a perfect place for a <code>GOTO</code></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "perfect":1,
                    "code":2,
                    "place":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>*ducks*</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230885]-[-758598799]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>*ducks*</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "duck":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2230790,
      "questionId":2230772,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2185954,
          "postId":2230790,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":176741,
            "displayName":"Dolph",
            "reputation":14424
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Then what *should* I be doing? There are no exception to catch here."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230790-cu2185954]-[587832240]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Then what *should* I be doing? There are no exception to catch here."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-02-09",
      "lastActivityDate":"2010-02-09",
      "lastEditDate":"2010-02-09",
      "score":29,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":40342,
        "displayName":"Joachim Sauer",
        "reputation":145645
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If the code needs to run even when any other code throws an exception, then the <code>finally</code> block is the correct solution.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230790]-[201132076]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If the code needs to run even when any other code throws an exception, then the <code>finally</code> block is the correct solution.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "correct":1,
                    "run":1,
                    "code":4,
                    "block":1,
                    "solut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If it need not run in the case of an exception (i.e. it's only necessary for &quot;normal&quot; returns), then using <code>finally</code> would be abusing the feature.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230790]-[329555033]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If it need not run in the case of an exception (i.e. it's only necessary for &quot;normal&quot; returns), then using <code>finally</code> would be abusing the feature.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "return":1,
                    "normal":1,
                    "run":1,
                    "abus":1,
                    "code":2,
                    "quot":2,
                    "featur":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Personally I'd rewrite that method in the single-return-point style. Not because I religiously subscribe to that idea (I don't), but because it is best suited for these kind of end-of-method codes.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230790]-[2005804568]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Personally I'd rewrite that method in the single-return-point style. Not because I religiously subscribe to that idea (I don't), but because it is best suited for these kind of end-of-method codes.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "singl":1,
                    "method":2,
                    "point":1,
                    "subscrib":1,
                    "style":1,
                    "idea":1,
                    "suit":1,
                    "code":1,
                    "religi":1,
                    "person":1,
                    "end":1,
                    "kind":1,
                    "rewrit":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>When that code turns out to be overly complicated (and that's a very real possibility), then it's time to refactor the method by extracting one or more methods.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230790]-[-1980405394]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>When that code turns out to be overly complicated (and that's a very real possibility), then it's time to refactor the method by extracting one or more methods.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "real":1,
                    "complic":1,
                    "possibl":1,
                    "code":1,
                    "over":1,
                    "refactor":1,
                    "turn":1,
                    "time":1,
                    "extract":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The simplest refactoring would be something like this:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230790]-[1678122520]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The simplest refactoring would be something like this:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "refactor":1,
                    "simplest":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public boolean myMethod() { boolean result = myExtractedMethod(); /* ... code that must run at end of method ... */ return result; } protected boolean myExtractedMethod() { /* ... code ... */ if(thisCondition) { return false; } /* ... more code ... */ if(thatCondition) { return false; } /* ... even more code ... */ return lastCondition; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2230790]-[-116529640]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"public",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"boolean",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myMethod",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"result",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"myExtractedMethod",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"PrimitiveTypeNode",
                                  "name":"boolean",
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            {
                              "text":"/* ... code that must run at end of method ... */"
                            }
                          ]
                        },
                        {
                          "type":"ReturnStatementNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"result",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"protected",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"boolean",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myExtractedMethod",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"IfStatementNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"thisCondition",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"ReturnStatementNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"BooleanLiteralNode",
                                    "valueRep":"false"
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              {
                                "text":"/* ... more code ... */"
                              }
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IfStatementNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"thatCondition",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"ReturnStatementNode",
                                "expression":{
                                  "type":"LiteralNode",
                                  "node":{
                                    "type":"BooleanLiteralNode",
                                    "valueRep":"false"
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              {
                                "text":"/* ... even more code ... */"
                              }
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReturnStatementNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"lastCondition",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        {
                          "text":"/* ... code ... */"
                        }
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"public boolean myMethod() { boolean result = myExtractedMethod(); /* ... code that must run at end of method ... */ return result; } protected boolean myExtractedMethod() { /* ... code ... */ if(thisCondition) { return false; } /* ... more code ... */ if(thatCondition) { return false; } /* ... even more code ... */ return lastCondition; } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":4,
                    "condit":3,
                    "run":1,
                    "result":2,
                    "code":4,
                    "end":1,
                    "fals":2,
                    "extract":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"boolean",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"myExtractedMethod",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"result",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"myExtractedMethod",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"boolean",
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2231021,
      "questionId":2230772,
      "comments":[
        
      ],
      "creationDate":"2010-02-09",
      "lastActivityDate":"2010-02-20",
      "lastEditDate":"2010-02-20",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":184730,
        "displayName":"fastcodejava",
        "reputation":14559
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If the code needs to run even when there is an <code>Exception</code>, then <code>finally</code> is not just a good choice, it is a must. If that is not the case, <code>finally</code> is not necessary. Looks like you want to find format that &quot;looks&quot; best. But there is little more at stake here.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2231021]-[7016539]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If the code needs to run even when there is an <code>Exception</code>, then <code>finally</code> is not just a good choice, it is a must. If that is not the case, <code>finally</code> is not necessary. Looks like you want to find format that &quot;looks&quot; best. But there is little more at stake here.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "format":1,
                    "find":1,
                    "stake":1,
                    "good":1,
                    "run":1,
                    "code":7,
                    "choic":1,
                    "quot":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2230932,
      "questionId":2230772,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2186616,
          "postId":2230932,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":178526,
            "displayName":"sfussenegger",
            "reputation":17647
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Dolph Mathews it would look cleaner, but each method will be executed, regardless of returnval!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230932-cu2186616]-[-222704643]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Dolph Mathews it would look cleaner, but each method will be executed, regardless of returnval!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Dolph",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "cleaner":1,
                        "mathew":1,
                        "returnv":1,
                        "dolph":1,
                        "execut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2187382,
          "postId":2230932,
          "creationDate":"2010-02-09",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":15394,
            "displayName":"glenatron",
            "reputation":6372
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Dolph Mathews - That's how I thought to write it first but then I couldn't recall if Java actually has an &amp;= operator and as sfussenegger mentions it would lose the benefit of short-circuit evaluation..."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230932-cu2187382]-[-687732931]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Dolph Mathews - That's how I thought to write it first but then I couldn't recall if Java actually has an &amp;= operator and as sfussenegger mentions it would lose the benefit of short-circuit evaluation..."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Dolph",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "thought":1,
                        "mathew":1,
                        "amp":1,
                        "oper":1,
                        "mention":1,
                        "circuit":1,
                        "sfussenegg":1,
                        "evalu":1,
                        "dolph":1,
                        "recal":1,
                        "benefit":1,
                        "lose":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2193490,
          "postId":2230932,
          "creationDate":"2010-02-10",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":15394,
            "displayName":"glenatron",
            "reputation":6372
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"There is no such thing as perlish. Perl encompasses pretty much every possible way of doing something. That is why it is so irritatingly difficult to read Perl written by anyone else :)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230932-cu2193490]-[-1561949765]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"There is no such thing as perlish. Perl encompasses pretty much every possible way of doing something. That is why it is so irritatingly difficult to read Perl written by anyone else :)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "read":1,
                        "thing":1,
                        "perl":2,
                        "pretti":1,
                        "difficult":1,
                        "written":1,
                        "irrit":1,
                        "encompass":1,
                        "perlish":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2189017,
          "postId":2230932,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":178526,
            "displayName":"sfussenegger",
            "reputation":17647
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"thanks for helping with the technical term ;) I still have the felling it's a little Perl'ish tough: `$val = foo() unless !$val;` - at least as far as I remember - thank god I've forgotten most of it :)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230932-cu2189017]-[153609963]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"thanks for helping with the technical term ;) I still have the felling it's a little Perl'ish tough: `$val = foo() unless !$val;` - at least as far as I remember - thank god I've forgotten most of it :)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ExpressionStatement",
                        "expression":{
                          "type":"PrefixOperatorExpressionNode",
                          "operator":{
                            "type":"OperatorNode",
                            "symbol":"!",
                            "comments":[
                              
                            ]
                          },
                          "argument":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"$val",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "forgotten":1,
                        "god":1,
                        "fell":1,
                        "term":1,
                        "perl":1,
                        "rememb":1,
                        "help":1,
                        "ish":1,
                        "technic":1,
                        "tough":1,
                        "val":2,
                        "foo":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":25086585,
          "postId":2230932,
          "creationDate":"2013-06-25",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2020801,
            "displayName":"Erik Madsen",
            "reputation":325
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"it's a tiny thing (in the context of this question) but I probably wouldn't expose the extracted methods as public. They're still implementation detail rather than part of the contract. But definitely +1 for the cleanest solution so far."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230932-cu25086585]-[1710763904]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"it's a tiny thing (in the context of this question) but I probably wouldn't expose the extracted methods as public. They're still implementation detail rather than part of the contract. But definitely +1 for the cleanest solution so far."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "method":1,
                        "cleanest":1,
                        "context":1,
                        "thing":1,
                        "expos":1,
                        "tini":1,
                        "wouldn":1,
                        "implement":1,
                        "detail":1,
                        "part":1,
                        "solut":1,
                        "contract":1,
                        "extract":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-02-09",
      "lastActivityDate":"2010-02-09",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":15394,
        "displayName":"glenatron",
        "reputation":6372
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>How about breaking it up a little more to give something more ( excusing my not having used Java's logical operators in <em>quite some time</em> ) like this:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230932]-[1520945228]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>How about breaking it up a little more to give something more ( excusing my not having used Java's logical operators in <em>quite some time</em> ) like this:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "break":1,
                    "excus":1,
                    "logic":1,
                    "oper":1,
                    "give":1,
                    "time":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public bool findFirstCondition() { // do some stuff giving the return value of the original &quot;thisCondition&quot;. } public bool findSecondCondition() { // do some stuff giving the return value of the original &quot;thatCondition&quot;. } public bool findLastCondition() { // do some stuff giving the return value of the original &quot;lastCondition&quot;. } private void cleanUp() { // perform common cleanup tasks. } public bool myMethod() { bool returnval = true; returnval = returnval &amp;&amp; findFirstCondition(); returnval = returnval &amp;&amp; findSecondCondition(); returnval = returnval &amp;&amp; findLastCondition(); cleanUp(); return returnval; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2230932]-[117283704]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"public",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"bool",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"findFirstCondition",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        {
                          "text":"// do some stuff giving the return value of the original \"thisCondition\". } public bool findSecondCondition() { // do some stuff giving the return value of the original \"thatCondition\". } public bool findLastCondition() { // do some stuff giving the return value of the original \"lastCondition\". } private void cleanUp() { // perform common cleanup tasks. } public bool myMethod() { bool returnval = true; returnval = returnval && findFirstCondition(); returnval = returnval && findSecondCondition(); returnval = returnval && findLastCondition(); cleanUp(); return returnval; } \n"
                        }
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"public bool findFirstCondition() { // do some stuff giving the return value of the original \"thisCondition\". } public bool findSecondCondition() { // do some stuff giving the return value of the original \"thatCondition\". } public bool findLastCondition() { // do some stuff giving the return value of the original \"lastCondition\". } private void cleanUp() { // perform common cleanup tasks. } public bool myMethod() { bool returnval = true; returnval = returnval && findFirstCondition(); returnval = returnval && findSecondCondition(); returnval = returnval && findLastCondition(); cleanUp(); return returnval; } \n...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "find":6,
                    "method":1,
                    "task":1,
                    "returnv":8,
                    "condit":9,
                    "clean":2,
                    "common":1,
                    "bool":5,
                    "cleanup":1,
                    "origin":3,
                    "perform":1,
                    "stuff":3,
                    "give":3,
                    "true":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"bool",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2231088,
      "questionId":2230772,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2186558,
          "postId":2231088,
          "creationDate":"2010-02-09",
          "score":5,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":178526,
            "displayName":"sfussenegger",
            "reputation":17647
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"you cannot be serious! Anybody will instantly know what `finally` is used for. The intention of `do { ... } while (false);` is by far less obvious."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2231088-cu2186558]-[808188281]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"you cannot be serious! Anybody will instantly know what `finally` is used for. The intention of `do { ... } while (false);` is by far less obvious."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"WhileStatementNode",
                        "expression":{
                          "type":"LiteralNode",
                          "node":{
                            "type":"BooleanLiteralNode",
                            "valueRep":"false"
                          },
                          "comments":[
                            
                          ]
                        },
                        "statement":{
                          "type":"EmptyStatementNode",
                          "comma":{
                            "type":"SeparatorNode",
                            "symbol":";",
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "intent":1,
                        "fals":1,
                        "instant":1,
                        "obvious":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186693,
          "postId":2231088,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":247533,
            "displayName":"Rex Kerr",
            "reputation":104113
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"But anybody will not know instantly what the `try` is for--you think &quot;dangerous exception-throwing code ahead&quot;, not &quot;some regular control-flow construct&quot;, and you might want real exceptions to fall through without executing finally (i.e. they're real uncaught exceptions). Since both constructs are weird, my real suggestion would be to refactor into two methods, but sometimes there's a lot of internal state to maintain and if your coding team refuses if-chains, having options like this can be helpful."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2231088-cu2186693]-[-1680246681]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"But anybody will not know instantly what the `try` is for--you think &quot;dangerous exception-throwing code ahead&quot;, not &quot;some regular control-flow construct&quot;, and you might want real exceptions to fall through without executing finally (i.e. they're real uncaught exceptions). Since both constructs are weird, my real suggestion would be to refactor into two methods, but sometimes there's a lot of internal state to maintain and if your coding team refuses if-chains, having options like this can be helpful."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "weird":1,
                        "method":1,
                        "real":3,
                        "refus":1,
                        "state":1,
                        "suggest":1,
                        "option":1,
                        "regular":1,
                        "uncaught":1,
                        "fall":1,
                        "code":2,
                        "help":1,
                        "instant":1,
                        "flow":1,
                        "refactor":1,
                        "team":1,
                        "lot":1,
                        "quot":4,
                        "control":1,
                        "ahead":1,
                        "throw":1,
                        "except":2,
                        "chain":1,
                        "construct":2,
                        "intern":1,
                        "execut":1,
                        "danger":1,
                        "maintain":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186759,
          "postId":2231088,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":178526,
            "displayName":"sfussenegger",
            "reputation":17647
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"If you can't instantly understand what the finally block is doing, the code is flawed anyway: Either a) the try block is too long (having to scroll from the beginning of a try block to its end is a no-no - extract some methods!) or b) the catch block is too long (it shouldn't be doing more than some basic cleanup that should be quick to grasp too). As I haven't ever seen this abuse of do/while anywhere before, it took me two seconds to get it's intention - a good indicator that it isn't a very good choice."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2231088-cu2186759]-[-1526978523]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"If you can't instantly understand what the finally block is doing, the code is flawed anyway: Either a) the try block is too long (having to scroll from the beginning of a try block to its end is a no-no - extract some methods!) or b) the catch block is too long (it shouldn't be doing more than some basic cleanup that should be quick to grasp too). As I haven't ever seen this abuse of do/while anywhere before, it took me two seconds to get it's intention - a good indicator that it isn't a very good choice."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "begin":1,
                        "scroll":1,
                        "intent":1,
                        "good":2,
                        "abus":1,
                        "understand":1,
                        "grasp":1,
                        "flaw":1,
                        "code":1,
                        "block":4,
                        "second":1,
                        "indic":1,
                        "cleanup":1,
                        "instant":1,
                        "choic":1,
                        "isn":1,
                        "end":1,
                        "quick":1,
                        "basic":1,
                        "shouldn":1,
                        "extract":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2188139,
          "postId":2231088,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":247533,
            "displayName":"Rex Kerr",
            "reputation":104113
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"It's a bad choice unless used widely throughout that codebase; then at least those programmers would know what's going on. Given all the blocks of code in the example, it looked very likely to me that the try block *was* too long."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2231088-cu2188139]-[757437362]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"It's a bad choice unless used widely throughout that codebase; then at least those programmers would know what's going on. Given all the blocks of code in the example, it looked very likely to me that the try block *was* too long."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "codebas":1,
                        "look":1,
                        "bad":1,
                        "code":1,
                        "block":2,
                        "programm":1,
                        "choic":1,
                        "wide":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-02-09",
      "lastActivityDate":"2010-02-09",
      "score":2,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":247533,
        "displayName":"Rex Kerr",
        "reputation":104113
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Don't abuse try/finally unless you need to break out of inner loops. Abuse do/while.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2231088]-[575466818]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Don't abuse try/finally unless you need to break out of inner loops. Abuse do/while.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "abus":2,
                    "loop":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"bool result = false; do { // Code if (condition1) break; // Code if (condition2) break; // . . . result = lastCondition } while (false); "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2231088]-[-1920589652]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"bool "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"result",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"BooleanLiteralNode",
                          "valueRep":"false"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"do "
                  },
                  {
                    "type":"BlockDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "block":{
                      "type":"BlockNode",
                      "statements":[
                        
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        {
                          "text":"// Code if (condition1) break; // Code if (condition2) break; // . . . result = lastCondition } while (false); \n"
                        }
                      ]
                    }
                  }
                ]
              },
              "rawText":"bool result = false; do { // Code if (condition1) break; // Code if (condition2) break; // . . . result = lastCondition } while (false); \n...\n}",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "condit":3,
                    "result":2,
                    "code":2,
                    "bool":1,
                    "fals":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2231120,
      "questionId":2230772,
      "comments":[
        
      ],
      "creationDate":"2010-02-09",
      "lastActivityDate":"2010-02-09",
      "lastEditDate":"2010-02-09",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":170383,
        "displayName":"David R Tribble",
        "reputation":5210
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Your <strong>option C</strong> solution is not far from optimal, since it adequately codes the proper execution sequence you're trying to accomplish.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2231120]-[-1971348486]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Your <strong>option C</strong> solution is not far from optimal, since it adequately codes the proper execution sequence you're trying to accomplish.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "adequ":1,
                    "proper":1,
                    "option":1,
                    "strong":2,
                    "code":1,
                    "optim":1,
                    "sequenc":1,
                    "accomplish":1,
                    "solut":1,
                    "execut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Similarly, using <strong>nested if-statements</strong> do the same thing. It may be visually less appealing, but it's simpler to understand, and makes the execution flow pretty obvious:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2231120]-[-1941184336]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Similarly, using <strong>nested if-statements</strong> do the same thing. It may be visually less appealing, but it's simpler to understand, and makes the execution flow pretty obvious:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "nest":1,
                    "similar":1,
                    "obvious":1,
                    "understand":1,
                    "thing":1,
                    "appeal":1,
                    "statement":1,
                    "strong":2,
                    "pretti":1,
                    "flow":1,
                    "visual":1,
                    "make":1,
                    "simpler":1,
                    "execut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public bool myMethod() { boolean rc = lastCondition; /* ... code-1 ... */ if (thisCondition) { rc = false; } else { /* ... code-2 ... */ if (thatCondition) { rc = false; } else { /* ... code-3 ... */ rc = ???; } } /* ... the code that must run at end of method ... */ return rc; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2231120]-[-100165681]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"public",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"bool",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myMethod",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"rc",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"lastCondition",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"PrimitiveTypeNode",
                                  "name":"boolean",
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            {
                              "text":"/* ... code-1 ... */"
                            }
                          ]
                        },
                        {
                          "type":"IfStatementNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"thisCondition",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"ExpressionStatement",
                                "expression":{
                                  "type":"BinaryExpressionNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"=",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "left":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"rc",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "right":{
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"BooleanLiteralNode",
                                      "valueRep":"false"
                                    },
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "elseStatement":{
                            "type":"ElseStatementNode",
                            "statement":{
                              "type":"BlockNode",
                              "statements":[
                                {
                                  "type":"IfStatementNode",
                                  "expression":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"thatCondition",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "statement":{
                                    "type":"BlockNode",
                                    "statements":[
                                      {
                                        "type":"ExpressionStatement",
                                        "expression":{
                                          "type":"BinaryExpressionNode",
                                          "operator":{
                                            "type":"OperatorNode",
                                            "symbol":"=",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "left":{
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"rc",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "right":{
                                            "type":"LiteralNode",
                                            "node":{
                                              "type":"BooleanLiteralNode",
                                              "valueRep":"false"
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        },
                                        "labels":[
                                          
                                        ]
                                      }
                                    ],
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"else"
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":" "
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"{"
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":" "
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"/"
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"*"
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":" "
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"."
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"."
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"."
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":" "
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"code"
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"-"
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"3"
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":" "
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"."
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"."
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"."
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":" "
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"*"
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"/"
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":" "
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"rc"
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":" "
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"="
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":" "
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"?"
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"?"
                                },
                                {
                                  "type":"TextFragmentNode",
                                  "text":"?"
                                },
                                {
                                  "type":"EmptyStatementNode",
                                  "comma":{
                                    "type":"SeparatorNode",
                                    "symbol":";",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "labels":[
                                    
                                  ]
                                }
                              ],
                              "labels":[
                                
                              ],
                              "comments":[
                                {
                                  "text":"/* ... code-2 ... */"
                                }
                              ]
                            },
                            "labels":[
                              
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        {
                          "text":"/* ... the code that must run at end of method ... */"
                        }
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReturnStatementNode",
                    "expression":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"rc",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":"} "
                  }
                ]
              },
              "rawText":"public bool myMethod() { boolean rc = lastCondition; /* ... code-1 ... */ if (thisCondition) { rc = false; } else { /* ... code-2 ... */ if (thatCondition) { rc = false; } else { /* ... code-3 ... */ rc = ???; } } /* ... the code that must run at end of method ... */ return rc; } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "condit":3,
                    "run":1,
                    "code":4,
                    "bool":1,
                    "end":1,
                    "fals":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"bool",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"boolean",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"rc",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"lastCondition",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"boolean",
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>Simplifying</strong> the code yields:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2231120]-[2117028897]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>Simplifying</strong> the code yields:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "simplifi":1,
                    "yield":1,
                    "strong":2,
                    "code":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public bool myMethod() { boolean rc = false; /* ... code-1 ... */ if (!thisCondition) { /* ... code-2 ... */ if (!thatCondition) { /* ... code-3 ... */ rc = lastCondition; } } /* ... the code that must run at end of method ... */ return rc; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2231120]-[974011157]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"public",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"bool",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myMethod",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"LocalVariableDeclarationStatementNode",
                          "modifiers":[
                            
                          ],
                          "declarators":{
                            "type":"VariableDeclaratorsNode",
                            "declarators":[
                              {
                                "type":"VariableDeclaratorNode",
                                "identifier":{
                                  "type":"IdentifierNode",
                                  "name":"rc",
                                  "comments":[
                                    
                                  ]
                                },
                                "arrayDepth":[
                                  
                                ],
                                "assignment":{
                                  "type":"VariableAssignmentNode",
                                  "variableAssignment":{
                                    "type":"VariableExpressionInitNode",
                                    "expression":{
                                      "type":"LiteralNode",
                                      "node":{
                                        "type":"BooleanLiteralNode",
                                        "valueRep":"false"
                                      },
                                      "comments":[
                                        
                                      ]
                                    }
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "varType":{
                                  "type":"PrimitiveTypeNode",
                                  "name":"boolean",
                                  "comments":[
                                    
                                  ]
                                }
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            {
                              "text":"/* ... code-1 ... */"
                            }
                          ]
                        },
                        {
                          "type":"IfStatementNode",
                          "expression":{
                            "type":"PrefixOperatorExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":"!",
                              "comments":[
                                
                              ]
                            },
                            "argument":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"thisCondition",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"IfStatementNode",
                                "expression":{
                                  "type":"PrefixOperatorExpressionNode",
                                  "operator":{
                                    "type":"OperatorNode",
                                    "symbol":"!",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "argument":{
                                    "type":"QualifiedIdentifierNode",
                                    "identifiers":[
                                      {
                                        "type":"IdentifierNode",
                                        "name":"thatCondition",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "statement":{
                                  "type":"BlockNode",
                                  "statements":[
                                    {
                                      "type":"ExpressionStatement",
                                      "expression":{
                                        "type":"BinaryExpressionNode",
                                        "operator":{
                                          "type":"OperatorNode",
                                          "symbol":"=",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "left":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"rc",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "right":{
                                          "type":"QualifiedIdentifierNode",
                                          "identifiers":[
                                            {
                                              "type":"IdentifierNode",
                                              "name":"lastCondition",
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      },
                                      "labels":[
                                        
                                      ]
                                    }
                                  ],
                                  "labels":[
                                    
                                  ],
                                  "comments":[
                                    {
                                      "text":"/* ... code-3 ... */"
                                    }
                                  ]
                                },
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              {
                                "text":"/* ... code-2 ... */"
                              },
                              {
                                "text":"/* ... the code that must run at end of method ... */"
                              }
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReturnStatementNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"rc",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"public bool myMethod() { boolean rc = false; /* ... code-1 ... */ if (!thisCondition) { /* ... code-2 ... */ if (!thatCondition) { /* ... code-3 ... */ rc = lastCondition; } } /* ... the code that must run at end of method ... */ return rc; } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "condit":3,
                    "run":1,
                    "code":4,
                    "bool":1,
                    "end":1,
                    "fals":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"bool",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"boolean",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"rc",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"BooleanLiteralNode",
                              "valueRep":"false"
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"PrimitiveTypeNode",
                        "name":"boolean",
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The simplified code also reveals what you're actually trying to achieve: you are using the test conditions to <em>avoid</em> executing code, therefore you should probably be executing that code when the conditions are <em>false</em> instead of doing something when they are <em>true</em>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2231120]-[-2141761593]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The simplified code also reveals what you're actually trying to achieve: you are using the test conditions to <em>avoid</em> executing code, therefore you should probably be executing that code when the conditions are <em>false</em> instead of doing something when they are <em>true</em>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "test":1,
                    "simplifi":1,
                    "condit":2,
                    "reveal":1,
                    "avoid":1,
                    "code":3,
                    "achiev":1,
                    "true":1,
                    "fals":1,
                    "execut":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>To answer your question about <strong>try-finally</strong> blocks: Yes, you can abuse them. Your example is not sufficiently complex enough to warrant the use of try-finally. If it were more complex, though, it might.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2231120]-[-628474278]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>To answer your question about <strong>try-finally</strong> blocks: Yes, you can abuse them. Your example is not sufficiently complex enough to warrant the use of try-finally. If it were more complex, though, it might.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "question":1,
                    "warrant":1,
                    "abus":1,
                    "strong":2,
                    "block":1,
                    "suffici":1,
                    "answer":1,
                    "complex":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>See my take on it at: <a href=\"http://david.tribble.com/text/goto.html#error-handling\"rel=\"nofollow\"><em>Go To Statement Considered Harmful: A Retrospective</em>, &quot;Exception Handling&quot;</a>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2231120]-[903188280]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>See my take on it at: <a href=\"http://david.tribble.com/text/goto.html#error-handling\"rel=\"nofollow\"><em>Go To Statement Considered Harmful: A Retrospective</em>, &quot;Exception Handling&quot;</a>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "tribbl":1,
                    "david":1,
                    "retrospect":1,
                    "rel":1,
                    "text":1,
                    "statement":1,
                    "nofollow":1,
                    "error":1,
                    "consid":1,
                    "quot":2,
                    "harm":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "handl":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2230927,
      "questionId":2230772,
      "comments":[
        
      ],
      "creationDate":"2010-02-09",
      "lastActivityDate":"2010-02-09",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":185541,
        "displayName":"rsp",
        "reputation":15132
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Unless the code that must run at the end of the method uses method local variables, you could extract it into a method like:</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230927]-[562324484]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Unless the code that must run at the end of the method uses method local variables, you could extract it into a method like:</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":3,
                    "run":1,
                    "local":1,
                    "code":1,
                    "end":1,
                    "variabl":1,
                    "extract":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"public boolean myMethod() { /* ... code ... */ if(thisCondition) { return myMethodCleanup(false); } /* ... more code ... */ if(thatCondition) { return myMethodCleanup(false); } /* ... even more code ... */ return myMethodCleanup(lastCondition); } private boolean myMethodCleanup(boolean result) { /* ... the CODE that must run at end of method ... */ return result; } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2230927]-[-1629852674]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"public",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"boolean",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myMethod",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"IfStatementNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"thisCondition",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"ReturnStatementNode",
                                "expression":{
                                  "type":"MethodInvocationNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"myMethodCleanup",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "args":{
                                    "type":"ExpressionListNode",
                                    "arguments":[
                                      {
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"BooleanLiteralNode",
                                          "valueRep":"false"
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              {
                                "text":"/* ... more code ... */"
                              }
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IfStatementNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"thatCondition",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "statement":{
                            "type":"BlockNode",
                            "statements":[
                              {
                                "type":"ReturnStatementNode",
                                "expression":{
                                  "type":"MethodInvocationNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"myMethodCleanup",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "args":{
                                    "type":"ExpressionListNode",
                                    "arguments":[
                                      {
                                        "type":"LiteralNode",
                                        "node":{
                                          "type":"BooleanLiteralNode",
                                          "valueRep":"false"
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                },
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "labels":[
                              
                            ],
                            "comments":[
                              {
                                "text":"/* ... even more code ... */"
                              }
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ReturnStatementNode",
                          "expression":{
                            "type":"MethodInvocationNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"myMethodCleanup",
                              "comments":[
                                
                              ]
                            },
                            "args":{
                              "type":"ExpressionListNode",
                              "arguments":[
                                {
                                  "type":"QualifiedIdentifierNode",
                                  "identifiers":[
                                    {
                                      "type":"IdentifierNode",
                                      "name":"lastCondition",
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        {
                          "text":"/* ... code ... */"
                        }
                      ]
                    },
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"MethodDeclaratorNode",
                    "modifiers":[
                      {
                        "type":"KeywordModifierNode",
                        "value":"private",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "returnType":{
                      "type":"PrimitiveTypeNode",
                      "name":"boolean",
                      "comments":[
                        
                      ]
                    },
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"myMethodCleanup",
                      "comments":[
                        
                      ]
                    },
                    "parameters":{
                      "type":"FormalParametersNode",
                      "parameters":{
                        "type":"FormalParameterDeclsNode",
                        "modifiers":[
                          
                        ],
                        "parameterType":{
                          "type":"PrimitiveTypeNode",
                          "name":"boolean",
                          "comments":[
                            
                          ]
                        },
                        "nextDeclarator":{
                          "type":"AdditionalFormalParameterDeclNode",
                          "variableDeclarator":{
                            "type":"VariableDeclaratorNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"result",
                              "comments":[
                                
                              ]
                            },
                            "arrayDepth":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      },
                      "comments":[
                        
                      ]
                    },
                    "arrayReturnType":[
                      
                    ],
                    "body":{
                      "type":"BlockNode",
                      "statements":[
                        {
                          "type":"ReturnStatementNode",
                          "expression":{
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"result",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          },
                          "labels":[
                            
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        {
                          "text":"/* ... the CODE that must run at end of method ... */"
                        }
                      ]
                    },
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":"public boolean myMethod() { /* ... code ... */ if(thisCondition) { return myMethodCleanup(false); } /* ... more code ... */ if(thatCondition) { return myMethodCleanup(false); } /* ... even more code ... */ return myMethodCleanup(lastCondition); } private boolean myMethodCleanup(boolean result) { /* ... the CODE that must run at end of method ... */ return result; } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":6,
                    "condit":3,
                    "run":1,
                    "result":2,
                    "code":4,
                    "cleanup":4,
                    "end":1,
                    "fals":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"boolean",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"myMethodCleanup",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"BooleanLiteralNode",
                              "valueRep":"false"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"myMethodCleanup",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"lastCondition",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"result",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>this still doesn't look very nice, but it is better than using goto-like constructs. To convince your team mates that a 1-return solution might not be that bad, you can also present a version using 2 <code>do { ... } while (false);</code> and <code>break</code>'s (*evil grin*.)</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230927]-[732137573]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>this still doesn't look very nice, but it is better than using goto-like constructs. To convince your team mates that a 1-return solution might not be that bad, you can also present a version using 2 <code>do { ... } while (false);</code> and <code>break</code>'s (*evil grin*.)</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"WhileStatementNode",
                    "expression":{
                      "type":"LiteralNode",
                      "node":{
                        "type":"BooleanLiteralNode",
                        "valueRep":"false"
                      },
                      "comments":[
                        
                      ]
                    },
                    "statement":{
                      "type":"EmptyStatementNode",
                      "comma":{
                        "type":"SeparatorNode",
                        "symbol":";",
                        "comments":[
                          
                        ]
                      },
                      "labels":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "present":1,
                    "grin":1,
                    "bad":1,
                    "nice":1,
                    "code":4,
                    "version":1,
                    "convinc":1,
                    "team":1,
                    "fals":1,
                    "mate":1,
                    "evil":1,
                    "construct":1,
                    "solut":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2230879,
      "questionId":2230772,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2186061,
          "postId":2230879,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":176741,
            "displayName":"Dolph",
            "reputation":14424
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I didn't consider a performance impact, I would like to know if there is one."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230879-cu2186061]-[-1193280877]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I didn't consider a performance impact, I would like to know if there is one."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "impact":1,
                        "perform":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186191,
          "postId":2230879,
          "creationDate":"2010-02-09",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":8946,
            "displayName":"Lawrence Dol",
            "reputation":30760
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Exception *generation* is *relatively* expensive, I don't think exception *handling* or try/finally itself is particularly so."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230879-cu2186191]-[1963736037]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Exception *generation* is *relatively* expensive, I don't think exception *handling* or try/finally itself is particularly so."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "handl":1,
                        "expens":1,
                        "generat":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186457,
          "postId":2230879,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":125382,
            "displayName":"MAK",
            "reputation":13344
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Dolph Matthews: I am really not sure about this, and Software Monkey is probably right. I guess the best thing to do to know for sure is to profile your code with the large try block and find out yourself."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230879-cu2186457]-[1392399435]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Dolph Matthews: I am really not sure about this, and Software Monkey is probably right. I guess the best thing to do to know for sure is to profile your code with the large try block and find out yourself."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Dolph",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "profil":1,
                        "softwar":1,
                        "thing":1,
                        "monkey":1,
                        "code":1,
                        "block":1,
                        "larg":1,
                        "matthew":1,
                        "dolph":1,
                        "guess":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-02-09",
      "lastActivityDate":"2010-02-09",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":125382,
        "displayName":"MAK",
        "reputation":13344
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>IMO the idea is to put a <code>try</code> block over a small part of code (e.g. a method call) that can throw a known exception (e.g. reading from a file, reading an <code>int</code> to a <code>String</code>). So putting a <code>try</code> block over the whole code of a method is really not the way to go, unless you are actually expecting each and every <code>if</code> condition code to potentially throw the same set of exceptions. I don't see a point in using a <code>try</code> block just for the sake of using a <code>finally</code>. </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230879]-[349380103]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>IMO the idea is to put a <code>try</code> block over a small part of code (e.g. a method call) that can throw a known exception (e.g. reading from a file, reading an <code>int</code> to a <code>String</code>). So putting a <code>try</code> block over the whole code of a method is really not the way to go, unless you are actually expecting each and every <code>if</code> condition code to potentially throw the same set of exceptions. I don't see a point in using a <code>try</code> block just for the sake of using a <code>finally</code>. </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "read":2,
                    "method":2,
                    "point":1,
                    "imo":1,
                    "sake":1,
                    "condit":1,
                    "potenti":1,
                    "set":1,
                    "idea":1,
                    "code":17,
                    "small":1,
                    "block":3,
                    "expect":1,
                    "put":2,
                    "file":1,
                    "part":1,
                    "except":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>If I am not mistaken, putting large chunks of code inside a <code>try</code> also makes it a lot slower, but not sure if this is true in the latest versions of Java.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230879]-[-636269251]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>If I am not mistaken, putting large chunks of code inside a <code>try</code> also makes it a lot slower, but not sure if this is true in the latest versions of Java.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "chunk":1,
                    "mistaken":1,
                    "code":3,
                    "version":1,
                    "larg":1,
                    "slower":1,
                    "insid":1,
                    "true":1,
                    "lot":1,
                    "make":1,
                    "put":1,
                    "latest":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Personally, I would go with Option C. But I don't have anything against Option A either.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230879]-[1872335716]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Personally, I would go with Option C. But I don't have anything against Option A either.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "person":1,
                    "option":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2230866,
      "questionId":2230772,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2186040,
          "postId":2230866,
          "creationDate":"2010-02-09",
          "score":2,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":8946,
            "displayName":"Lawrence Dol",
            "reputation":30760
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Because this is horrible code that keeps getting more horrible the more conditions that exist."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230866-cu2186040]-[-1753715845]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Because this is horrible code that keeps getting more horrible the more conditions that exist."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "horribl":2,
                        "exist":1,
                        "condit":1,
                        "code":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2187202,
          "postId":2230866,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":4782,
            "displayName":"chris",
            "reputation":11927
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Some times you have to break the rules. If it solves your problem, then do it. Architectural purity and abstract concepts sometimes gets in the way of reality."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230866-cu2187202]-[-1718098353]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Some times you have to break the rules. If it solves your problem, then do it. Architectural purity and abstract concepts sometimes gets in the way of reality."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "solv":1,
                        "problem":1,
                        "rule":1,
                        "realiti":1,
                        "architectur":1,
                        "concept":1,
                        "puriti":1,
                        "time":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2192710,
          "postId":2230866,
          "creationDate":"2010-02-10",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":4782,
            "displayName":"chris",
            "reputation":11927
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"That's what I meant: it doesn't matter if it's an &quot;abuse&quot; of try/finally, if it works and solves your problems, do it."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230866-cu2192710]-[-1006103786]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"That's what I meant: it doesn't matter if it's an &quot;abuse&quot; of try/finally, if it works and solves your problems, do it."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "solv":1,
                        "problem":1,
                        "abus":1,
                        "work":1,
                        "meant":1,
                        "quot":2,
                        "matter":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2190205,
          "postId":2230866,
          "creationDate":"2010-02-10",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":8946,
            "displayName":"Lawrence Dol",
            "reputation":30760
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Absolutely. But using try/finally is far better code than this."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230866-cu2190205]-[1906829937]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Absolutely. But using try/finally is far better code than this."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "code":1,
                        "absolut":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-02-09",
      "lastActivityDate":"2010-02-09",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":4782,
        "displayName":"chris",
        "reputation":11927
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Is there a reason that you can't simply store the return value, and fall out of the if?</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230866]-[-870365180]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Is there a reason that you can't simply store the return value, and fall out of the if?</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "store":1,
                    "fall":1,
                    "simpli":1,
                    "reason":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":" bool retVal = true; if (retVal &amp;&amp; thisCondition) { } /* more code */ if ( retVal ) { /* ... code that must run at end of method, maybe inside an if or maybe not... */ } return retVal; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[2230866]-[-669180702]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":" bool "
                  },
                  {
                    "type":"ExpressionStatement",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"=",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"retVal",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"LiteralNode",
                        "node":{
                          "type":"BooleanLiteralNode",
                          "valueRep":"true"
                        },
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ]
                  },
                  {
                    "type":"IfStatementNode",
                    "expression":{
                      "type":"BinaryExpressionNode",
                      "operator":{
                        "type":"OperatorNode",
                        "symbol":"&&",
                        "comments":[
                          
                        ]
                      },
                      "left":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"retVal",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "right":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"thisCondition",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    "statement":{
                      "type":"BlockNode",
                      "statements":[
                        
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        {
                          "text":"/* more code */"
                        }
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"IfStatementNode",
                    "expression":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"retVal",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "statement":{
                      "type":"BlockNode",
                      "statements":[
                        
                      ],
                      "labels":[
                        
                      ],
                      "comments":[
                        {
                          "text":"/* ... code that must run at end of method, maybe inside an if or maybe not... */"
                        }
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"ReturnStatementNode",
                    "expression":{
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"retVal",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "rawText":" bool retVal = true; if (retVal && thisCondition) { } /* more code */ if ( retVal ) { /* ... code that must run at end of method, maybe inside an if or maybe not... */ } return retVal; ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "ret":4,
                    "condit":1,
                    "run":1,
                    "code":2,
                    "bool":1,
                    "insid":1,
                    "true":1,
                    "end":1,
                    "val":4
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":2230824,
      "questionId":2230772,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":2186028,
          "postId":2230824,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":8946,
            "displayName":"Lawrence Dol",
            "reputation":30760
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"And what is wrong with judicious use of goto when it makes the program flow clearer and less error-prone? After all, that is what break, continue and return are, esp labelled break and continue."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230824-cu2186028]-[1987386258]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"And what is wrong with judicious use of goto when it makes the program flow clearer and less error-prone? After all, that is what break, continue and return are, esp labelled break and continue."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "wrong":1,
                        "label":1,
                        "prone":1,
                        "error":1,
                        "flow":1,
                        "make":1,
                        "clearer":1,
                        "esp":1,
                        "judici":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186084,
          "postId":2230824,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":176741,
            "displayName":"Dolph",
            "reputation":14424
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I think breaks are okay, continues are okay, and returns are okay, but if you use them all in the same method... YIKES!"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230824-cu2186084]-[-1063264931]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I think breaks are okay, continues are okay, and returns are okay, but if you use them all in the same method... YIKES!"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "break":1,
                        "continu":1,
                        "return":1,
                        "yike":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186144,
          "postId":2230824,
          "creationDate":"2010-02-09",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":8946,
            "displayName":"Lawrence Dol",
            "reputation":30760
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Dolph: If you haven't used all of them in the same method, you probably haven't been writing code for very long. (smile). Get back to me in 10 or 20 years."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230824-cu2186144]-[470722855]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Dolph: If you haven't used all of them in the same method, you probably haven't been writing code for very long. (smile). Get back to me in 10 or 20 years."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Dolph",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "year":1,
                        "smile":1,
                        "code":1,
                        "back":1,
                        "dolph":1,
                        "write":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186229,
          "postId":2230824,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":216743,
            "displayName":"Brian T Hannan",
            "reputation":1165
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I think GOTO can be very useful at times, but like most things in life they are only good in moderation. Use the tool at the right time and you shall be rewarded, but if you use it all the time you might find yourself in a bad place."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230824-cu2186229]-[-1064842137]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I think GOTO can be very useful at times, but like most things in life they are only good in moderation. Use the tool at the right time and you shall be rewarded, but if you use it all the time you might find yourself in a bad place."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "find":1,
                        "good":1,
                        "tool":1,
                        "moder":1,
                        "reward":1,
                        "bad":1,
                        "thing":1,
                        "life":1,
                        "place":1,
                        "time":3
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186328,
          "postId":2230824,
          "creationDate":"2010-02-09",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":176741,
            "displayName":"Dolph",
            "reputation":14424
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Software Monkey: If I ever see all three in one method *in Java*, heads will roll."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230824-cu2186328]-[2020879849]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Software Monkey: If I ever see all three in one method *in Java*, heads will roll."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Software",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "head":1,
                        "softwar":1,
                        "monkey":1,
                        "roll":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2186983,
          "postId":2230824,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":8946,
            "displayName":"Lawrence Dol",
            "reputation":30760
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Dolph: It's very good to have principles and to follow them... just remember that programming is best approached as an art, not a religion (and despite us calling ourselves engineers, it's not strictly an engineering discipline)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230824-cu2186983]-[-1206505005]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Dolph: It's very good to have principles and to follow them... just remember that programming is best approached as an art, not a religion (and despite us calling ourselves engineers, it's not strictly an engineering discipline)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Dolph",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "program":1,
                        "art":1,
                        "strict":1,
                        "good":1,
                        "disciplin":1,
                        "principl":1,
                        "rememb":1,
                        "engin":2,
                        "approach":1,
                        "dolph":1,
                        "religion":1,
                        "call":1,
                        "follow":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":2189035,
          "postId":2230824,
          "creationDate":"2010-02-09",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":178526,
            "displayName":"sfussenegger",
            "reputation":17647
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"using return, break and continue in one method is blasphemy nevertheless ;)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[2230824-cu2189035]-[779226000]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"using return, break and continue in one method is blasphemy nevertheless ;)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "method":1,
                        "blasphemi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2010-02-09",
      "lastActivityDate":"2010-02-09",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":72478,
        "displayName":"cherouvim",
        "reputation":19244
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Using try/finally for controlling flow feels to me like using GOTO.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[2230824]-[-1181758284]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Using try/finally for controlling flow feels to me like using GOTO.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "flow":1,
                    "control":1,
                    "feel":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}