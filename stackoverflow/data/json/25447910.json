{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":25447910,
    "title":"How can I create an instance of class without invoking constructor of this class?",
    "comments":[
      {
        "type":"StackOverflowComment",
        "id":39705454,
        "postId":25447910,
        "creationDate":"2014-08-22",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1924068,
          "displayName":"Yann",
          "reputation":689
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Hi, could you edit and provide some code where you're finding this error?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25447910-cu39705454]-[-1534717082]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Hi, could you edit and provide some code where you're finding this error?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "find":1,
                      "provid":1,
                      "code":1,
                      "edit":1,
                      "error":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":39705489,
        "postId":25447910,
        "creationDate":"2014-08-22",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2344747,
          "displayName":"Rush2sk8",
          "reputation":191
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"this isnt possible becasue the constructor is what makes an object."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25447910-cu39705489]-[1406987825]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"this isnt possible becasue the constructor is what makes an object."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "constructor":1,
                      "isnt":1,
                      "object":1,
                      "make":1,
                      "becasu":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":39705490,
        "postId":25447910,
        "creationDate":"2014-08-22",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3040064,
          "displayName":"HuStmpHrrr",
          "reputation":1328
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"i don't have any idea. how could that be allowed to happen?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25447910-cu39705490]-[-530631823]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"i don't have any idea. how could that be allowed to happen?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "happen":1,
                      "idea":1,
                      "allow":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":39705510,
        "postId":25447910,
        "creationDate":"2014-08-22",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2192903,
          "displayName":"Arnaud Denoyelle",
          "reputation":7853
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Maybe you think about invoking static methods which actually call the constructor like `Sets.newHashSet()` with Guava?"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25447910-cu39705510]-[-292204604]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Maybe you think about invoking static methods which actually call the constructor like `Sets.newHashSet()` with Guava?"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    {
                      "type":"QualifiedIdentifierNode",
                      "identifiers":[
                        {
                          "type":"IdentifierNode",
                          "name":"Sets",
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"IdentifierNode",
                          "name":"newHashSet",
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "method":1,
                      "set":2,
                      "invok":1,
                      "constructor":1,
                      "hash":1,
                      "call":1,
                      "guava":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":39705597,
        "postId":25447910,
        "creationDate":"2014-08-22",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":3487063,
          "displayName":"user3487063",
          "reputation":1596
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"The example you are looking can be found on https://code.google.com/p/objenesis/, when here's no public constructor, you want to bypass the constructor code, or set final fields"
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25447910-cu39705597]-[-1803798370]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"The example you are looking can be found on https://code.google.com/p/objenesis/, when here's no public constructor, you want to bypass the constructor code, or set final fields"
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "googl":1,
                      "field":1,
                      "set":1,
                      "constructor":2,
                      "https":1,
                      "code":2,
                      "found":1,
                      "bypass":1,
                      "objenesi":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":39705608,
        "postId":25447910,
        "creationDate":"2014-08-22",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":1343161,
          "displayName":"Keppil",
          "reputation":29291
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"You can create a `String` without ecplicitly invoking a constructor, using a literal."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25447910-cu39705608]-[-1101739109]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"You can create a `String` without ecplicitly invoking a constructor, using a literal."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "liter":1,
                      "invok":1,
                      "constructor":1,
                      "ecplicit":1,
                      "creat":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"StackOverflowComment",
        "id":39705811,
        "postId":25447910,
        "creationDate":"2014-08-22",
        "score":0,
        "isEdited":false,
        "owner":{
          "type":"StackOverflowUser",
          "id":2182928,
          "displayName":"Rudi",
          "reputation":3713
        },
        "source":[
          {
            "type":"SourceInfo",
            "node":{
              "type":"XmlTextNode",
              "contents":"Could you clarify on what you mean by invoking a constructor of this class? Because, as pointed out already at least one constructor in a classes' hierarchy (Object's constructor for example) will **ALWAYS** run, even when deserializing objects."
            },
            "units":[
              {
                "type":"TextUnit",
                "id":"[25447910-cu39705811]-[-2070124032]",
                "astNode":{
                  "type":"TextFragmentNode",
                  "text":"Could you clarify on what you mean by invoking a constructor of this class? Because, as pointed out already at least one constructor in a classes' hierarchy (Object's constructor for example) will **ALWAYS** run, even when deserializing objects."
                },
                "codeFragments":{
                  "type":"CodeFragmentSequence",
                  "fragments":[
                    
                  ]
                },
                "metaInformation":[
                  {
                    "type":"NaturalLanguageMetaInformation",
                    "tfMap":{
                      "point":1,
                      "run":1,
                      "invok":1,
                      "constructor":3,
                      "object":2,
                      "hierarchi":1,
                      "class":1,
                      "deseri":1,
                      "clarifi":1
                    }
                  },
                  {
                    "type":"CodeTypesMetaInformation",
                    "qualifiedTypes":[
                      
                    ],
                    "simpleTypes":[
                      
                    ],
                    "basicTypes":[
                      
                    ]
                  },
                  {
                    "type":"CodeInvocationMetaInformation",
                    "invocations":[
                      
                    ]
                  },
                  {
                    "type":"CodeVariablesMetaInformation",
                    "variables":[
                      
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "tags":[
      "java"
    ],
    "creationDate":"2014-08-22",
    "lastActivityDate":"2014-08-22",
    "lastEditDate":"2014-08-22",
    "score":2,
    "viewCount":106,
    "owner":{
      "type":"StackOverflowUser",
      "id":3712077,
      "displayName":"barbara",
      "reputation":497
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>There are some cases when we can create an instance without invoking a constructor of instance class. Any ideas what are these cases (Non <em>Reflection API</em>)? </p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[25447910]-[-244307439]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>There are some cases when we can create an instance without invoking a constructor of instance class. Any ideas what are these cases (Non <em>Reflection API</em>)? </p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "idea":1,
                  "invok":1,
                  "constructor":1,
                  "api":1,
                  "case":2,
                  "creat":1,
                  "reflect":1,
                  "instanc":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":25447981,
      "questionId":25447910,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":39705640,
          "postId":25447981,
          "creationDate":"2014-08-22",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1705598,
            "displayName":"icza",
            "reputation":19360
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"&quot;Not bad!&quot; should be upvote."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25447981-cu39705640]-[-2062366150]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"&quot;Not bad!&quot; should be upvote."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "quot":2,
                        "upvot":1,
                        "bad":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39705647,
          "postId":25447981,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1864167,
            "displayName":"Jeroen Vannevel",
            "reputation":23020
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Can you elaborate on how they don't use a constructor? Every instance has to be created through a constructor as far as I know, all these do is hide it."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25447981-cu39705647]-[1007915113]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Can you elaborate on how they don't use a constructor? Every instance has to be created through a constructor as far as I know, all these do is hide it."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "constructor":2,
                        "hide":1,
                        "elabor":1,
                        "creat":1,
                        "instanc":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39705698,
          "postId":25447981,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2541560,
            "displayName":"Kayaman",
            "reputation":14078
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@JeroenVannevel No they don't hide it. It's JVM magic, the constructor is never called (which can be easily tested)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25447981-cu39705698]-[-545469768]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@JeroenVannevel No they don't hide it. It's JVM magic, the constructor is never called (which can be easily tested)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"JeroenVannevel",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jvm":1,
                        "test":1,
                        "vannevel":1,
                        "constructor":1,
                        "easili":1,
                        "jeroen":1,
                        "hide":1,
                        "magic":1,
                        "call":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39705726,
          "postId":25447981,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2169264,
            "displayName":"Michał Schielmann",
            "reputation":880
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@JeroenVannevel Isn't clone implemented by a native method? http://stackoverflow.com/questions/6825982/how-does-clone-work-under-the-hood"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25447981-cu39705726]-[2107728186]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@JeroenVannevel Isn't clone implemented by a native method? http://stackoverflow.com/questions/6825982/how-does-clone-work-under-the-hood"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"JeroenVannevel",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "method":1,
                        "vannevel":1,
                        "work":1,
                        "hood":1,
                        "stackoverflow":1,
                        "jeroen":1,
                        "clone":2,
                        "isn":1,
                        "implement":1,
                        "http":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39705790,
          "postId":25447981,
          "creationDate":"2014-08-22",
          "score":6,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2459730,
            "displayName":"Andrew_CS",
            "reputation":1583
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@barbara What do you mean it's not the &quot;correct&quot; answer? Either you are saying this isn't right (then you should explain why) or you know the answer to your own question and are wasting peoples time."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25447981-cu39705790]-[386103722]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@barbara What do you mean it's not the &quot;correct&quot; answer? Either you are saying this isn't right (then you should explain why) or you know the answer to your own question and are wasting peoples time."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "question":1,
                        "wast":1,
                        "explain":1,
                        "correct":1,
                        "barbara":1,
                        "isn":1,
                        "answer":2,
                        "quot":2,
                        "time":1,
                        "peopl":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39705865,
          "postId":25447981,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1864167,
            "displayName":"Jeroen Vannevel",
            "reputation":23020
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Ah, I wasn't aware about `clone()`'s special case. As to deserialization I figured a default constructor was invoked and reflection used to fill its values, but I never explicitly looked into it."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25447981-cu39705865]-[-1584278233]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Ah, I wasn't aware about `clone()`'s special case. As to deserialization I figured a default constructor was invoked and reflection used to fill its values, but I never explicitly looked into it."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "look":1,
                        "invok":1,
                        "constructor":1,
                        "wasn":1,
                        "awar":1,
                        "fill":1,
                        "clone":1,
                        "valu":1,
                        "figur":1,
                        "deseri":1,
                        "special":1,
                        "explicit":1,
                        "reflect":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39706116,
          "postId":25447981,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1705598,
            "displayName":"icza",
            "reputation":19360
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@Andrew_CS About wasting other's time: not eactly: http://stackoverflow.com/help/self-answer"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25447981-cu39706116]-[-55830505]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@Andrew_CS About wasting other's time: not eactly: http://stackoverflow.com/help/self-answer"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"Andrew_CS",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "wast":1,
                        "andrew":1,
                        "stackoverflow":1,
                        "answer":1,
                        "eact":1,
                        "time":1,
                        "http":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39706167,
          "postId":25447981,
          "creationDate":"2014-08-22",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2459730,
            "displayName":"Andrew_CS",
            "reputation":1583
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@icza That would be fine if the OP did that."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25447981-cu39706167]-[-1561648405]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@icza That would be fine if the OP did that."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "icza":1,
                        "fine":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-08-22",
      "lastActivityDate":"2014-08-22",
      "score":3,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2541560,
        "displayName":"Kayaman",
        "reputation":14078
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Two &quot;common&quot; cases involving non-constructor based object creation are <code>deserialization</code> and <code>clone()</code>.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25447981]-[-482289994]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Two &quot;common&quot; cases involving non-constructor based object creation are <code>deserialization</code> and <code>clone()</code>.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "involv":1,
                    "constructor":1,
                    "creation":1,
                    "object":1,
                    "base":1,
                    "code":4,
                    "common":1,
                    "clone":1,
                    "quot":2,
                    "deseri":1,
                    "case":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":25448023,
      "questionId":25447910,
      "comments":[
        
      ],
      "creationDate":"2014-08-22",
      "lastActivityDate":"2014-08-22",
      "score":1,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":3182664,
        "displayName":"Marco13",
        "reputation":17142
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>The only cases that I can imagine are serialization and JNI.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25448023]-[173475777]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>The only cases that I can imagine are serialization and JNI.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "jni":1,
                    "imagin":1,
                    "serial":1,
                    "case":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>With serialization, you create a new object by deserializing the whole object state from an input stream. No constructor is invoked in this case.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25448023]-[-1437967152]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>With serialization, you create a new object by deserializing the whole object state from an input stream. No constructor is invoked in this case.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":1,
                    "state":1,
                    "invok":1,
                    "constructor":1,
                    "object":2,
                    "stream":1,
                    "deseri":1,
                    "creat":1,
                    "input":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>With JNI, there is the <a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html#wp16337\"rel=\"nofollow\">AllocObject</a> function, which allocates the space for a new object, also without calling a constructor.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25448023]-[217463475]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>With JNI, there is the <a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html#wp16337\"rel=\"nofollow\">AllocObject</a> function, which allocates the space for a new object, also without calling a constructor.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"AllocObject",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":2,
                    "guid":1,
                    "rel":1,
                    "constructor":1,
                    "oracl":1,
                    "doc":2,
                    "object":2,
                    "technot":1,
                    "jni":2,
                    "nofollow":1,
                    "space":1,
                    "function":2,
                    "spec":1,
                    "javas":1,
                    "html":1,
                    "href":1,
                    "http":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"AllocObject",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>EDIT: A call to <code>clone()</code> may be considered as another case, but this depends on how the method is implemented.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25448023]-[2029088290]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>EDIT: A call to <code>clone()</code> may be considered as another case, but this depends on how the method is implemented.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":1,
                    "depend":1,
                    "code":2,
                    "edit":1,
                    "consid":1,
                    "clone":1,
                    "implement":1,
                    "call":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":25448017,
      "questionId":25447910,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":39705775,
          "postId":25448017,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2541560,
            "displayName":"Kayaman",
            "reputation":14078
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Going through Unsafe is just nasty ;)"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25448017-cu39705775]-[353673824]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Going through Unsafe is just nasty ;)"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "nasti":1,
                        "unsaf":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39705784,
          "postId":25448017,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3712077,
            "displayName":"barbara",
            "reputation":497
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"But this is *Reflection API*, right?"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25448017-cu39705784]-[436280677]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"But this is *Reflection API*, right?"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "reflect":1,
                        "api":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39705795,
          "postId":25448017,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":438154,
            "displayName":"Sotirios Delimanolis",
            "reputation":109745
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@barbara It is not."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25448017-cu39705795]-[-1295692901]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@barbara It is not."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "barbara":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39705824,
          "postId":25448017,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":2541560,
            "displayName":"Kayaman",
            "reputation":14078
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Reflection is usually considered bad, Unsafe is just evil."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25448017-cu39705824]-[2044863045]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Reflection is usually considered bad, Unsafe is just evil."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "bad":1,
                        "consid":1,
                        "unsaf":1,
                        "evil":1,
                        "reflect":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39705996,
          "postId":25448017,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1705598,
            "displayName":"icza",
            "reputation":19360
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Interesting to note: if `value` is declared `final`, it **will** be initialized and then `&quot;42&quot;` will be printed."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25448017-cu39705996]-[446302318]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Interesting to note: if `value` is declared `final`, it **will** be initialized and then `&quot;42&quot;` will be printed."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "print":1,
                        "declar":1,
                        "interest":1,
                        "note":1,
                        "quot":2,
                        "initi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39706077,
          "postId":25448017,
          "creationDate":"2014-08-22",
          "score":1,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":438154,
            "displayName":"Sotirios Delimanolis",
            "reputation":109745
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@icza Not exactly. If you print it out with `instance.value`, it will print `&quot;42&quot;`, because it's a constant expression and was replaced at compile time. But if you retrieve it dynamically with a `Field` instance, it will actually be `null`."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25448017-cu39706077]-[-226335678]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@icza Not exactly. If you print it out with `instance.value`, it will print `&quot;42&quot;`, because it's a constant expression and was replaced at compile time. But if you retrieve it dynamically with a `Field` instance, it will actually be `null`."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "constant":1,
                        "field":1,
                        "retriev":1,
                        "print":2,
                        "dynam":1,
                        "replac":1,
                        "icza":1,
                        "express":1,
                        "quot":2,
                        "compil":1,
                        "time":1,
                        "instanc":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39706095,
          "postId":25448017,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":438154,
            "displayName":"Sotirios Delimanolis",
            "reputation":109745
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@icza Similarly, if you declared it `final` and initialized it in a constructor, you would again see it `null`."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25448017-cu39706095]-[1720420401]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@icza Similarly, if you declared it `final` and initialized it in a constructor, you would again see it `null`."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "similar":1,
                        "constructor":1,
                        "declar":1,
                        "icza":1,
                        "initi":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39706205,
          "postId":25448017,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1705598,
            "displayName":"icza",
            "reputation":19360
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@SotiriosDelimanolis You're right, it's just a compiler optimization (although a false one in this case... even the compiler assumes a constructor will be called)."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25448017-cu39706205]-[-2052675652]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@SotiriosDelimanolis You're right, it's just a compiler optimization (although a false one in this case... even the compiler assumes a constructor will be called)."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"AnnotationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"SotiriosDelimanolis",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "assum":1,
                        "constructor":1,
                        "sotirio":1,
                        "optim":1,
                        "delimanoli":1,
                        "fals":1,
                        "compil":2,
                        "call":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39722229,
          "postId":25448017,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3691745,
            "displayName":"markbernard",
            "reputation":598
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"Reflection is not bad. Lots of libraries have a legitimate use for it. Writing a plugin system is one use. Unsafe should be avoided like the plague if you want high quality stable software. If it is a personal project or some sort of way out in left field project then do whatever it takes."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25448017-cu39722229]-[1671376638]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"Reflection is not bad. Lots of libraries have a legitimate use for it. Writing a plugin system is one use. Unsafe should be avoided like the plague if you want high quality stable software. If it is a personal project or some sort of way out in left field project then do whatever it takes."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "plugin":1,
                        "system":1,
                        "field":1,
                        "project":2,
                        "left":1,
                        "stabl":1,
                        "softwar":1,
                        "bad":1,
                        "librari":1,
                        "legitim":1,
                        "avoid":1,
                        "plagu":1,
                        "take":1,
                        "person":1,
                        "lot":1,
                        "qualiti":1,
                        "unsaf":1,
                        "sort":1,
                        "reflect":1,
                        "write":1,
                        "high":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39720915,
          "postId":25448017,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":368772,
            "displayName":"tcooc",
            "reputation":5496
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"@barbara To clarify, this uses Reflection to get the `Unsafe` instance, but it doesn't use reflection to create the `Example` instance."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25448017-cu39720915]-[1747324917]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"@barbara To clarify, this uses Reflection to get the `Unsafe` instance, but it doesn't use reflection to create the `Example` instance."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "barbara":1,
                        "unsaf":1,
                        "creat":1,
                        "clarifi":1,
                        "reflect":2,
                        "instanc":2
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-08-22",
      "lastActivityDate":"2014-08-22",
      "score":3,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":438154,
        "displayName":"Sotirios Delimanolis",
        "reputation":109745
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>Here's a sure way to break your system, but at least it <strong>won't invoke the constructor</strong>. Use <code>Unsafe#allocateInstance(Class)</code></p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25448017]-[-1748032887]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>Here's a sure way to break your system, but at least it <strong>won't invoke the constructor</strong>. Use <code>Unsafe#allocateInstance(Class)</code></p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"allocateInstance",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "alloc":1,
                    "system":1,
                    "invok":1,
                    "constructor":1,
                    "strong":2,
                    "code":2,
                    "unsaf":1,
                    "won":1,
                    "instanc":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"import java.lang.reflect.Field; import sun.misc.Unsafe; public class Example { private String value = &quot;42&quot;; public static void main(String[] args) throws Exception { Example instance = (Example) unsafe.allocateInstance(Example.class); System.out.println(instance.value); } static Unsafe unsafe; static { try { Field singleoneInstanceField = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;); singleoneInstanceField.setAccessible(true); unsafe = (Unsafe) singleoneInstanceField.get(null); } catch (Exception e) { e.printStackTrace(); } } } "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[25448017]-[69069092]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"CompilationUnitNode",
                    "imports":[
                      {
                        "type":"ImportDeclarationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"java",
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IdentifierNode",
                              "name":"lang",
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IdentifierNode",
                              "name":"reflect",
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IdentifierNode",
                              "name":"Field",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "isStatic":false,
                        "isOnDemand":false,
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"ImportDeclarationNode",
                        "identifier":{
                          "type":"QualifiedIdentifierNode",
                          "identifiers":[
                            {
                              "type":"IdentifierNode",
                              "name":"sun",
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IdentifierNode",
                              "name":"misc",
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "isStatic":false,
                        "isOnDemand":false,
                        "comments":[
                          
                        ]
                      }
                    ],
                    "typeDeclarations":[
                      {
                        "type":"ClassDeclarationNode",
                        "modifiers":[
                          {
                            "type":"KeywordModifierNode",
                            "value":"public",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"Example",
                          "comments":[
                            
                          ]
                        },
                        "body":{
                          "type":"ClassBodyNode",
                          "declarations":[
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"private",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"value",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "assignment":{
                                      "type":"VariableAssignmentNode",
                                      "variableAssignment":{
                                        "type":"VariableExpressionInitNode",
                                        "expression":{
                                          "type":"LiteralNode",
                                          "node":{
                                            "type":"StringLiteralNode",
                                            "valueRep":"\"42\""
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"String",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"MethodDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"public",
                                  "comments":[
                                    
                                  ]
                                },
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"static",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "returnType":{
                                "type":"PrimitiveTypeNode",
                                "name":"void",
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"main",
                                "comments":[
                                  
                                ]
                              },
                              "parameters":{
                                "type":"FormalParametersNode",
                                "parameters":{
                                  "type":"FormalParameterDeclsNode",
                                  "modifiers":[
                                    
                                  ],
                                  "parameterType":{
                                    "type":"ArrayTypeNode",
                                    "typeNode":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"String",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "depth":[
                                      {
                                        "type":"ArrayDimensionNode",
                                        "comments":[
                                          
                                        ]
                                      }
                                    ]
                                  },
                                  "nextDeclarator":{
                                    "type":"AdditionalFormalParameterDeclNode",
                                    "variableDeclarator":{
                                      "type":"VariableDeclaratorNode",
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"args",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "arrayDepth":[
                                        
                                      ]
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                },
                                "comments":[
                                  
                                ]
                              },
                              "arrayReturnType":[
                                
                              ],
                              "thrownExceptions":{
                                "type":"ThrownExceptionsNode",
                                "qualifiedIdentifierList":{
                                  "type":"QualifiedIdentifierListNode",
                                  "qualifiedNames":[
                                    {
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"Exception",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  ],
                                  "comments":[
                                    
                                  ]
                                },
                                "comments":[
                                  
                                ]
                              },
                              "body":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"LocalVariableDeclarationStatementNode",
                                    "modifiers":[
                                      
                                    ],
                                    "declarators":{
                                      "type":"VariableDeclaratorsNode",
                                      "declarators":[
                                        {
                                          "type":"VariableDeclaratorNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"instance",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "arrayDepth":[
                                            
                                          ],
                                          "assignment":{
                                            "type":"VariableAssignmentNode",
                                            "variableAssignment":{
                                              "type":"VariableExpressionInitNode",
                                              "expression":{
                                                "type":"CastExpressionNode",
                                                "aType":{
                                                  "type":"ReferenceTypeNode",
                                                  "ids":[
                                                    {
                                                      "type":"ParameterizedTypeNode",
                                                      "identifier":{
                                                        "type":"IdentifierNode",
                                                        "name":"Example",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "argument":{
                                                  "type":"MethodInvocationNode",
                                                  "qualifiedIdentifier":{
                                                    "type":"QualifiedIdentifierNode",
                                                    "identifiers":[
                                                      {
                                                        "type":"IdentifierNode",
                                                        "name":"unsafe",
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "identifier":{
                                                    "type":"IdentifierNode",
                                                    "name":"allocateInstance",
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "args":{
                                                    "type":"ExpressionListNode",
                                                    "arguments":[
                                                      {
                                                        "type":"ClassLiteralExpressionNode",
                                                        "aType":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"Example",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "arrayDepths":[
                                                          
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      }
                                                    ],
                                                    "comments":[
                                                      
                                                    ]
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "varType":{
                                            "type":"ReferenceTypeNode",
                                            "ids":[
                                              {
                                                "type":"ParameterizedTypeNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"Example",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          }
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  },
                                  {
                                    "type":"ExpressionStatement",
                                    "expression":{
                                      "type":"MethodInvocationNode",
                                      "qualifiedIdentifier":{
                                        "type":"QualifiedIdentifierNode",
                                        "identifiers":[
                                          {
                                            "type":"IdentifierNode",
                                            "name":"System",
                                            "comments":[
                                              
                                            ]
                                          },
                                          {
                                            "type":"IdentifierNode",
                                            "name":"out",
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "identifier":{
                                        "type":"IdentifierNode",
                                        "name":"println",
                                        "comments":[
                                          
                                        ]
                                      },
                                      "args":{
                                        "type":"ExpressionListNode",
                                        "arguments":[
                                          {
                                            "type":"QualifiedIdentifierNode",
                                            "identifiers":[
                                              {
                                                "type":"IdentifierNode",
                                                "name":"instance",
                                                "comments":[
                                                  
                                                ]
                                              },
                                              {
                                                "type":"IdentifierNode",
                                                "name":"value",
                                                "comments":[
                                                  
                                                ]
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          }
                                        ],
                                        "comments":[
                                          
                                        ]
                                      },
                                      "comments":[
                                        
                                      ]
                                    },
                                    "labels":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"FieldDeclaratorNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"static",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "variables":{
                                "type":"VariableDeclaratorsNode",
                                "declarators":[
                                  {
                                    "type":"VariableDeclaratorNode",
                                    "identifier":{
                                      "type":"IdentifierNode",
                                      "name":"unsafe",
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepth":[
                                      
                                    ],
                                    "varType":{
                                      "type":"ReferenceTypeNode",
                                      "ids":[
                                        {
                                          "type":"ParameterizedTypeNode",
                                          "identifier":{
                                            "type":"IdentifierNode",
                                            "name":"Unsafe",
                                            "comments":[
                                              
                                            ]
                                          },
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    }
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            {
                              "type":"BlockDeclarationNode",
                              "modifiers":[
                                {
                                  "type":"KeywordModifierNode",
                                  "value":"static",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "block":{
                                "type":"BlockNode",
                                "statements":[
                                  {
                                    "type":"TryCatchStatementNode",
                                    "block":{
                                      "type":"BlockNode",
                                      "statements":[
                                        {
                                          "type":"LocalVariableDeclarationStatementNode",
                                          "modifiers":[
                                            
                                          ],
                                          "declarators":{
                                            "type":"VariableDeclaratorsNode",
                                            "declarators":[
                                              {
                                                "type":"VariableDeclaratorNode",
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"singleoneInstanceField",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "arrayDepth":[
                                                  
                                                ],
                                                "assignment":{
                                                  "type":"VariableAssignmentNode",
                                                  "variableAssignment":{
                                                    "type":"VariableExpressionInitNode",
                                                    "expression":{
                                                      "type":"BinaryExpressionNode",
                                                      "operator":{
                                                        "type":"OperatorNode",
                                                        "symbol":".",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "left":{
                                                        "type":"ClassLiteralExpressionNode",
                                                        "aType":{
                                                          "type":"QualifiedIdentifierNode",
                                                          "identifiers":[
                                                            {
                                                              "type":"IdentifierNode",
                                                              "name":"Unsafe",
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "arrayDepths":[
                                                          
                                                        ],
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "right":{
                                                        "type":"MethodInvocationNode",
                                                        "identifier":{
                                                          "type":"IdentifierNode",
                                                          "name":"getDeclaredField",
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "args":{
                                                          "type":"ExpressionListNode",
                                                          "arguments":[
                                                            {
                                                              "type":"LiteralNode",
                                                              "node":{
                                                                "type":"StringLiteralNode",
                                                                "valueRep":"\"theUnsafe\""
                                                              },
                                                              "comments":[
                                                                
                                                              ]
                                                            }
                                                          ],
                                                          "comments":[
                                                            
                                                          ]
                                                        },
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "varType":{
                                                  "type":"ReferenceTypeNode",
                                                  "ids":[
                                                    {
                                                      "type":"ParameterizedTypeNode",
                                                      "identifier":{
                                                        "type":"IdentifierNode",
                                                        "name":"Field",
                                                        "comments":[
                                                          
                                                        ]
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              }
                                            ],
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"MethodInvocationNode",
                                            "qualifiedIdentifier":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"singleoneInstanceField",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "identifier":{
                                              "type":"IdentifierNode",
                                              "name":"setAccessible",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "args":{
                                              "type":"ExpressionListNode",
                                              "arguments":[
                                                {
                                                  "type":"LiteralNode",
                                                  "node":{
                                                    "type":"BooleanLiteralNode",
                                                    "valueRep":"true"
                                                  },
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        },
                                        {
                                          "type":"ExpressionStatement",
                                          "expression":{
                                            "type":"BinaryExpressionNode",
                                            "operator":{
                                              "type":"OperatorNode",
                                              "symbol":"=",
                                              "comments":[
                                                
                                              ]
                                            },
                                            "left":{
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"unsafe",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            },
                                            "right":{
                                              "type":"CastExpressionNode",
                                              "aType":{
                                                "type":"ReferenceTypeNode",
                                                "ids":[
                                                  {
                                                    "type":"ParameterizedTypeNode",
                                                    "identifier":{
                                                      "type":"IdentifierNode",
                                                      "name":"Unsafe",
                                                      "comments":[
                                                        
                                                      ]
                                                    },
                                                    "comments":[
                                                      
                                                    ]
                                                  }
                                                ],
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "argument":{
                                                "type":"MethodInvocationNode",
                                                "qualifiedIdentifier":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"singleoneInstanceField",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"get",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "args":{
                                                  "type":"ExpressionListNode",
                                                  "arguments":[
                                                    {
                                                      "type":"LiteralNode",
                                                      "node":{
                                                        "type":"NullLiteralNode"
                                                      },
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "comments":[
                                                
                                              ]
                                            },
                                            "comments":[
                                              
                                            ]
                                          },
                                          "labels":[
                                            
                                          ]
                                        }
                                      ],
                                      "labels":[
                                        
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "catches":[
                                      {
                                        "type":"CatchClauseNode",
                                        "modifiers":[
                                          
                                        ],
                                        "catchType":{
                                          "type":"CatchTypeNode",
                                          "identifiers":[
                                            {
                                              "type":"QualifiedIdentifierNode",
                                              "identifiers":[
                                                {
                                                  "type":"IdentifierNode",
                                                  "name":"Exception",
                                                  "comments":[
                                                    
                                                  ]
                                                }
                                              ],
                                              "comments":[
                                                
                                              ]
                                            }
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "identifier":{
                                          "type":"IdentifierNode",
                                          "name":"e",
                                          "comments":[
                                            
                                          ]
                                        },
                                        "block":{
                                          "type":"BlockNode",
                                          "statements":[
                                            {
                                              "type":"ExpressionStatement",
                                              "expression":{
                                                "type":"MethodInvocationNode",
                                                "qualifiedIdentifier":{
                                                  "type":"QualifiedIdentifierNode",
                                                  "identifiers":[
                                                    {
                                                      "type":"IdentifierNode",
                                                      "name":"e",
                                                      "comments":[
                                                        
                                                      ]
                                                    }
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "identifier":{
                                                  "type":"IdentifierNode",
                                                  "name":"printStackTrace",
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "args":{
                                                  "type":"ExpressionListNode",
                                                  "arguments":[
                                                    
                                                  ],
                                                  "comments":[
                                                    
                                                  ]
                                                },
                                                "comments":[
                                                  
                                                ]
                                              },
                                              "labels":[
                                                
                                              ]
                                            }
                                          ],
                                          "labels":[
                                            
                                          ],
                                          "comments":[
                                            
                                          ]
                                        },
                                        "comments":[
                                          
                                        ]
                                      }
                                    ],
                                    "labels":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "labels":[
                                  
                                ],
                                "comments":[
                                  
                                ]
                              }
                            }
                          ],
                          "comments":[
                            
                          ]
                        },
                        "labels":[
                          
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  }
                ]
              },
              "rawText":"import java.lang.reflect.Field; import sun.misc.Unsafe; public class Example { private String value = \"42\"; public static void main(String[] args) throws Exception { Example instance = (Example) unsafe.allocateInstance(Example.class); System.out.println(instance.value); } static Unsafe unsafe; static { try { Field singleoneInstanceField = Unsafe.class.getDeclaredField(\"theUnsafe\"); singleoneInstanceField.setAccessible(true); unsafe = (Unsafe) singleoneInstanceField.get(null); } catch (Exception e) { e.printStackTrace(); } } } ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "trace":1,
                    "alloc":1,
                    "system":1,
                    "field":6,
                    "print":1,
                    "set":1,
                    "singleon":3,
                    "sun":1,
                    "main":1,
                    "println":1,
                    "declar":1,
                    "stack":1,
                    "misc":1,
                    "true":1,
                    "unsaf":8,
                    "lang":1,
                    "reflect":1,
                    "arg":1,
                    "instanc":6,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"java",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"lang",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"reflect",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Field",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"sun",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"misc",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        },
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"String",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Example",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Unsafe",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"Field",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    {
                      "type":"PrimitiveTypeNode",
                      "name":"void",
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"unsafe",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"allocateInstance",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"ClassLiteralExpressionNode",
                            "aType":{
                              "type":"QualifiedIdentifierNode",
                              "identifiers":[
                                {
                                  "type":"IdentifierNode",
                                  "name":"Example",
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "arrayDepths":[
                              
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"singleoneInstanceField",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"get",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"NullLiteralNode"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"getDeclaredField",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"theUnsafe\""
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"e",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"printStackTrace",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"singleoneInstanceField",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"setAccessible",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"LiteralNode",
                            "node":{
                              "type":"BooleanLiteralNode",
                              "valueRep":"true"
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"MethodInvocationNode",
                      "qualifiedIdentifier":{
                        "type":"QualifiedIdentifierNode",
                        "identifiers":[
                          {
                            "type":"IdentifierNode",
                            "name":"System",
                            "comments":[
                              
                            ]
                          },
                          {
                            "type":"IdentifierNode",
                            "name":"out",
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"println",
                        "comments":[
                          
                        ]
                      },
                      "args":{
                        "type":"ExpressionListNode",
                        "arguments":[
                          {
                            "type":"QualifiedIdentifierNode",
                            "identifiers":[
                              {
                                "type":"IdentifierNode",
                                "name":"instance",
                                "comments":[
                                  
                                ]
                              },
                              {
                                "type":"IdentifierNode",
                                "name":"value",
                                "comments":[
                                  
                                ]
                              }
                            ],
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      },
                      "comments":[
                        
                      ]
                    }
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"args",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ]
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"singleoneInstanceField",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"BinaryExpressionNode",
                            "operator":{
                              "type":"OperatorNode",
                              "symbol":".",
                              "comments":[
                                
                              ]
                            },
                            "left":{
                              "type":"ClassLiteralExpressionNode",
                              "aType":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"Unsafe",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "arrayDepths":[
                                
                              ],
                              "comments":[
                                
                              ]
                            },
                            "right":{
                              "type":"MethodInvocationNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"getDeclaredField",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"LiteralNode",
                                    "node":{
                                      "type":"StringLiteralNode",
                                      "valueRep":"\"theUnsafe\""
                                    },
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Field",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"value",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"LiteralNode",
                            "node":{
                              "type":"StringLiteralNode",
                              "valueRep":"\"42\""
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"String",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"instance",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "assignment":{
                        "type":"VariableAssignmentNode",
                        "variableAssignment":{
                          "type":"VariableExpressionInitNode",
                          "expression":{
                            "type":"CastExpressionNode",
                            "aType":{
                              "type":"ReferenceTypeNode",
                              "ids":[
                                {
                                  "type":"ParameterizedTypeNode",
                                  "identifier":{
                                    "type":"IdentifierNode",
                                    "name":"Example",
                                    "comments":[
                                      
                                    ]
                                  },
                                  "comments":[
                                    
                                  ]
                                }
                              ],
                              "comments":[
                                
                              ]
                            },
                            "argument":{
                              "type":"MethodInvocationNode",
                              "qualifiedIdentifier":{
                                "type":"QualifiedIdentifierNode",
                                "identifiers":[
                                  {
                                    "type":"IdentifierNode",
                                    "name":"unsafe",
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"allocateInstance",
                                "comments":[
                                  
                                ]
                              },
                              "args":{
                                "type":"ExpressionListNode",
                                "arguments":[
                                  {
                                    "type":"ClassLiteralExpressionNode",
                                    "aType":{
                                      "type":"QualifiedIdentifierNode",
                                      "identifiers":[
                                        {
                                          "type":"IdentifierNode",
                                          "name":"Example",
                                          "comments":[
                                            
                                          ]
                                        }
                                      ],
                                      "comments":[
                                        
                                      ]
                                    },
                                    "arrayDepths":[
                                      
                                    ],
                                    "comments":[
                                      
                                    ]
                                  }
                                ],
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        },
                        "comments":[
                          
                        ]
                      },
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Example",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    },
                    {
                      "type":"VariableDeclaratorNode",
                      "identifier":{
                        "type":"IdentifierNode",
                        "name":"unsafe",
                        "comments":[
                          
                        ]
                      },
                      "arrayDepth":[
                        
                      ],
                      "varType":{
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"Unsafe",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>which prints </p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25448017]-[792557998]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>which prints </p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "print":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"null "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[25448017]-[105180025]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"null "
                  }
                ]
              },
              "rawText":"null ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>indicating that the <code>Example</code> default constructor wasn't invoked.</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25448017]-[-543142531]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>indicating that the <code>Example</code> default constructor wasn't invoked.</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "invok":1,
                    "constructor":1,
                    "wasn":1,
                    "code":2,
                    "indic":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type":"StackOverflowAnswer",
      "id":25448357,
      "questionId":25447910,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":39706349,
          "postId":25448357,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":1705598,
            "displayName":"icza",
            "reputation":19360
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"The Fifth Element: JNI"
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25448357-cu39706349]-[1060183387]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"The Fifth Element: JNI"
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "jni":1,
                        "element":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"StackOverflowComment",
          "id":39706710,
          "postId":25448357,
          "creationDate":"2014-08-22",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":3712077,
            "displayName":"barbara",
            "reputation":497
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"JNI is the best way I think. Especially when you are familiar with C."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[25448357-cu39706710]-[942663080]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"JNI is the best way I think. Especially when you are familiar with C."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "familiar":1,
                        "jni":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2014-08-22",
      "lastActivityDate":"2014-08-22",
      "score":0,
      "isAccepted":false,
      "owner":{
        "type":"StackOverflowUser",
        "id":2551312,
        "displayName":"Kumar Abhinav",
        "reputation":2216
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>There are 4 ways of creating an instance of an Object</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25448357]-[-50858242]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>There are 4 ways of creating an instance of an Object</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "object":1,
                    "instanc":1,
                    "creat":1,
                    "way":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>1)</strong> Through constructor using <code>new</code> keyword -The constructor should be accessible</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25448357]-[-575936805]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>1)</strong> Through constructor using <code>new</code> keyword -The constructor should be accessible</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "constructor":2,
                    "strong":2,
                    "keyword":1,
                    "code":2,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>2)</strong> Through <code>serialization/deserialization</code>-The class should be Serializable;</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25448357]-[-497069281]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>2)</strong> Through <code>serialization/deserialization</code>-The class should be Serializable;</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ClassDeclarationNode",
                    "modifiers":[
                      
                    ],
                    "identifier":{
                      "type":"IdentifierNode",
                      "name":"should",
                      "comments":[
                        
                      ]
                    },
                    "labels":[
                      
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "serial":1,
                    "serializ":1,
                    "strong":2,
                    "code":2,
                    "deseri":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>3)</strong> Through clone() method -The method should implement the marker interface Cloneable</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25448357]-[1124147222]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>3)</strong> Through clone() method -The method should implement the marker interface Cloneable</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "method":2,
                    "marker":1,
                    "strong":2,
                    "cloneabl":1,
                    "clone":1,
                    "implement":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p><strong>4)</strong> Through reflection-You can access the constructor and create an instance without using the new keyword.The best thing about Reflection is that it can be used to instantiate Objects for private Constructors ,provided one does not mess up with SecurityManager</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[25448357]-[1896318549]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p><strong>4)</strong> Through reflection-You can access the constructor and create an instance without using the new keyword.The best thing about Reflection is that it can be used to instantiate Objects for private Constructors ,provided one does not mess up with SecurityManager</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"ReferenceTypeNode",
                    "ids":[
                      {
                        "type":"ParameterizedTypeNode",
                        "identifier":{
                          "type":"IdentifierNode",
                          "name":"SecurityManager",
                          "comments":[
                            
                          ]
                        },
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  }
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "provid":1,
                    "instanti":1,
                    "constructor":2,
                    "thing":1,
                    "secur":1,
                    "strong":2,
                    "keyword":1,
                    "object":1,
                    "mess":1,
                    "manag":1,
                    "creat":1,
                    "reflect":2,
                    "instanc":1,
                    "access":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    {
                      "type":"ReferenceTypeNode",
                      "ids":[
                        {
                          "type":"ParameterizedTypeNode",
                          "identifier":{
                            "type":"IdentifierNode",
                            "name":"SecurityManager",
                            "comments":[
                              
                            ]
                          },
                          "comments":[
                            
                          ]
                        }
                      ],
                      "comments":[
                        
                      ]
                    }
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}