{
  "type":"StackOverflowArtifact",
  "question":{
    "type":"StackOverflowQuestion",
    "id":10257656,
    "title":"Bind &lt;rich:listShuttle&gt; or put two list in render attribute",
    "comments":[
      
    ],
    "tags":[
      "java",
      "jsf-2",
      "richfaces",
      "ajax4jsf"
    ],
    "creationDate":"2012-04-21",
    "lastActivityDate":"2012-04-21",
    "lastEditDate":"2012-04-21",
    "score":0,
    "viewCount":200,
    "owner":{
      "type":"StackOverflowUser",
      "id":913559,
      "displayName":"AngelsandDemons",
      "reputation":1053
    },
    "source":[
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>What do I do if I have to put two rendered condition on listshuttle.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[10257656]-[-2058980362]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>What do I do if I have to put two rendered condition on listshuttle.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "put":1,
                  "condit":1,
                  "listshuttl":1,
                  "render":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>I have a <code>&lt;rich:listshuttle&gt;</code> and I have put <code>rendered=&quot;#{!empty Bean.arrayList}&quot;.</code></p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[10257656]-[-1799238150]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>I have a <code>&lt;rich:listshuttle&gt;</code> and I have put <code>rendered=&quot;#{!empty Bean.arrayList}&quot;.</code></p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"rich:listshuttle"
                  },
                  "attributes":[
                    
                  ],
                  "elements":[
                    
                  ]
                },
                {
                  "type":"QualifiedIdentifierNode",
                  "identifiers":[
                    {
                      "type":"IdentifierNode",
                      "name":"Bean",
                      "comments":[
                        
                      ]
                    },
                    {
                      "type":"IdentifierNode",
                      "name":"arrayList",
                      "comments":[
                        
                      ]
                    }
                  ],
                  "comments":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "listshuttl":1,
                  "rich":1,
                  "code":4,
                  "array":1,
                  "bean":1,
                  "empti":1,
                  "put":1,
                  "quot":2,
                  "render":1,
                  "list":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>So if arraylist is empty this component is not rendered. However on certain occassion I want to render this component even when the arraylist is not empty.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[10257656]-[485165387]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>So if arraylist is empty this component is not rendered. However on certain occassion I want to render this component even when the arraylist is not empty.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "occass":1,
                  "arraylist":2,
                  "compon":2,
                  "empti":2,
                  "render":2
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>It may be possible to bind <code>&lt;rich:listShuttle&gt;</code> with the backing bean but how can it be achieved.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[10257656]-[-961245228]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>It may be possible to bind <code>&lt;rich:listShuttle&gt;</code> with the backing bean but how can it be achieved.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                {
                  "type":"XmlNode",
                  "name":{
                    "type":"XmlNameNode",
                    "value":"rich:listShuttle"
                  },
                  "attributes":[
                    
                  ],
                  "elements":[
                    
                  ]
                }
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "bind":1,
                  "rich":1,
                  "code":2,
                  "achiev":1,
                  "bean":1,
                  "back":1,
                  "shuttl":1,
                  "list":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      },
      {
        "type":"SourceInfo",
        "node":{
          "type":"XmlTextNode",
          "contents":"<p>Also is it possible if I put two list in the rendered field.But I think my objective still won't be achieved.</p>"
        },
        "units":[
          {
            "type":"TextUnit",
            "id":"[10257656]-[1474311058]",
            "astNode":{
              "type":"TextFragmentNode",
              "text":"<p>Also is it possible if I put two list in the rendered field.But I think my objective still won't be achieved.</p>"
            },
            "codeFragments":{
              "type":"CodeFragmentSequence",
              "fragments":[
                
              ]
            },
            "metaInformation":[
              {
                "type":"NaturalLanguageMetaInformation",
                "tfMap":{
                  "field":1,
                  "object":1,
                  "achiev":1,
                  "put":1,
                  "render":1,
                  "won":1,
                  "list":1
                }
              },
              {
                "type":"CodeTypesMetaInformation",
                "qualifiedTypes":[
                  
                ],
                "simpleTypes":[
                  
                ],
                "basicTypes":[
                  
                ]
              },
              {
                "type":"CodeInvocationMetaInformation",
                "invocations":[
                  
                ]
              },
              {
                "type":"CodeVariablesMetaInformation",
                "variables":[
                  
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "answers":[
    {
      "type":"StackOverflowAnswer",
      "id":10257775,
      "questionId":10257656,
      "comments":[
        {
          "type":"StackOverflowComment",
          "id":13223252,
          "postId":10257775,
          "creationDate":"2012-04-23",
          "score":0,
          "isEdited":false,
          "owner":{
            "type":"StackOverflowUser",
            "id":913559,
            "displayName":"AngelsandDemons",
            "reputation":1053
          },
          "source":[
            {
              "type":"SourceInfo",
              "node":{
                "type":"XmlTextNode",
                "contents":"I need to try whether I can use or in the EL expression...Also I explored and found I can bind listshuttle with HtmlListShuttle attribute in the backing bean which gives me full control of the component."
              },
              "units":[
                {
                  "type":"TextUnit",
                  "id":"[10257775-cu13223252]-[1007789564]",
                  "astNode":{
                    "type":"TextFragmentNode",
                    "text":"I need to try whether I can use or in the EL expression...Also I explored and found I can bind listshuttle with HtmlListShuttle attribute in the backing bean which gives me full control of the component."
                  },
                  "codeFragments":{
                    "type":"CodeFragmentSequence",
                    "fragments":[
                      {
                        "type":"ReferenceTypeNode",
                        "ids":[
                          {
                            "type":"ParameterizedTypeNode",
                            "identifier":{
                              "type":"IdentifierNode",
                              "name":"HtmlListShuttle",
                              "comments":[
                                
                              ]
                            },
                            "comments":[
                              
                            ]
                          }
                        ],
                        "comments":[
                          
                        ]
                      }
                    ]
                  },
                  "metaInformation":[
                    {
                      "type":"NaturalLanguageMetaInformation",
                      "tfMap":{
                        "listshuttl":1,
                        "full":1,
                        "bind":1,
                        "explor":1,
                        "compon":1,
                        "attribut":1,
                        "found":1,
                        "bean":1,
                        "back":1,
                        "express":1,
                        "shuttl":1,
                        "control":1,
                        "html":1,
                        "list":1
                      }
                    },
                    {
                      "type":"CodeTypesMetaInformation",
                      "qualifiedTypes":[
                        
                      ],
                      "simpleTypes":[
                        {
                          "type":"ReferenceTypeNode",
                          "ids":[
                            {
                              "type":"ParameterizedTypeNode",
                              "identifier":{
                                "type":"IdentifierNode",
                                "name":"HtmlListShuttle",
                                "comments":[
                                  
                                ]
                              },
                              "comments":[
                                
                              ]
                            }
                          ],
                          "comments":[
                            
                          ]
                        }
                      ],
                      "basicTypes":[
                        
                      ]
                    },
                    {
                      "type":"CodeInvocationMetaInformation",
                      "invocations":[
                        
                      ]
                    },
                    {
                      "type":"CodeVariablesMetaInformation",
                      "variables":[
                        
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "creationDate":"2012-04-21",
      "lastActivityDate":"2012-04-21",
      "score":1,
      "isAccepted":true,
      "owner":{
        "type":"StackOverflowUser",
        "id":971040,
        "displayName":"viktor",
        "reputation":796
      },
      "source":[
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlTextNode",
            "contents":"<p>You should be able to put any EL expression evaluating to boolean in rendered</p>"
          },
          "units":[
            {
              "type":"TextUnit",
              "id":"[10257775]-[2010899440]",
              "astNode":{
                "type":"TextFragmentNode",
                "text":"<p>You should be able to put any EL expression evaluating to boolean in rendered</p>"
              },
              "codeFragments":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  
                ]
              },
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "evalu":1,
                    "put":1,
                    "render":1,
                    "express":1
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        },
        {
          "type":"SourceInfo",
          "node":{
            "type":"XmlNode",
            "name":{
              "type":"XmlNameNode",
              "value":"pre"
            },
            "attributes":[
              
            ],
            "elements":[
              {
                "type":"XmlNode",
                "name":{
                  "type":"XmlNameNode",
                  "value":"code"
                },
                "attributes":[
                  
                ],
                "elements":[
                  {
                    "type":"XmlTextNode",
                    "contents":"rendered=&quot;#{(not empty Bean.arrayList) or (empty Bean.arrayList and Bean.conditionMet)}&quot; "
                  }
                ]
              }
            ]
          },
          "units":[
            {
              "type":"StructuredFragmentUnit",
              "id":"[10257775]-[1473384139]",
              "astNode":{
                "type":"CodeFragmentSequence",
                "fragments":[
                  {
                    "type":"TextFragmentNode",
                    "text":"rendered=\"#{(not empty "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Bean",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"arrayList",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":") or (empty "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Bean",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"arrayList",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":" and "
                  },
                  {
                    "type":"QualifiedIdentifierNode",
                    "identifiers":[
                      {
                        "type":"IdentifierNode",
                        "name":"Bean",
                        "comments":[
                          
                        ]
                      },
                      {
                        "type":"IdentifierNode",
                        "name":"conditionMet",
                        "comments":[
                          
                        ]
                      }
                    ],
                    "comments":[
                      
                    ]
                  },
                  {
                    "type":"TextFragmentNode",
                    "text":")}\" "
                  }
                ]
              },
              "rawText":"rendered=\"#{(not empty BeanarrayList) or (empty BeanarrayList and BeanconditionMet)}\" ",
              "metaInformation":[
                {
                  "type":"NaturalLanguageMetaInformation",
                  "tfMap":{
                    "met":1,
                    "empti":2,
                    "render":1,
                    "beancondit":1,
                    "beanarray":2,
                    "list":2
                  }
                },
                {
                  "type":"CodeTypesMetaInformation",
                  "qualifiedTypes":[
                    
                  ],
                  "simpleTypes":[
                    
                  ],
                  "basicTypes":[
                    
                  ]
                },
                {
                  "type":"CodeInvocationMetaInformation",
                  "invocations":[
                    
                  ]
                },
                {
                  "type":"CodeVariablesMetaInformation",
                  "variables":[
                    
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}